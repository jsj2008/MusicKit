*
* SNOBOL4 program to convert Ravel .ma note lists to MusicKit .score ScoreFiles
* Leigh Smith 8/11/94
* Run as snobol4 ravel2scorefile.sno < filename.ma
*
	&trim	  = 1
	&anchor	  = 1
	num_pat	  = span('0123456789')
	RavelDur  = 'whqestx'
	RavChroma = '#b'
	MusicKitChroma = 'sf'
	PartList  = 'first second third fourth fifth sixth seventh eighth nineth tenth '
	LMF	  = '5/8'
	LPIANO	  = '3/8'
	LFORTE	  = '6/8'
	L	  = 'Dunno'
	mkcmnt	  = '// '
* pluck out the tab character (ascii char 9)
	&alphabet len(9) len(1) . tab 
	wstext	  = ' ' tab
	ws	  = span(wstext) | ''
	comment_pat = ws '#' rem . comment
	part_pat  = ('vco' | 'VCO') ws rem . part 
	newpart_pat = break(' ') . part ' '
	cmd_pat	  = ws ('key' | 'sig' | 'end' | 'final')
	pitch_pat = (span('LH') | '') . octave any('ABCDEFG') . diatone
+	(any(RavChroma) . chrom | 'n' | '' . chrom)
	dur_pat	  = ws (any('dt') | '') . dotted any(RavelDur) . dur
	durloud_pat = dur_pat ws arb . loud (' ' | tab | '#' | rpos(0))
	note_pat  = ws pitch_pat durloud_pat
	numpitch_pat = num_pat . keynum
	numdur_pat =  ws num_pat . clockdur
	numnote_pat = ws numpitch_pat numdur_pat
	rest_pat  = ws 'rest' dur_pat
	tie_pat	  = ws ('tie' | 'TIE') dur_pat
	pitchcluster_pat = (pitch_pat | numpitch_pat) span(',' wstext)
	chord_prefix = ws 'chord' ws arbno(pitchcluster_pat) . notes 'end'
	chord_pat = chord_prefix durloud_pat
	numchord_pat = chord_prefix numdur_pat

*
* Return the duration converted to number of beats
*
		define('duration(dur,dotted)')
		RavelMKdurs = 'w4,h2,q1,e0.5,s0.25,t0.125,x0.0625,'
		mkdur_pat = break(*dur) *dur break(',') . duration	:(durationend)
duration	RavelMKdurs mkdur_pat
		duration = ident(dotted,'d') duration * 1.5	:s(return)
		duration = ident(dotted,'t') (duration * 2) / 3	:(return)
durationend

*
* Format and display a note statement into a MusicKit parameter set.
*			
		define('noteout()octnum')
		octchar_pat = len(1) . octchar			:(noteoutend)
noteout		octnum = 4 + size(octave)
		octave octchar_pat
		octnum = ident(octchar, 'L') 4 - size(octave)
		freq = 'freq:' replace(diatone, &UCASE, &LCASE)
+			replace(chrom, RavChroma, MusicKitChroma) octnum
		loud num_pat					:f(strloud)
		amp = 'amp:' loud / 127.0			:s(printit)
strloud		amp = differ(loud) 'amp:' $('L' replace(loud, &LCASE, &UCASE))
printit		output = part ' (' duration(dur,dotted) ') ' freq ' ' amp ';'	:(return)
noteoutend

*
* Format and display a note statement given numeric parameters only.
*
		define('numnoteout(keynum,clockdur)')		:(numnoteend)
numnoteout	output = part ' (' clockdur / 24.0 ') keyNum:' keynum ';' :(return)
numnoteend

*
* Generate a scorefile header
*
		output = 'info tempo: 120 samplingRate: 44100;'
		partcount = 1
		HeadPartList = PartList

findpart	line = input					:f(beginotes)
		line part_pat					:f(findpart)
		differ(part)					:s(outpart)
		HeadPartList newpart_pat =
outpart		output = 'part ' part ';'
		output = part ' synthPatch: "midi" midiChan: ' partcount ';'
		partcount = partcount + 1			:(findpart)
			
beginotes	output = 'BEGIN;'
		output = 't 0.0;'
		rewind(5)
*
* The proper start of the code
*
nextline	line = input					:f(end_inp)
		line comment_pat				:f(tie)
		output = mkcmnt comment				:(nextline)

tie		line tie_pat					:f(vcocmd)
		output = mkcmnt 'extend previous duration by +'
+		duration(dur,dotted)	:(nexttime)

vcocmd		line part_pat					:f(ravcmd)
		differ(part)					:s(nextline)
		PartList newpart_pat =				:(nextline)

ravcmd		replace(line, &UCASE, &LCASE) cmd_pat		:f(notecmd)
		output = mkcmnt line				:(nextline)

notecmd		line note_pat					:f(numnotecmd)
		noteout()					:(nexttime)

numnotecmd	line numnote_pat				:f(chordcmd)
		numnoteout(keynum, clockdur)			:(outnumtime)

chordcmd	line chord_pat					:f(numchordcmd)
chordnotes	notes pitchcluster_pat =			:f(nexttime)
		noteout()					:(chordnotes)

numchordcmd	line numchord_pat				:f(rest)
numchrdnotes	notes pitchcluster_pat =			:f(outnumtime)
		numnoteout(keynum,clockdur)			:(numchrdnotes)

rest		replace(line, &UCASE, &LCASE) rest_pat		:f(unknown)
		output = part ' (mute) ;'
nexttime	output = 't +' duration(dur,dotted) ';'		:(nextline)
outnumtime	output = 't +' clockdur / 24.0 ';'		:(nextline)
unknown		output = mkcmnt line				:(nextline)
end_inp
		output = 'END;'
end
