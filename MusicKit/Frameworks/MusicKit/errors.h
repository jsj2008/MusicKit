/* Copyright 1988-1992, NeXT Inc.  All rights reserved. */
/*
  $Id$
  Defined In: The MusicKit

  This file has trace codes as well as error codes used by the Music Kit.
*/
/*
Modification history:

  $Log$
  Revision 1.4  1999/09/04 23:01:08  leigh
  MKSetErrorProc now takes a function with a NSString parameter

  Revision 1.3  1999/08/26 20:00:19  leigh
  new MKError prototype

  Revision 1.2  1999/07/29 01:26:04  leigh
  Added Win32 compatibility, CVS logs, SBs changes

*/
#ifndef __MK_errors_H___
#define __MK_errors_H___
//sb:
#import <Foundation/Foundation.h>

/* Music Kit TRACE codes */
#define MK_TRACEORCHALLOC 1  /* Orchestra allocation information */
#define MK_TRACEPARS 2       /* App params, when first encountered. */
#define MK_TRACEDSP 4        /* Music Kit DSP messages */
#define MK_TRACEMIDI 8       /* MIDI in/out/time warnings */
#define MK_TRACEPREEMPT 16   /* SynthInstrument preemptions msgs */
#define MK_TRACESYNTHINS  32 /* SynthInstrument messages */
#define MK_TRACESYNTHPATCH 64 /* SynthPatch library messages */
#define MK_TRACEUNITGENERATOR 128 /* UnitGenerator library messages */
#define MK_TRACECONDUCTOR 256 /* Conductor time messages */
#define MK_TRACEDSPARRAYS 512 /* Print arrays loaded to DSP */

 /* Tracing.  */
extern unsigned MKSetTrace(int traceCode);
 /* Turns on specified trace bit. */

extern unsigned MKClearTrace(int traceCode);
 /* Turns off specified trace bit. */

extern BOOL MKIsTraced(int traceCode);
 /* Returns whether specified trace bit is on. */

extern void MKSetScorefileParseErrorAbort(int cnt);
 /* Sets the number of parser errors to abort on. To never abort,
  * pass MAXINT as the argument. To abort on the first error, pass 1 as the
  * argument. The default is 10. 
  */

 /* Due to the requirements of real-time The Music Kit uses a different 
    mechanism from that of the Application Kit to do error handling. The 
    following functions impelment that mechanism. 

    Note that it is not guaranteed to be safe to NX_RAISE an error in any 
    performance-oriented class. 
   */
extern void MKSetErrorProc(void (*errProc)(NSString *msg));
    /* Sets proc to be used when MKError() and _MKErrorf() are called. 
       If errProc is NULL, uses the default error proc, which writes to the 
       Music Kit error NXStream (see MKSetErrorStream()). 
       errProc takes one string argument. 
       When the *errProc is called in response to a Music Kit error, errno is 
       set to the MKErrno corresponding to the error. If *errProc is invoked in
       response to an application-defined error (see MKError), errno is not
       set; it's up to the application to set it, if desired. 
       */

extern id MKError(NSString *msg);
    /* Calls the user's error proc (set with MKSetErrorProc), if any, with 
       one argument, the msg. Otherwise, writes the message on the Music
       Kit error stream. (See MKSetErrorStream) Returns nil.
       */

extern void MKSetErrorStream(NSMutableData *aStream);
    /* Sets the Music Kit error stream. 
       NULL means stderr. The Music Kit initialization sets the error 
       stream to stderr. Note that during a multi-threaded Music Kit 
       performance, errors invoked from the Music Kit thread are not sent
       to the error stream. Use MKSetErrorProc to see them. */

extern NSMutableData *MKErrorStream(void);
    /* Returns the Music Kit error stream. This is, by default, stderr.  */

/* Errors generated by the Music Kit. You don't normally generate these 
 * yourself. */

#define MK_ERRORBASE 4000    /* 1000 error codes for us start here */

typedef enum _MKErrno {
    MK_musicKitErr = MK_ERRORBASE,
    MK_machErr,
    /* Representation errors */
    MK_cantOpenFileErr ,
    MK_cantCloseFileErr,
    MK_outOfOrderErr,           /* Scorefile parsing/writing error */
    MK_samplesNoResampleErr,
    MK_noMoreTagsErr,
    MK_notScorefileObjectTypeErr,
    /* Synthesis errors */
    MK_orchBadFreeErr,
    MK_synthDataCantClearErr,   /* Synthdata errors */ 
    MK_synthDataLoadErr,
    MK_synthDataReadonlyErr,
    MK_synthInsOmitNoteErr,     /* SynthInstrument errors */
    MK_synthInsNoClass,
    MK_ugLoadErr,               /* UnitGenerator errors. */
    MK_ugBadArgErr,
    MK_ugBadAddrPokeErr,
    MK_ugBadDatumPokeErr,
    MK_ugOrchMismatchErr,
    MK_ugArgSpaceMismatchErr,
    MK_ugNonAddrErr,
    MK_ugNonDatumErr,

    /* Scorefile errors. */
    MK_sfBadExprErr,     /* Illegal constructs */
    MK_sfBadDefineErr,
    MK_sfBadParValErr,
    MK_sfNoNestDefineErr,

    MK_sfBadDeclErr,     /* Missing constructs */
    MK_sfMissingStringErr,
    MK_sfBadNoteTypeErr,
    MK_sfBadNoteTagErr,
    MK_sfMissingBackslashErr,
    MK_sfMissingSemicolonErr,
    MK_sfUndeclaredErr,
    MK_sfBadAssignErr,
    MK_sfBadIncludeErr,
    MK_sfBadParamErr,
    MK_sfNumberErr,
    MK_sfStringErr,
    MK_sfGlobalErr,
    MK_sfCantFindGlobalErr,
    
    MK_sfMulDefErr, /* Duplicate constructs */
    MK_sfDuplicateDeclErr,

    MK_sfNotHereErr,
    MK_sfWrongTypeDeclErr,
    MK_sfBadHeaderStmtErr,
    MK_sfBadStmtErr,

    MK_sfBadInitErr,
    MK_sfNoTuneErr,
    MK_sfNoIncludeErr,
    MK_sfCantFindFileErr,
    MK_sfCantWriteErr,
    MK_sfOutOfOrderErr,
    MK_sfUnmatchedCommentErr,
    MK_sfInactiveNoteTagErr,
    MK_sfCantFindClass,
    MK_sfBoundsErr, 
    MK_sfTypeConversionErr,
    MK_sfReadOnlyErr,
    MK_sfArithErr,
    MK_sfNonScorefileErr,
    MK_sfTooManyErrorsErr,
    
    /* Unit generator library errors. */
    MK_ugsNotSetRunErr,
    MK_ugsPowerOf2Err,
    MK_ugsNotSetGetErr,

    /* Synth patch library errors. */
    MK_spsCantGetMemoryErr,
    MK_spsSineROMSubstitutionErr,
    MK_spsInvalidPartialsDatabaseKeywordErr, 
    MK_spsOutOfRangeErr,
    MK_spsCantGetUGErr,

    /* Errors added in Release 3.0 */
    MK_synthDataCantReadDSPErr,
    MK_dspMonitorVersionError,
    /* End marker */
    MK_highestErr,
    /* Reserved from here until MK_maxErr */
    MK_maxErr = (MK_ERRORBASE + 1000)
} MKErrno;

#define MK_sfNonAsciiErr MK_sfNonScorefileErr /* For backwards compatibility */


/* The remaining functions are the Music Kit's own internal error handling
 * functions. Normally, you don't call these functions.  However, if you 
 * need to raise an error with a Music Kit error code, you call _MKErrorf().  
 */

extern id _MKErrorf(int errorCode, ...); 
/* Calling sequence like printf, but first arg is musickit error code instead 
 * of formating info and the formating info is derived from the string in
 * /usr/local/lib/MusicKit/Languages/<language>.lproj/Localized.strings. 
 *
 * It's the caller's responsibility that the expansion of the arguments 
 * using sprintf doesn't exceed the size of the error buffer (_MK_ERRLEN). 
 * Fashions the error message and sends it to MKError(). 
 */

#define _MK_ERRLEN 2048

/* 
 * These functions are for accessing Music Kit's localized strings. 
 */ 
#import <Foundation/NSBundle.h>
extern NSBundle *_MKErrorBundle(void); 
/* 
 * Music Kit bundle for selected language in 
 * /usr/local/lib/MusicKit/Languages, if found.  
 */
extern NSString *_MKErrorStringFile(void); 
/* Returns "Localized" if _MKErrorBundle() returns non-null */

#endif
