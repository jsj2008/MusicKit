{\rtf0\ansi{\fonttbl\f2\fnil Times-Roman;\f3\ftech Symbol;\f1\fmodern Courier;}
\paperw16220
\paperh12580
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\f2\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 2.0  Copyright 
\f3 „
\f2 1990 by NeXT Computer, Inc.  All Rights Reserved.\
\

\pard\tx3120\tx3620\tx4120\fc0\cf0 Release 4.0  Updates Copyright 
\f3 „
\f2 1993 by Stanford University.  All Rights Reserved.\

\fs16\li2620 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\b\li1100\fc0\cf0 \
\
\
\

\fs36 SynthPatch\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	Object\

\fs16 \

\fs28 DECLARED IN	musickit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 A SynthPatch contains a configuration of UnitGenerators that work as a sound synthesis module.  SynthPatches are not created by the application; rather, they're created by the Orchestra.  The Orchestra is also responsible for filling the SynthPatch instance with UnitGenerator and SynthData instances.  It does this on the basis of a template provided by the SynthPatch class method 
\b patchTemplate
\b0 .  You implement this method in a subclass of SynthPatch to provide a PatchTemplate that specifies the mix of UnitGenerators and SynthData objects, in what order they're allocated, and how to connect them.\

\fs16 \

\fs28 Typically, a SynthPatch is owned and operated by a SynthInstrument object.  The SynthInstrument manages the allocation of SynthPatches in response to incoming Notes.  Alternatively, SynthPatches may be used in a stand-alone fashion.  In this case, you must allocate the objects by sending the Orchestra an 
\b allocSynthPatch:
\b0  or 
\b allocSynthPatch:patchTemplate:
\b0  message.\

\fs16 \

\fs28 While in performance, a SynthPatch is identified by the noteTag of the Note stream that it's synthesizing.\

\fs16 \

\pard\tx7140\li2100\fc0\cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Object
\i0 	Class	isa;\

\fs16 \

\i\fs28 Declared in SynthPatch
\i0 	id	synthElements;\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 id	synthInstrument;\
int	noteTag;\
MKSynthStatus	status;\
id	patchTemplate;\
BOOL	isAllocated;\
id	orchestra;\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 synthElements 	List of UnitGenerator and SynthData objects.\

\fs16 \

\fs28 synthInstrument 	The SynthInstrument object that owns the object, if any.\

\fs16 \

\fs28 noteTag 	The object's current noteTag.\

\fs16 \

\fs28 status 	The object's status.\

\fs16 \

\fs28 patchTemplate 	The object's PatchTemplate.\

\fs16 \

\fs28 isAllocated 	
\b YES
\b0  if the object is allocated.\

\fs16 \

\fs28 orchestra 	Orchestra on which the object is allocated.\

\pard\tx7140\fs16\li2100\fc0\cf0 \
\
\

\fs28 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Creating and freeing a SynthPatch
\f3 	+ 
\f2 allocSynthPatch: (Orchestra)\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 + allocSynthPatch:patchTemplate: (Orchestra)\
+ dealloc (Orchestra)\

\f3 - 
\f2 allocSynthPatch: (Orchestra)\

\f3 -
\f2  allocSynthPatch:patchTemplate: (Orchestra)\

\f3 -
\f2  dealloc (SynthPatch and Orchestra)\

\f3 - 
\f2 init\

\f3 - 
\f2 free\

\f3 - 
\f2 isFreeable\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Querying the object	+ defaultPatchTemplate\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 + findSynthPatchClass:\
+ orchestraClass\
± synthInstrument\
± synthElementAt:\
± patchTemplate\
± phraseStatus\
± isEqual\
± status\

\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 	
\f3 - 
\f2 hash\

\fs16 \

\fs28 Receiving and Synthesizing Notes	
\f3 - 
\pard\tx7140\f2\li2100\fc0\cf0 noteOn
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 :
\pard\tx7140\fs16\li2100\fc0\cf0 	
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 \
	
\pard\tx7140\f3\fs28\li2100\fc0\cf0 - 
\f2 noteOff:
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 \

\pard\tx7140\li2100\fc0\cf0 	
\pard\tx7140\tx10180\tx10680\f3\fi-4540\li7140\fc0\cf0 - 
\pard\tx7140\f2\li2100\fc0\cf0 noteUpdate
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 :
\pard\tx7140\fs16\li2100\fc0\cf0 	
\f3\fs28 - 
\f2 noteEnd
\fs16 	
\f3\fs28 - 
\f2 preemptFor:\

\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 \
Subclass Responsibility Methods
\fs16 	
\fs28 + patchTemplateFor:\

\f3 	- 
\f2 freeSelf\

\f3 	- 
\f2 controllerValues:	\

\fs16 	
\f3\fs28 - 
\f2 noteOnSelf:
\fs16 \

\fs28 	
\f3 - 
\f2 noteOffSelf:
\pard\tx7140\fs16\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 	
\f3 - 
\f2 noteUpdateSelf:
\pard\tx7140\fs16\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 	
\f3 - 
\f2 noteEndSelf	\
	
\f3 - 
\f2 moved:
\fs16 \

\pard\tx7140\li2100\fc0\cf0 \
\

\fs28 CLASS METHODS\

\fs16 \

\b \

\fs28 defaultPatchTemplate\

\pard\b0\fi-1020\li3620\fc0\cf0 + 
\b defaultPatchTemplate\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the default PatchTemplate for the class.\

\fs16 \

\pard\tx7140\b\fs28\li2100\fc0\cf0 findSynthPatchClass:
\fs16 \

\pard\fs28\fi-1020\li3620\fc1\cf1 +findSynthPatchClass:
\b0  (char *)
\i className
\i0 \
\

\pard\tx3120\tx3620\tx4120\li2620\fc1\cf1 This method does dynamic loading of Objective-C SynthPatch 
\b .o
\b0  modules.  It first tries to find the specified class in the application.  If it is not present, it searches the directories
\b  ~/Library/Music/SynthPatches
\b0 , 
\b /LocalLibrary/Music/SynthPatches
\b0 ,  and 
\b /NextLibrary/Music/SynthPatches
\b0 , in that order, looking for a file of the form 
\i className
\b\i0 .o
\b0 .  Note that you have to be careful how you strip your application if you want to use this method–use 
\b strip -x 
\b0 or 
\b strip -S
\b0 .  \
\
If a file is found, it is dynamically loaded.  If the whole process is successful, the newly loaded class is returned. Otherwise, nil is returned.  If the file is found but the link fails, an error is printed to the stream returned by 
\b MKErrorStream() 
\b0 (this defaults to 
\b stderr
\b0 ). You can change it to another stream with 
\b MKSetErrorStream().
\b0 \
\
When doing dynamic loading, you have to make sure that any symbols referenced by the dynamically loaded code are present in the application.  For example, if a SynthPatch uses a UnitGenerator that is not linked to your application, the dynamic load will fail.   
\b ProjectBuilder
\b0  normally supplies the 
\b -ObjC
\b0  flag, which has the effect of linking all ObjectiveC classes in all libraries against which your application links.  If you do not use the
\b  -ObjC 
\b0 flag,  you can specify linking of specific unreferenced symbols using 
\b -u .objc_class_name_MyClass
\b0 .   If you want the dynamically loaded code to be able to access non-ObjectiveC symbols in l
\b ibNeXT
\b0  or 
\b libsys
\b0  that are not already used in the application, you must include 
\b -u libNeXT_s
\b0  or 
\b -u libsys_s
\b0  on the link line.   Alternatively, you can use the 
\b -all_load
\b0  linker option, which will pull in everything from all libraries.   \

\pard\fi-1020\li3620\fc1\cf1 \

\pard\tx7140\b\li2100\fc0\cf0 orchestraClass\

\pard\b0\fi-1020\li3620\fc0\cf0 + 
\b orchestraClass\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Always returns the Orchestra class.  It's provided for applications that extend the Music Kit to use other hardware.  Each SynthPatch subclass is associated with a particular kind of hardware.  The default hardware is that represented by Orchestra, the DSP56001.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 patchTemplateFor:\

\pard\b0\fi-1020\li3620\fc0\cf0 + 
\b patchTemplateFor:
\b0\i currentNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Returns an appropriate PatchTemplate with which to create a SynthPatch instance that will adequately synthesize 
\i currentNote
\i0 .  This method is invoked by SynthInstrument whenever it needs to allocate a new SynthPatch instance.  It may also be sent by an application to obtain the template to be used as the second argument to SynthInstrument's 
\b setSynthPatchCount:patchTemplate:
\b0  method.  Implementation of this method is a subclass responsibility.  If 
\i currentNote
\i0  is 
\b nil
\b0 , the default template should be returned.\

\fs16 \

\pard\tx7140\li2100\fc0\cf0 \
\

\fs28 INSTANCE METHODS\

\fs16 \

\b \

\fs28 controllerValues:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b controllerValues:
\b0\i controllers\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sent by the SynthInstrument to a SynthPatch when a new tag stream begins, before the 
\b noteOn:
\b0  message is sent.  
\i controllers
\i0  is a HashTable that describes the state of the MIDI controllers by mapping integer controller numbers to integer controller values.  The default implementation  does nothing. You may override it in a subclass as desired.\

\fs16 \

\fs28 Note that the sustain pedal controller is handled automatically by the SynthPatch class.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 dealloc\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b dealloc\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Deallocates a SynthPatch that was allocated manually from the Orchestra  (through 
\b allocSynthPatch:
\b0  or 
\b allocSynthPatch:patchTemplate:
\b0 ).  It sends 
\b noteEnd
\b0  to the receiver, deallocates the receiver, and returns 
\b nil
\b0 . If the receiver is owned by a SynthInstrument, this does nothing and returns 
\b nil
\b0 .\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 free\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b free\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 You never invoke this method; only the Orchestra can free a SynthPatch.  If a subclass needs to do anything special when the receiver is freed, it should override 
\b freeSelf
\b0 .\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 freeSelf\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b freeSelf\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Sent just before the receiver is free, a subclass can implement this method to provide specialized behavior.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 hash\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (unsigned)
\b hash\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Uses the noteTag to hash itself. \

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 init\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b init\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Sent by the Orchestra only when a new SynthPatch has just been created and before its UnitGenerator connections have been made, as defined by the PatchTemplate.  A subclass may override the 
\b init
\b0  method to provide additional initialization. A return of 
\b nil
\b0  to aborts the creation and frees the new SynthPatch.  The default implementation does nothing and returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 isEqual:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (BOOL)
\b isEqual:
\b0\i anObject\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Two SynthPatches are considered equal if they have the same noteTag.  This is used by the SynthInstrument to search for a SynthPatch matching a certain noteTag.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 isFreeable\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (BOOL)
\b isFreeable\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns YES if the receiver may be freed; otherwise returns NO.  A SynthPatch may only be freed if it's idle and not owned by a manually allocated SynthInstrument.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 moved:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b moved:
\b0\i aUG\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sent when the Orchestra moves a SynthPatch's UnitGenerator during DSP memory compaction.  
\i aUG
\i0  is the object that was moved.  A subclass can override this method to provide specialized behavior.  The default implementation does nothing.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 next\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b next\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 This method is used in conjunction with a SynthInstrument's 
\b preemptSynthPatchFor:patches:
\b0  method.  It returns the next SynthPatch in a List of active SynthPatches owned by the SynthInstrument.  The objects in the List are in the order in which they began synthesizing their current phrases (oldest first).\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteEnd\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b noteEnd\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Causes the receiver to become idle.  The message 
\b noteEndSelf
\b0  is sent to the receiver and its status is set to MK_idle.  Ordinarily this is invoked automatically by the SynthInstrument.  Returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteEndSelf\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b noteEndSelf\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 This method is invoked automatically when the Note stream is complete.  You never invoke this method directly; it's invoked by the SynthInstrument.  A subclass may override this to do what it needs to do to ensure that the SynthPatch produces no output. Usually, the subclass implementation sends the 
\b idle
\b0  message to the Out2sumUGx or Out2sumUGy UnitGenerator.  The default implementation does nothing and returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteOff:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (double)
\b noteOff:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Concludes a Note stream by sending 
\b [self noteOffSelf:
\b0\i aNote
\b\i0 ]
\b0  and setting the receiver's status to MK_finishing.  Returns the value returned by 
\b noteOffSelf:
\b0 .  This method is ordinarily invoked only by a SynthInstrument.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteOffSelf:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (double)
\b noteOffSelf:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 You never invoke this method; it's invoked automatically by 
\b noteOff
\b0 :.  However, a subclass may provide an implementation that describes its response to a noteOff.  The return value is the amount of time to wait, in seconds, before releasing the SynthPatch can be released.  The default implementation returns 0.0.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteOn:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b noteOn:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 This start or rearticulates a Note stream by sending 
\b noteOnSelf
\b0 :
\i aNote
\i0  to the receiver. If 
\b noteOnSelf:
\b0  returns 
\b self
\b0 , the receiver's status is set to MK_running and the receiver is returned.  If 
\b noteOnSelf:
\b0  returns 
\b nil
\b0 , 
\b noteEnd
\b0  is sent to the receiver and 
\b nil 
\b0 is returned.  Ordinarily sent only by SynthInstrument.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteOnSelf:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b noteOnSelf:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Subclass may override this method to do any initialization needed for each noteOn. 
\b noteOnSelf
\b0 : is sent whenever a new Note stream commences, even if the SynthPatch is already running. \

\fs16 \

\fs28 Returns the receiver or 
\b nil
\b0  if the receiver should immediately become idle. The message 
\b noteEnd
\b0  is sent to the receiver if this method returns 
\b nil
\b0 .\

\fs16 \

\fs28 You never invoke this method directly.  The default implementation returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteTag\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (int)
\b noteTag\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the noteTag associated with the Note stream the receiver is currently playing.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteUpdate:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b noteUpdate:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sent ordinarily only by the SynthInstrument when a noteUpdate is received. Implemented as
\b  [self noteUpdateSelf:
\b0\i aNote
\b\i0 ]
\b0 .\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 noteUpdateSelf:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b noteUpdateSelf:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 You never invoke this method, it's invoked automatically by 
\b noteUpdate
\b0 :.  A subclass can implement this method to provide behavior appropriate to reception of a noteUpdate.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 orchestra\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b orchestra\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the Orchestra instance to which the receiver belongs.  All UnitGenerators and SynthData in an instance of SynthPatch are on the same Orchestra instance.  In the standard NeXT configuration, there is one DSP and, thus, one Orchestra instance.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 patchTemplate\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b patchTemplate\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the PatchTemplate associated with the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 phraseStatus\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (MKPhraseStatus)
\b phraseStatus\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 This is a convenience method for SynthPatch subclass implementors.  The value returned takes into account whether the phrase is preempted, the noteType of the current Note and the status of the receiver.  If not called by a SynthPatch subclass, returns MK_noPhraseActivity\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 preemptFor:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b preemptFor:
\b0\i aNote\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sent when the receiver is running or finishing and is preempted by its SynthInstrument.  The default implementation does nothing and returns self. Normally, a time equal to the value returned by 
\b MKPreemptDuration()
\b0  is allowed to elapse before the preempting Note begins. A subclass can specify that the new Note happen immediately by returning 
\b nil
\b0 .\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 status\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2 (int)
\b status\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the status of the receiver.  This is not necessarily the status of all contained UnitGenerators.  For example, it is not unusual for a SynthPatch to be idle but most of its UnitGenerators, with the exception of the Out2sum, to be running.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 synthElementAt:\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b synthElementAt:
\b0 (unsigned)
\i anIndex\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Returns the UnitGenerator or SynthData at the specified index or 
\b nil
\b0  if 
\i anIndex
\i0  is out of bounds.  
\i anIndex
\i0  is zero-based.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 synthInstrument\

\pard\f3\b0\fi-1020\li3620\fc0\cf0 - 
\f2\b synthInstrument\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns synthInstrument owning the receiver, if any.\

\fs16 \

\fs28 \

\fs16 \

}
