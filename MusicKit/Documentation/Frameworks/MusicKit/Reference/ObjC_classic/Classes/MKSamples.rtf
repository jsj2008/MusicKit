{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fmodern Courier;\f3\fmodern Ohlfs;}
\paperw16220
\paperh12580
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 2.0  Copyright 
\f1 „
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.\
Release 5.0  changes Copyright 
\f1 „
\f0 1993 by Stanford University.  All Rights Reserved.\
\

\pard\tx3120\tx3620\tx4120\fs16\li2620\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\b\li1100\fc0\cf0 \
\
\
\

\fs36 Samples\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	WaveTable : Object\

\fs16 \

\fs28 DECLARED IN	musickit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 A Samples object represents one complete cycle of a sound waveform as a series of samples.  The data for a Samples object is established through association with a Sound object, defined by the Sound Kit.  Two methods are provided to create this association:\

\fs16 \

\pard\tx3120\tx3620\tx4120\tx4620\fs28\fi-520\li3120\fc0\cf0 ∑	
\b setSound:
\b0  takes a Sound object as an argument, copies it, and associates the reciever with the copied Sound.\

\fs16 \

\fs28 ∑	
\b readSoundfile:
\b0  takes the name of a soundfile, creates a Sound object for the data contained therein, and associates the receiver with the newly created Sound.\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 The Sound object or soundfile must be one channel of 16-bit linear data (SND_FORMAT_LINEAR_16).  The sampling rate is ignored; Samples objects are designed to be used as lookup tables for oscillator UnitGenerators in which use the sampling rate of the original data is of no consequence.\

\fs16 \

\fs28 You can create a Samples object from a scorefile by quoting the name of a soundfile within curly brackets which are themselves enclosed by square brackets.  The object can be given a name in a waveTable statement:\

\fs16 \

\pard\f2\fs24\li3120\fc0\cf0 waveTable mySamples = [ \{"samplesFile.snd" \}];\

\pard\tx3120\tx3620\tx4120\f0\fs16\li2620\fc0\cf0 \

\fs28 A Samples object that's written to a soundfile is referred to by the name of the soundfile from which it was created.  If a Sound object is used, a soundfile is created and the object is written to it, as explained in the method 
\b writeScorefileStream:
\b0 .  You should always name your Samples objects by calling the 
\b MKNameObject()
\b0  C function.\

\fs16 \

\fs28 Samples' sister class, Partials, lets you define a waveform by its sine wave components.\

\fs16 \

\fs28 Samples objects are automatically created by the Music Kit in a number of circumstances, such as when reading a Scorefile.  The function 
\b MKSetSamplesClass() 
\b0 allows you to specify that your own subclass of Samples be used when Samples objects are automatically created.   You retrieve the Samples class with 
\b MKGetSamplesClass()
\b0 .  \
\
Note that most of the Music Kit DSP oscillators require tables to be of a length that is a power of 2.   Note also that the length of a Sample load to the DSP is limited by the amount of DSP memory.\
\
Samples can be used in two contexts–to provide wavetables for oscillators and to provide tables for periodic excitation table (PET) synthesis.   The access methods inherited from the WaveTable class (such as 
\b -dataDSP
\b0 ) provide the data in oscillator table format.  In this case the Partials 
\i tableType 
\i0 internal
\i  
\i0 instance varaible is set to 
\b MK_oscTable
\b0 .   Alternatively, you can retrieve the data in excitation table format.  To do this, use one of the methods of the form 
\i accessMethod
\b\i0 AsExcitationTable
\b0\i arguments
\i0 .   For example, to get the data for the DSP with the default table length and scaling, use -
\b dataDSPAsExcitationTable
\b0 .  In this case the Partials 
\i tableType 
\i0 instance varaible is set to 
\b MK_excitationTable
\b0 .   For symmetry, a set of methods of the form 
\b dataDSPAsOscTable 
\b0 is provided.  These methods are synonyms for the inherited methods.   \
\
Actually, excitationTable and oscTable formats are the same when the length requested is the same as the length of the Sound.  However, the two behave differently when asked for a length that differs from the length of the Sound.  For a excitationTable, samples are omitted from the end of the Sound (if the Sound is longer) or zeros are appended to the end of  the Sound (if the Sound is shorter.)  For an oscTable, if the requested length evenly divides the actualy length, the Sound is downsampled by simply omitting samples.  Note that non-integer resampling is not currently supported.\
\
See also:  WaveTable, Partials\

\fs16 \

\pard\tx7140\li2100\fc0\cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Object
\i0 	Class	isa;\

\fs16 \

\i\fs28 Inherited from WaveTable
\i0 	int	length; \

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 double	scaling;\
DSPDatum	*dataDSP;\
double	*dataDouble;\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\i\fs28 Declared in Samples
\i0 	id	sound;\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 char	*soundfile;\
int	tableType;\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 sound 	The object's Sound object.\

\fs16 \

\fs28 soundfile 	The name of the soundfile, if the Sound was set through 
\b readSoundfile:
\b0 .\

\pard\tx7140\fs16\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 tableType 	Type of currently cached data, if any.  Otherwise MK_oscTable.\

\pard\tx7140\fs16\li2100\fc0\cf0 \
\
\

\fs28 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Creating and freeing a Samples	
\f1 - 
\f0 copy \

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 free\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Modifying the object	
\f1 - 
\f0 fillTableLength:scale:\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 init\

\f1 - 
\f0 readSoundfile:\

\f1 - 
\f0 setSound:\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Querying the object	
\f1 - 
\f0 soundfile\

\f1 	- 
\f0 sound\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 tableType\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Writing the object	
\f1 - 
\f0 writeScorefileStream:\

\pard\tx7140\fs16\li2100\fc0\cf0 \
\
\

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Retrieving osc table data	
\f1 - 
\f0 dataDSPAsOscTable\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 dataDSPAsOscTableLength: \

\f1 - 
\f0 dataDSPAsOscTableLength:scale: \

\f1 - 
\f0 dataDSPAsOscTableScale: \

\f1 - 
\f0 dataDoubleAsOscTable\

\f1 - 
\f0 dataDoubleAsOscTableLength: \

\f1 - 
\f0 dataDoubleAsOscTableLength:scale: \

\f1 - 
\f0 dataDoubleAsOscTableScale:\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\pard\tx7140\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Retrieving excitation table data	
\f1 - 
\f0 dataDSPasExcitationTable\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 dataDSPas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 TableLength: \

\f1 - 
\f0 dataDSPas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 TableLength:scale: \

\f1 - 
\f0 dataDSPas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 TableScale: \

\f1 - 
\f0 dataDoubleas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 Table\

\f1 - 
\f0 dataDoubleas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 TableLength: \

\f1 - 
\f0 dataDoubleas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 TableLength:scale: \

\f1 - 
\f0 dataDoubleas
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 TableScale:\

\pard\tx7140\li2100\fc0\cf0 INSTANCE METHODS\

\fs16 \

\b \

\fs28 copy\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b copy\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Creates and returns a new Samples object as a copy of the receiver.  The receiver's Sound is copied into the new object.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28\fc1\cf1 dataDSPAsOscTable\
dataDSPAsOscTableLength: \
dataDSPAsOscTableLength:scale: \
dataDSPAsOscTableScale: \
dataDoubleAsOscTable\
dataDoubleAsOscTableLength: \
dataDoubleAsOscTableLength:scale: \
dataDoubleAsOscTableScale:\

\pard\tx3120\tx3620\tx4120\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\fc1\cf1 (DSPDatum *)
\b\fc0\cf0 dataDSPAsOscTable\

\f1\b0 - 
\f0\fc1\cf1 (DSPDatum *)
\b dataDSPAsOscTableLength:
\b0 (int)length
\b  \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (DSPDatum *)
\b dataDSPAsOscTableLength:
\b0 (int)length 
\b scale:
\b0 (double)scaling
\b \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (DSPDatum *)
\b dataDSPAsOscTableScale:
\b0 (double)scaling
\b  \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAsOscTable\

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAsOscTableLength:
\b0 (int)length
\b \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAsOscTableLength:
\b0 (int)length 
\b scale: \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAsOscTableScale:
\b0 (double)scaling
\b \

\b0\fi0\li2620 \
These methods provide data in 
\b MK_oscTable 
\b0 format.   They are identical to the superclass versions (without the "OscTable" in their name).  For example, 
\b dataDSPAsOscTable 
\b0 is the same as WaveTable's 
\b dataDSP
\b0 .   \

\pard\tx7140\tx10180\tx10680\b\fi-4540\li7140\fc1\cf1 \

\pard\tx7140\li2100\fc1\cf1 dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table\

dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 TableLength: \

dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 TableLength:scale: \

dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 TableScale: \

dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table\

dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 TableLength: \

dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 TableLength:scale: \

dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 TableScale:\

\pard\tx3120\tx3620\tx4120\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\fc1\cf1 (DSPDatum *)
\b\fc0\cf0 dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc0\cf0 \

\f1\b0 - 
\f0\fc1\cf1 (DSPDatum *)
\b dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 Length:
\b0 (int)length
\b  \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (DSPDatum *)
\b dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 Length:
\b0 (int)length 
\b scale:
\b0 (double)scaling
\b \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (DSPDatum *)
\b dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 Scale:
\b0 (double)scaling
\b  \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 Length:
\b0 (int)length
\b \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 Length:
\b0 (int)length 
\b scale: \

\f1\b0\fc0\cf0 - 
\f0\fc1\cf1 (double *)
\b dataDoubleAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\fi-1020\li3620\fc1\cf1 Scale:
\b0 (double)scaling
\b \

\b0 \

\fi0\li2620 These methods are similar to the superclass versions (without the "
\pard\tx7140\tx10180\tx10680\b\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\b0\li2620\fc1\cf1 " in their name), except that they specify that the table to be computed should be in 
\b\fc0\cf0 MK_e
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 xcitation
\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 Table
\fc1\cf1  
\b0 format.   For example, 
\b dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc1\cf1 Table
\pard\tx3120\tx3620\tx4120\li2620\fc1\cf1  
\b0 looks to see if the currently-cached data is of the type 
\b\fc0\cf0 MK_e
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 xcitation
\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 Table
\fc1\cf1  
\b0 and is of the default length and scaling.  If so, that data is returned.   If not, it is recomputed.   \

\pard\tx7140\b\li2100\fc0\cf0 \
fillTableLength:scale:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b fillTableLength:
\b0 (int)
\i aLength 
\b\i0 scale:
\b0 (double)
\i aScaling\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Copies 
\i aLength
\i0  samples from the receiver's Sound into the 
\b dataDSP
\b0  array (inherited from WaveTable) and scales the copied data by multiplying it by 
\i aScaling
\i0 .  If 
\i aScaling
\i0  is 0.0, the data is scaled to fit perfectly within the range 
\f1 -
\f0 .0 to 1.0.   Uses 
\b oscTable
\b0  format.\
\
If 
\i aLength
\i0  is different from the length of the Sound or soundfile, the sound is resampled.  (Note that currently only downsampling by a power of 2 is supported.)   \

\fs16 \

\fs28 The 
\b dataDouble
\b0  array (also from WaveTable) is reset.  You ordinarily don't invoke this method; it's invoked from methods defined in WaveTable.  Returns self or 
\b nil
\b0  if there's a problem.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 fillOscTableLength:scale:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 -
\f0  
\b fillOscTableLength:
\b0 (int)
\i aLength
\i0  
\b scale:
\b0 (double)
\i aScaling\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Same as 
\b fillTableLength:scale:
\b0 .   Provided for symmetry.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 fill
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc0\cf0 TableLength:scale:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 -
\f0  
\b fill
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc0\cf0 Table
\pard\fi-1020\li3620\fc0\cf0 Length:
\b0 (int)
\i aLength
\i0  
\b scale:
\b0 (double)
\i aScaling\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Computes the sampled waveform from the sine wave components in 
\b MK_e
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 xcitation
\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 Table
\b0  format, by doing a recursive Chebychev polynomial expansion.\

\fs16 \

\fs28 This method is invoked automatically by the data retrieval methods such as 
\b dataDSPAs
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Excitation
\pard\tx7140\li2100\fc0\cf0 Table
\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 –you needn't invoke this method yourself.  Returns the receiver, or 
\b nil
\b0  if an error occurs.   Also sets the 
\i tableType 
\i0 internal instance variable to 
\b MK_e
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 xcitation
\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 Table
\b0 .    For best results, use an odd length.\

\pard\tx7140\b\li2100\fc0\cf0 \
free\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b free\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Frees the receiver and its Sound.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 init\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b init\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Send this message when you create a new instance.  You can also invoke this method to reset a Samples object.  It sets the receiver's 
\b sound
\b0  variable to 
\b nil
\b0  and 
\b soundfile
\b0  to NULL.  The receiver's previous Sound object, if any, is freed.  A subclass implementation should send 
\b [super init]
\b0 .  Returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 lengthAdjustingTechnique\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b lengthAdjustingTechnique
\b0\i \

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Returns value set with 
\b setLengthAdjustingTechnique:
\b0 .\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 readSoundfile:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b readSoundfile:
\b0 (char *)
\i aSoundfile\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Creates a new Sound object, reads the data from 
\i aSoundfile
\i0  into the object, and then sends 
\b setSound:
\b0  to the receiver with the new Sound as the argument.  You shouldn't free the Sound yourself; it's automatically freed when the receiver is freed, initialized, or when a subsequent Sound is set.  Returns 
\b nil
\b0  if the 
\b setSound:
\b0  message returns 
\b nil
\b0 ; otherwise returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 setLengthAdjustingTechnique:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b setLengthAdjustingTechnique:
\b0 (int)
\i technique\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sets how the object will handle the situation of being asked for data of a length different from that of its sound or soundfile.   Two techniques are supported.   MK_RESAMPLE (the default) resamples the sound.  (Note that currently only downsampling by a power of 2 is supported.)   MK_TRUNCATE throws away the end of the sound, (if the sound is longer than the request) or adds zeros to the end of the sound (if the sound is shorter than the request.)  These constants are defined in the file Samples.h.  Note that changing the lengthAdjustingTechnique has the effect of invalidating the cached data.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 setSound:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b setSound:
\b0\i aSound\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sets the receiver's Sound to a copy of 
\i aSound
\i0  (the receiver's current Sound is freed).  
\i aSound
\i0  must be one-channel, 16-bit linear data.  You shouldn't free the Sound yourself; it's automatically freed when the receiver is freed, initialized, or when a subsequent Sound is set.  Returns 
\b nil
\b0  if 
\i aSound
\i0  is in the wrong format, otherwise returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 sound\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b sound\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the receiver's Sound object.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 soundfile\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0 (char *)
\b soundfile\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the name of the receiver's soundfile, or 
\b NULL
\b0  if the receiver's Sound wasn't set through 
\b readSoundfile:
\b0 .  The name isn't copied; you shouldn't alter the returned string.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 tableType:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\fc1\cf1 (int)
\b tableType\

\b0\i\fs16\fc0\cf0 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Returns the tableType of the currently-cached data, if any.  If none, returns the default, MK_oscTable.\

\fs16 \

\pard\tx7140\b\fs28\li2100\fc0\cf0 writeScorefileStream:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b writeScorefileStream:
\b0 (NXStream *)
\i aStream\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Writes the receiver in scorefile format.  Writes the receiver in scorefile format to the stream 
\i aStream
\i0 .  If the Sound wasn't set from a soundfile, a soundfile with the unique name ™samples
\i Number
\i0 .snd∫ (where 
\i Number
\i0  is added only if needed), is created and the Sound is written to it.  The object remembers if its Sound has been written to a soundfile.  If the receiver couldn't be written to the stream, returns 
\b nil
\b0 , otherwise returns the receiver.\

\fs16 \

\fs28 \

\fs16 \

}
