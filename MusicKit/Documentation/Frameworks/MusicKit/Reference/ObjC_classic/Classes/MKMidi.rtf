{\rtf0\ansi{\fonttbl\f0\froman Times-Roman;\f1\ftech\fcharset2 Symbol;\f2\fmodern Courier;
}
{\colortbl;\red255\green255\blue255;}
\paperw16220\paperh11920
\pard\tx3120\tx3620\tx4120\ql\qnatural

\f0\fs24 \cf0 Release 2.0  Copyright 
\f1 ã
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.\
Release 4.0 additions Copyright 
\f1 ã
\f0 1993 by CCRMA, Stanford University.  All Rights Reserved.\
MIDI time code support 
\f1 ã 1993, 
\f0 Copyright Pinnacle Research.\
\pard\ql\qnatural
\cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \
\pard\li1100\ql\qnatural

\b \cf0 \
\
\
\

\fs36 MKMidi\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b0\fs28 \cf0 INHERITS FROM	NSObject\

\fs16 \

\fs28 DECLARED IN	MusicKit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A MKMidi object lets you communicate with a MIDI synthesizer (attached to a serial port at the back of a NeXT computer or to a MPU-401 compatible card installed in a P.C.) by providing a simple interface to the MIDI device driver.  The MKMidi class also provides a mechanism that automatically converts MIDI messages into MKNote objects and vice versa, allowing you to incorporate MIDI data into a MusicKit application with a minimum of effort.\

\fs16 \

\fs28 While inheriting neither from MKPerformer nor MKInstrument, the MKMidi class emulates both of them:  Like a MKPerformer, it contains a NSArray of MKNoteSenders, and, like an MKInstrument, it contains a NSArray of MKNoteReceivers.  A newly created MKMidi object contains 17 MKNoteSenders and 17 MKNoteReceivers, one for each of the 16 Voice Channels and one for the Basic Channel.   (Note, however, that the method 
\b setMergeInput: 
\b0 allows the option of all messages to be sent via MKNoteSender 0.  Similarly, if a MKNote is sent to MKNoteReceiver 0, the MK_midiChan parameter of that MKNote determines on which MIDI channel it is sent.)\

\fs16 \

\fs28 Before a MKMidi object can receive messages from or send messages to an external synthesizer, it must be sent the 
\b open
\b0  and 
\b run
\b0  messages:  \

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	
\b open
\b0  establishes communication between the object and the MIDI driver. \
·	
\b run
\b0  starts the driver's clock ticking.  \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 Balancing these two methods are 
\b stop
\b0  and 
\b close
\b0 : \

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	
\b stop
\b0  stops the driver's clock.\
·	
\b close
\b0  breaks communication between the object and the MIDI driver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 The state of a MKMidi object with respect to the foregoing methods is described in its 
\b deviceStatus
\b0  instance variable:\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	MK_devOpen.  The MKMidi object is open but not running.  \
·	MK_devRunning.  The object is open and running.  \
·	MK_devStopped.  The object has been running, but is now stopped.  \
·	MK_devClosed.  The object is closed.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 (Note that these are the same methods and MKDeviceStatus values used to control and describe the status of an MKOrchestra object.)\

\fs16 \

\fs28 The MIDI driver has its own clock that's generally more regular and steadfast than the MKConductor's clock.  To take advantage of this, the MKConductor is, by default, synched to incoming MIDI messages:  When a MIDI message arrives, the MKConductor's clock is set to the time stated in the message timestamp.  You can disable this feature by sending 
\b setUseInputTimeStamps:NO
\b0  to a MKMidi object.\

\fs16 \

\fs28 On the other side, as a MKMidi object initiates an outgoing MIDI message, it gives the message a timestamp that indicates when the message should be performed by the external MIDI device.  By default, the MIDI driver looks at the timestamp and waits until the appropriate time (as determined by its own clock) to send the message on to the synthesizer.  By sending 
\b setOutputTimed:NO
\b0  to a MKMidi object, you can specify that the driver is to ignore the timestamps and send all messages as soon as it receives them.\

\fs16 \

\fs28 Note that in all cases the MKConductor that's overseeing the MusicKit performance must be clocked if you want to use a MKMidi object.\

\fs16 \

\fs28 As MKMidi receives MIDI messages it creates MKNote objects following these rules:\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	For each MIDI message that has a Note Number, a MKNote object is created and given a noteTag that corresponds to the combination of the message's Channel Number and Note Number.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	If multiple Note Offs are received (for a particular Channel/Note number) without intervening Note Ons, only the first Note Off is converted into a MKNote object.  The others are suppressed.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	A Note On message with a MIDI Velocity of 0 is turned into a MKNote object of type noteOff.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	If a Note Off message has a MIDI Release Velocity of 0, the MK_releaseVelocity parameter in the corresponding MKNote object is omitted.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 In sending messages to an external synthesizer, MKMidi converts MKNote objects to MIDI messages:\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	If two successive noteOns have the same noteTag and the same MK_keyNum value, a Note Off is generated on the same channel and with the same Key Number as those for the Note Ons.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	If two successive noteOns have the same noteTag but different MK_keyNum values, the second Note On message is followed by a Note Off with the Key Number of the first Note On.  This is to accommodate MIDI Mono Mode.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	A noteOff with no MK_relVelocity parameter is converted to a Note On with a Velocity of 0.\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A number of parameters are provided to accommodate MIDI messages.  These are described in 
\b MIDITranslation.rtf
\b0 .\
\
A MKMidi object can be used to synchronize a performance to incoming MIDI time code.   To do so, send a MKConductor the message 
\b setMTCSynch:
\b0 , with a MKMidi object as the argument.  For further information on MIDI time code, see 
\b  MIDITimeCode.rtfd
\b0 .\
\
\pard\tx7140\li2100\ql\qnatural
\cf0 USING MIDI ON NeXT HARDWARE\
\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural
\cf0 See
\b  ../Administration/MidiHardwareInfo.rtf
\b0 \
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\i\fs28 \cf0 Inherited from Object
\i0 	Class	isa;\

\fs16 \

\i\fs28 Declared in MKMidi
\i0 	id	noteSenders;\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural
\cf0 id	noteReceivers;\
MKDeviceStatus	deviceStatus;\
char	*midiDev;\
BOOL	useInputTimeStamps;\
BOOL	outputIsTimed;\
double	localDeltaT;\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 noteSenders 	The object's collection of MKNoteSenders.\

\fs16 \

\fs28 noteReceivers 	The object's collection of MKNoteReceivers\

\fs16 \

\fs28 deviceStatus 	The object's status.\

\fs16 \

\fs28 midiDev 	Midi device name, e.g."midi0"\
	Intel hardware also recognizes directly-specified device names, like "Mididriver0."\

\fs16 \

\fs28 useInputTimeStamps 	YES if MKConductor's time updated from driver's time stamps.\

\fs16 \

\fs28 outputIsTimed 	YES if the driver's clock is used for output\

\fs16 \

\fs28 localDeltaT 	Offset added to MIDI out time stamps.\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\
\

\fs28 METHOD TYPES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 Creating and freeing a MKMidi object	
\f1 - 
\f0 free\
	+ midi\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural
\cf0 + midiOnDevice:\
+ midiOnDevice:host:\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Modifying the object	
\f1 - 
\f0 acceptSys: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\b \cf0 ± 
\b0 allNotesOff
\b \
± 
\b0 allNotesOffBlast
\b \

\f1\b0 - 
\f0 ignoreSys: \

\f1 - 
\f0 setConductor: \

\f1 - 
\f0 setLocalDeltaT: \

\f1 - 
\f0 setOutputTimed: \

\f1 - 
\f0 setUseInputTimeStamps:\

\f1 - 
\f0 setMergeInput:\
\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural
\cf0 Querying the object	+ getDriverNames\
	+ getDriverUnits:\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\f1 \cf0 \U9 - 
\f0 channelNoteReceiver: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 channelNoteSender: \

\f1 - 
\f0 conductor\

\f1 - 
\f0 deviceStatus\

\f1 - 
\f0 driverName\

\f1 - 
\f0 driverUnit\

\f1 - 
\f0 getMTCFormat:hours:min:sec:frames:\

\f1 - 
\f0 localDeltaT\

\f1 - 
\f0 noteReceiver\

\f1 - 
\f0 noteReceivers\

\f1 - 
\f0 noteSender\

\f1 - 
\f0 noteSenders\

\f1 - 
\f0 outputIsTimed\

\f1 - 
\f0 synchConductor\

\f1 - 
\f0 time\

\f1 - 
\f0 useInputTimeStamps\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Opening and running the object	
\f1 - 
\f0 abort\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 close\

\f1 - 
\f0 open\

\f1 - 
\f0 openInputOnly\

\f1 - 
\f0 openOutputOnly\

\f1 - 
\f0 run\

\f1 - 
\f0 stop\

\f1 - 
\f0 awaitQueueDrain\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\
\

\fs28 CLASS METHODS\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 getDriverNames\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + (NSArray *)
\b getDriverNames\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 <<Intel-based hardware only.>> \
Returns the array of driver names added to the system.   The arrays and strings are copied and autoreleased.   Since there is currently only one Midi driver, called "Mididriver", the names array will always contain only that string.  This method is provided primarily for forward compatibility.\
\
Note that the ordering in the array bears no relationship to the ordering of the Mididriver units.  Similarly, there may be more elements in the arrays than there are MIDI cards enabled in the user's defaults data base.  To find out which MIDI cards are actually enabled, do the following:\

\fs16 \

\fs28 	
\f2\fs24 int i;\
	id obj;\
	char s[10];\
	for (i=0; i<MK_MAXMIDIS; i++) \{ \
		sprintf(s,"midi%d",i);\
		obj = [MKMidi newOnDevice:s];\
		if (!obj) \
			fprintf(stderr,"No Midi driver for unit %d\\n",i);\

\f0\fs28 		
\f2\fs24 else
\f0\fs28 \
			
\f2\fs24 fprintf(stderr,"MIDI%d == %s%d\\n",i,[obj driverName],[obj driverUnit]);\
	
\f0\fs28 \}\
\
\pard\tx7140\li2100\ql\qnatural

\b \cf0 getDriverUnits\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + (NSArray *) 
\b getDriverUnits\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0 \cf0 \
<<Intel-based hardware only.>> \
Returns the array of driver unit numbers added to the system.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\fs28 \cf0 midi\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + 
\b midi\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If a MKMidi object for the device ªmidi0º doesn't already exist, this creates such an object and creates and adds to it a full complement of MKNoteSenders and MKNoteReceivers.  Otherwise, returns the existing object.  "midi0" corresponds to serial port A on the NeXT (black) hardware.   
\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 midiOnDevice:\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + 
\b midiOnDevice:
\b0 (NSString *)
\i devName\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 If a MKMidi object for the device 
\i devName
\i0  doesn't already exist, this creates such an object and creates and adds to it a full complement of MKNoteSenders and MKNoteReceivers.  Otherwise, returns the existing object.  
\i devName
\i0 , for the NeXT (black) hardware, is "midi0" for serial port A or "midi1" for serial port B.    On white hardware "midi0" corresponds to the value of the defaults data base variable 
\i MIDI0
\i0 , owned by 
\i MIDI
\i0 .  (See the NeXT documentation on 
\b dwrite
\b0  for more information about the defaults data base.)   Alternatively, 
\i devName
\i0  may be the direct driverName/unit combination, e.g. "Mididriver2."  
\fs16 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\
\pard\tx7140\li2100\ql\qnatural

\b\fs28 \cf0 midiOnDevice:\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + 
\b midiOnDevice:
\b0 (NSString *)
\i devName 
\i0\b host:
\b0 (NSString *)
\i hostName\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 If a MKMidi object for the device 
\i devName
\i0  on host 
\i hostName 
\i0 doesn't already exist, this creates such an object and creates and adds to it a full complement of MKNoteSenders and MKNoteReceivers.  Otherwise, returns the existing object.  
\i  
\i0 This enables an application to access another machine's serial ports.  \
\
<<On white hardware, 
\i hostName 
\i0 is currently ignoredÐthus, you may not open a Midi device on a network-based device when running on white hardware.>>
\fs16 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\

\fs28 INSTANCE METHODS\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 abort\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b abort\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Immediately closes the receiver, sets its status to MK_devClosed, and releases the device port.  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 acceptSys:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b acceptSys:
\b0 (MKMidiParVal)
\i param\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Instructs the receiver to accept in-coming MIDI messages that set the MK_sysRealTime parameter to the value specified in 
\i param
\i0 , which must be one of the following:\

\fs16 \
\pard\tx5140\tx7140\tx9160\tx11180\li3120\ql\qnatural

\fs28 \cf0 MK_sysClock \
MK_sysStart \
MK_sysContinue \
MK_sysStop\
MK_sysActiveSensing.\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 By default, MIDI messages that set the MK_sysRealTime parameter are ignored.  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 allNotesOff\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b allNotesOff
\i\b0 \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 If the receiver is open for output, sends a MIDI noteOff to the MIDI cable for every key number and MIDI channel for which an unmatched MIDI noteOn was previously sent.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 allNotesOffBlast\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b allNotesOffBlast
\i\b0 \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 If the receiver is open for output, sends a MIDI noteOff to the MIDI cable on every key number on every MIDI channel.   Unlike 
\b allNotesOff
\b0 , this method sends MIDI noteOffs regardless of whether an unmatched MIDI noteOn was previously sent.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 awaitQueueDrain\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b awaitQueueDrain
\i\b0 \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 If the receiver is running, blocks until all enqueued MIDI data has been sent to the MIDI cable.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 channelNoteReceiver:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b channelNoteReceiver:
\b0 (unsigned)
\i n\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the MKNoteReceiver corresponding to channel 
\i n
\i0 , or 
\b nil
\b0  if none.  A MKMidi object's MKNoteRecievers are numbered such that 0 is the MKNoteReceiver that processes system/channel mode messages and 1 through 16 are the MKNoteReceivers for the MIDI channels.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 channelNoteSender:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b channelNoteSender:
\b0 (unsigned)
\i n\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the MKNoteSender corresponding to channel 
\i n
\i0 , or 
\b nil
\b0  if none.  A MKMidi object's MKNoteRecieverSenders are numbered such that 0 is the MKNoteSender that processes system/channel mode messages and 1 through 16 are the MKNoteSenders for the MIDI channels.
\f1  
\f0 The MKNoteReceiver corresponding to 0 is special. It uses the MK_midiChan parameter of the note, if any, to determine which midi channel to send the note on. If no MK_midiChan parameter is present,  the default is channel 1. This MKNoteReceiver is also commonly used for MIDI channel mode and system messages. \
\pard\tx7140\li2100\ql\qnatural

\b\fs16 \cf0 \

\fs28 close\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b close\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Waits for the receiver's output queue to empty and then closes the receiver, sets its status to MK_devClosed, and releases the device port.  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 conductor\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b conductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the conductor that the MKNotes originating with MKMidi will return when sent the ±
\b conductor
\b0  message.  By default, returns the defaultConductor, if the MKConductor class is loaded, else nil. 
\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 deviceStatus\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (MKDeviceStatus)
\b deviceStatus\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's device status.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 driverName\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (char *)
\b driverName\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0  <<Intel-based hardware only>> Returns the name of the MIDI driver associated with this instance of MKMidi.  The string is not copied and should not be freed.  Currently, this method always returns "Mididriver."\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 driverUnit\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b driverUnit\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0  <<Intel-based hardware only>> Returns the unit associated with this instance of MKMidi.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 free\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b free\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Closes and frees the receiver and frees its MKNoteSenders and MKNoteReceivers.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 getMTCFormat:hours:min:sec:frames:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b getMTCFormat:
\b0 (short *)
\i format
\i0\b  hours:
\b0 (short*)
\i h
\i0\b  min:
\b0 (short *)
\i m
\i0\b  sec:
\b0 (short *)
\i s
\i0\b  frames:
\b0 (short *)
\i f
\b \
\pard\li3620\fi-1020\ql\qnatural

\i0\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 This only works if the receiver is currently providing MIDI time code to a MKConductor.   Returns the current time from the MIDI driver.  Unlike most of the MusicKit time methods and functions, this one gets the current time, whether or not [MKConductor adjustTime] or  [MKConductor lockPerformacne] was invoked.    If the 
\i deltaT 
\i0 mode is 
\b MK_DELTAT_SCHEDULER_ADVANCE
\b0 , the returned value has 
\i deltaT
\i0  added to it. \

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 ignoreSys:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b ignoreSys:
\b0 (MKMidiParVal)
\i param\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Instructs the receiver to ignore messages that set the MK_sysRealTime parameter to 
\i param
\i0 .  The list of values that are ignored by default is given in 
\b acceptSys:
\b0 .  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 localDeltaT\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b localDeltaT\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's local delta time in seconds\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteReceiver\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b noteReceiver\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the default MKNoteReceiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteReceivers\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 -
\f0  
\b noteReceivers\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns a NSArray containing the receiver's MKNoteReceivers.  The NSArray object will be autoreleased, although its contents (the MKNoteReceiver objects themselves) will not be released.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteSender\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b noteSender\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the default MKNoteSender\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteSenders\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b noteSenders\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns a NSArray containing the receiver's MKNoteSenders. The NSArray object will be autoreleased, although its contents (the MKNoteSender objects themselves) will not be released.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 open\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b open\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Opens the receiver, thus enabling two-way communication with the MIDI device it represents.  The receiver's status is set to MK_devOpen.  If the receiver is already open, its input and output message queues are flushed.  Returns the receiver, or 
\b nil
\b0  if it couldn't be opened.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 openInputOnly\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b openInputOnly\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Opens the receiver for input from the MIDI device it represents.  If the receiver is already open, its input message queue is flushed.  Returns the receiver, or 
\b nil
\b0  if it couldn't be opened.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 openOutputOnly\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b openOutputOnly\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Opens the receiver for output to the MIDI device it represents.  If the receiver is already open, its output message queue is flushed.  Returns the receiver, or 
\b nil
\b0  if it couldn't be opened.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 outputIsTimed\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (BOOL)
\b outputIsTimed\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns YES if the receiver is timed, otherwise returns NO.  The default is YES.\

\fs16 \

\fs28 See also:  
\f1 - 
\f0\b setOutputTimed\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 run\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b run\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Starts the receiver's clock, first opening the receiver if necessary, and sets the receiver's status to MK_devRunning.  Returns the receiver, or 
\b nil
\b0  if it's closed and can't be opened.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setConductor:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setConductor:a
\i\b0 Conductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the MKConductor that the MKNotes originating with MKMidi will return when sent the 
\b ±conductor
\b0  message.
\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setLocalDeltaT:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setLocalDeltaT:
\b0 (double)
\i value\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the receiver's local delta time, in seconds.  This has no effect if the receiver isn't timed.  Returns the receiver.  The default local delta time is 0.0.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setMergeInput:\
\pard\tx7140\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setMergeInput:
\b0 (BOOL)
\i yesOrNo
\i0\b \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0 \cf0 If set to YES, the MKNotes fashioned from the incoming MIDI stream are all sent to MKNoteSender 0 (the one that normally gets only system messages).   In addition, a MK_midiChan is added so that the stream can be split up again later.\
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 setOutputTimed:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setOutputTimed:
\b0 (BOOL)
\i yesOrNo\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Establishes whether MIDI messages are sent timed or untimed, as 
\i yesOrNo
\i0  is YES or NO.  If the receiver is timed, messages are stamped with the MKConductor's notion of the current time (plus the global and local delta times).  If it's untimed, the timestamps are always 0, indicating, to the MIDI driver, that the messages should be sent immediately.  The default is timed.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setUseInputTimeStamps:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setUseInputTimeStamps:
\b0 (BOOL)
\i yesOrNo\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 If 
\i yesOrNo
\i0  is 
\b YES
\b0  the MKConductor's clock is synched to the MIDI driver's clock whenever the receiver receives a MIDI message.  If the receiver isn't closed, this does nothing and returns 
\b nil
\b0 ; otherwise returns the receiver. \

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 stop\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b stop\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Stops the receiver's clock and sets the receiver's status to MK_devStopped; opens the receiver if it isn't already open.  Returns the receiver, or 
\b nil
\b0  if it's closed and can't be opened.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 synchConductor\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b synchConductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If the receiver has been set to provide MIDI time code to a MKConductor, this method returns that MKConductor.  Otherwise, it returns 
\b nil
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 time\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b time\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns time according to the MIDI driver.  If the 
\i deltaT
\i0  mode is 
\b MK_DELTAT_SCHEDULER_ADVANCE
\b0 , 
\i deltaT
\i0  is added to this time.   If the receiver is providing time code for a MKConductor, that MKConductor's 
\i timeOffset
\i0  is reflected in the time returned by this method.   Unlike most of the MusicKit time methods and functions, this one gets the current time, whether or not [MKConductor adjustTime] or  [MKConductor lockPerformacne] was invoked.    See also:  MKSetDeltaTMode(), MKSetDeltaT() and MKConductor.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 useInputTimeStamps\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 -
\f0  (BOOL)
\b useInputTimeStamps\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns YES if the MKConductor's clock is synched to the MIDI driver's clock, otherwise returns NO.  The default is YES.\

\fs16 \

\fs28 \
}
