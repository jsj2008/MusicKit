{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f2\ftech Symbol;\f1\fmodern Ohlfs;}
\paperw16220
\paperh12580
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 3.0  Copyright 
\f2 ã
\f0 1992 by CCRMA and David A. Jaffe.  All Rights Reserved.\
\

\pard\tx3120\tx3620\tx4120\fs16\li2620\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\b\li1100\fc0\cf0 \
\
\
\

\fs36\fc1\cf1 Timbre\

\pard\tx7140\b0\fs28\li2100\fc0\cf0 \
INHERITS FROM	Object\

\fs16 \

\fs28 DECLARED IN	musickit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc1\cf1 The Music Kit supports a Timbre Data Base.  Each element in the data base is a Timbre.  Each Timbre maps a timbre name to a List of WaveTable objects and a parallel list of frequencies for those WaveTables.  The Data Base is initialized with an extensive set of timbres.  These timbres may be removed or modified, additional timbres may be added, etc. \
\
The 
\i waveTables
\i0  List is a List object of WaveTables sorted according to frequency.  The table that corresponds to the lowest frequency is first in the List.   
\i freqs
\i0  is a Storage object containing the frequencies corresponding to each WaveTable.  The
\i  timbreName
\i0  may be any string, but should not have a number in it and should not be longer than MK_MAXTIMBRENAMELEN, which is defined in 
\b Timbre.h.
\b0 \
   \
You normally create or retrieve an Timbre with
\b  +newTimbre:
\b0 , passing the name of the timbre you want.  If that timbre exists, it is retrieved, otherwise it is created and installed in the Data Base.  Alternatively, you can create a new anonymous timbre with 
\b +alloc
\b0  and 
\b init
\b0 .  In this case, the timbre is not put in the Data Base until its name is set with 
\b setTimbreName:
\b0 .  
\b setTimbreName: 
\b0 can also be used to change the name of a  timbre that is already in the Data Base.  
\b timbreName
\b0  may be used to retrieve the name of an Timbre.  An anonymous timbre has a name field of NULL.\
\
The Music Kit SynthPatches use the Data Base by passing it a "timbre key".   A timbre key is a timbre name with an optional integer appended to it and an optional 0 or 1 prepended to it.   The trailing number in a timbre key specifies a particular table (1-based).  A leading 0 or 1 specifies use of  the 
\b freq0
\b0  or 
\b freq1
\b0  parameter, respectively, to determine the appropriate WaveTable.   For convenience in supporting this functionality in your own SynthPatch  subclasses, we provide the function
\b  MKWaveTableForTimbreKey()
\b0 . \
\
The Data Base is stored in a HashTable object that maps names to Timbre objects.  This HashTable can be retrieved by the 
\b +timbres
\b0  method.  See 
\b <objc/HashTable.h>
\b0  for how to enumerate the objects in a HashTable.\
\
An individual timbre can be written to an archive file.  Alternatively, the entire Data Base can be saved to an archive file using the 
\b +timbres
\b0  method  to retrieve the Data Base and then archiving that object.\

\fc0\cf0 \
See also:  WaveTable, Partials, Samples, SynthPatchLibrary.rtf\

\fs16 \

\pard\tx7140\li2100\fc0\cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Object
\i0 	Class	isa;\

\fs16 \

\fs28 Declared in Conductor	char 	*timbreName;  \
 	Storage 	*freqs;          \
	List 	*waveTables;\
\
timbreName 	Name of this timbre\

\fs16 \

\fs28 freqs 	Storage object of frequencies.\

\fs16 \

\fs28 waveTables 	List object of WaveTables.\

\fs16 \

\pard\tx7140\li2100\fc0\cf0 \
\

\fs28 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Creating a Timbre	+
\f2  
\f0 newTimbre:\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 + alloc\
+ allocFromZone:\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 	
\fs28 + copyFromZone:\
	init\

\fs16 \
\

\fs28 Querying the class	+ timbres\
\
Freeing a Timbre	free\
	freeSelfOnly\
\
Modifying the object	addWaveTable:forFreq:\
	empty\
	removeWaveTable:\
	setTimbreName:\

\fs16 \

\fs28 Querying the object	freqAt:\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 freq \
freqs\
timbreName\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 	
\fs28 waveTables\

\fs16 	
\fs28 waveTableAt:\

\fs16 	
\fs28 waveTableForFreq:\

\fs16 \

\fs28 Archiving	 finishUnarchiving:\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0  read\
 write\

\pard\tx7140\fs16\li2100\fc0\cf0 \
\
\

\fs28 CLASS METHODS\

\fs16 \

\b\fs28 \
newTimbre:
\fs16 \

\pard\fs28\fi-1020\li3620\fc1\cf1 + newTimbre:
\b0 (char *)
\i name
\b\i0 \
\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 Retrieve timbre if it exists, otherwise create it and install it in Data Base.\
\

\pard\tx7140\fs16\li2100\fc0\cf0 \

\fs28 INSTANCE METHODS\

\fs16 \

\b \

\fs28\fc1\cf1 addWaveTable:forFreq:\

\pard\tx3120\tx3620\tx4120\b0\fi-1020\li3620\fc1\cf1 ± 
\b\fi0\li2620\fc0\cf0 addWaveTable:
\b0 (WaveTable *)
\i obj
\i0  
\b forFreq:
\b0 (double)
\i freq
\i0 \

\fc1\cf1  \
Add the specified WaveTable/frequency pair. Returns self.  For speed, no check is made as to whether the given WaveTable is already present.   If you're not sure, send 
\b removeWaveTable: 
\b0 first. \

\fc0\cf0 \

\pard\tx7140\b\li2100\fc1\cf1 copyFromZone:(NXZone *)zone \

\pard\tx3120\tx3620\tx4120\b0\fi-1020\li3620\fc1\cf1  ± 
\b copyFromZone:
\b0\fc0\cf0 (
\fi0\li2620 NXZone *)
\i zone
\i0\fi-1020\li3620  
\fi0\li2620 \
\
Copy timbre from specified zone.  The new timbre is anonymous, i.e. it's name is NULL. \
\

\pard\tx7140\b\li2100\fc1\cf1 empty\

\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 ±€empty
\b0 \
\
Empties the 
\i waveTables
\i0  List and 
\i freqs
\i0  Storage. \
\

\pard\tx7140\b\li2100\fc1\cf1 finishUnarchiving\

\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 ±€finishUnarchiving\

\b0 \
If name is already in use, frees newly unarchived object and returns existing Timbre for that name.   \
\

\pard\tx7140\b\li2100\fc1\cf1 freqAt:\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€(double)
\b freqAt:
\b0 (int)
\i index
\i0 \
\
Returns the freq corresponding to the specified index, if any.  Otherwise, returns MK_NODVAL. Index is zero-based. \
\

\pard\tx7140\b\li2100\fc1\cf1 freqForWaveTable:\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€(double)
\b freqForWaveTable:
\b0 (WaveTable *)
\i obj
\i0 \
\
Returns the freq corresponding to the specified freq, if any.  Returns MK_NODVAL if none.  \
\

\pard\tx7140\b\li2100\fc1\cf1 free\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±
\b €free
\b0 \
\
Frees receiver and removes it from Data Base.  Frees all WaveTables. \
\

\pard\tx7140\b\li2100\fc1\cf1 freeSelfOnly\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±
\b €freeSelfOnly
\b0 \
\
Frees receiver and removes it from Data Base.   Does not free the WaveTables. \
\

\pard\tx7140\b\li2100\fc1\cf1 freqs\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€(Storage *)
\b freqs
\b0   \
\
Returns 
\i freqs
\b .   
\b0 freqs
\i0  Storage is not copied. \
\

\pard\tx7140\b\li2100\fc1\cf1 init \

\pard\b0\fi-1020\li3620\fc1\cf1 ± 
\b init
\f2\b0 \

\pard\tx3120\tx3620\tx4120\f0\li2620\fc0\cf0 \
Initialize timbre to be a new anonymous timbre. \
\

\pard\tx7140\b\li2100\fc1\cf1 read:\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€
\b read:
\b0 (NXTypedStream *)
\i s
\i0 \
  \
Reads object from archive file.   You never invoke this method directly.\
\

\pard\tx7140\b\li2100\fc1\cf1 removeWaveTable:\

\pard\tx3120\tx3620\tx4120\b0\fi-1020\li3620\fc1\cf1 ±  
\b removeWaveTable
\b0 (
\fi0\li2620\fc0\cf0 WaveTable *)
\i\fi-1020\li3620 obj
\i0\fi0\li2620 \
\
Removes the given WaveTable and its corresponding frequency.   Returns 
\b nil
\b0  if the 
\i obj
\i0  is not found, otherwise self. \
\

\pard\tx7140\b\li2100\fc1\cf1 setTimbreName:(char *)newName\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ± 
\b setTimbreName:
\b0 (char *)
\i newName
\i0 \
\
Returns 
\b self
\b0  if successful or 
\b nil
\b0  if 
\i newName
\i0  is already in use. \
\

\pard\tx7140\b\li2100\fc1\cf1 timbreName\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€(char *)
\b timbreName
\b0   \
\
Returns 
\i timbreName
\b .  
\b0\i0 The string is not copied and should not be altered or freed.\

\pard\tx7140\b\li2100\fc1\cf1 \
timbres \

\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 +
\b0  (HashTable *)
\b timbres
\b0  \
\
Returns the timbre data base, a HashTable mapping names to Timbres.   The table is not copied.  You should not free it or alter it.  To delete a Timbre, first find the Timbre and then send it the 
\b free 
\b0 or 
\b freeSelfOnly
\b0  message.\
\

\pard\tx7140\b\li2100\fc1\cf1 waveTables \

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€(List *)
\b waveTables
\b0  \
\
Returns 
\i waveTables 
\i0 object.  The List is not copied and should not be altered.\

\pard\tx7140\b\li2100\fc1\cf1 \
waveTableAt:(int)index\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€
\b waveTableAt:
\b0 (int)
\i index
\i0 \
\
Returns the WaveTable object corresponding to the specified index, if any.  Index is zero-based.  \
\

\pard\tx7140\b\li2100\fc1\cf1 waveTableForFreq: \

\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 ±€waveTableForFreq:
\b0 (double)
\i freq
\i0  \
\
Returns the WaveTable object corresponding to the specified freq, if any. \
\

\pard\tx7140\b\li2100\fc1\cf1 write:\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc0\cf0 ±€
\b write:
\b0 (NXTypedStream *)
\i s
\i0 \
\
Writes object to archive file.  You never invoke this method directly.\
\

}
