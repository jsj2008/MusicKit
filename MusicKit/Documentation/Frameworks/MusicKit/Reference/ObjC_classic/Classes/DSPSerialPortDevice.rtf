{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fmodern Courier;}
\paperw16220
\paperh12580
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\pard\tx3120\tx3620\tx4120\f0\b0\i0\ulnone\fs24\fc0\cf0 Release 4.0  Revisions Copyright 
\f1 „
\f0 1993 by CCRMA, Stanford University.  All Rights Reserved.\

\pard\b\fs16\li1100\fc0\cf0 \
\

\fs36 DSPSerialPortDevice\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	Object\

\fs16 \

\fs28 DECLARED IN	DSPSerialPortDevice.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 The DSPSerialPortDevice class corresponds to a device that plugs into the DSP serial port.   Instantiating an instance of the DSPSerialPortDevice class itself provides you with a serial port protocol that is used by many devices such as the Ariel Digital Microphone and the Metaresearch Digital Ears.  For other devices that don't follow that protocol, or for access to "customization" commands, you may instantiate an instance of a subclass of DSPSerialPortDevice.  The Music Kit provides a number of such subclasses:\

\fs16 \

\pard\tx6140\tx9160\tx11180\fs28\li3120\fc0\cf0 SSAD64x	Singular Solutions AD64x ADC & DAT interface.\
StealthDAI2400	Stealth DAI2400 DAT interface.\
ArielProPort	Ariel ProPort interface.\

\fc1\cf1 \

\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 These class descriptions appear at the end of this document.  The file DSPSerialPortDevice.h contains the interface declarations for these classes.  It also contains defines for "classes" that are fully represented by the DSPSerialPortDevice class itself:\
\

\pard\tx6140\tx9160\tx11180\li3120\fc1\cf1 ArielDigitalMic 	Ariel Digital Microphone \
MRDigitalEars	Metaresearch Digital Ears \

\pard\tx7140\li2100\fc0\cf0 \

\pard\tx3120\tx3620\tx4120\li2620\fc0\cf0 To use a DSPSerialPortDevice or subclass instance, you simply send the orchestra instance the message 
\b setSerialPortDevice:
\b0\i  
\i0 with an argument of your DSPSerialPortDevice instance.    In order to access the device for sound output, you must also send to the orchestra the message 
\b setSerialSoundOut:YES
\b0 .   Similarly, to access the device for sound input, you must send the orchestra 
\b setSerialSoundIn:YES
\b0 .   To find out if you can use a particular sampling rates, you send the message 
\b supportsSamplingRate:
\b0  to the DSPSerialPortDevice or subclass instance.  To find the default sampling rate, send it the message 
\b defaultSamplingRate
\b0 .\

\fs16 \

\fs28 To implement a new DSPSerialPortDevice subclass for a new device, you override a number of methods.  The most important is 
\b setUpSerialPort:
\b0 .   Other methods you might want to override include 
\b hardwareSupportedSamplingRates:
\b0 , 
\b inputSampleSkip 
\b0 and 
\b outputSampleSkip
\b0 . 
\b \

\b0\fs16\fc1\cf1 \
\

\fs28\fc0\cf0 The DSPSerailPortDevice class also supports "half sampling rates".   For example, if the hardware supports 44100, 48000 and 32000, then the Music Kit software will also allow the device to be used at 22050, 42000 and 16000.   These half sampling rates are entirely automatic–the designer of a subclass need not think about this at all.   He need only implement 
\b hardwareSupportedSamplingRates:
\b0 .  \
\
If you have several Orchestra instances (for example, if you have a cube with an Ariel QuintProcessor) and each has its own serial port, each can have its own instance of DSPSerialPortDevice or one of its subclasses.\
\

\pard\tx7140\fs16\li2100\fc0\cf0 \

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Objec
\i0 t	Class	isa;\

\fs16 \

\i\fs28 Declared in DSPSerialPortDevice
\i0 	BOOL	sendsSettings\
\

\pard\tx7140\li2100\fc0\cf0 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Sampling rates supported	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 defaultSamplingRate
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0  \

\f1 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 hardwareSupportsSamplingRate
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 :\

\f1 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 hardwareSupport
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 ed
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 SamplingRate
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 s:\

\f1 - 
\f0 s
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 upportsSamplingRate
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 : \

\f1 - 
\f0 s
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 upports
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 Half
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 SamplingRate
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 : 
\f1 \

\pard\tx7140\tx10180\tx10680\f0\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Sample skips	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 inputSampleSkip
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc1\cf1 	
\f1\fc0\cf0 - 
\f0\fc1\cf1 inputInitialSampleSkip\
	
\f1\fc0\cf0 - 
\f0 inputPadding\

\f1 	- 
\f0 outputPadding\

\f1 	- 
\f0\fc1\cf1 outputSampleSkip\
	
\f1\fc0\cf0 - 
\f0\fc1\cf1 outputInitialSampleSkip\

\fs16 \

\fs28\fc0\cf0 Channels	
\f1 - 
\f0\fc1\cf1 inputChannelCount
\fc0\cf0 \

\f1 	- 
\f0\fc1\cf1 outputChannelCount
\fc0\cf0 \

\fs16\fc1\cf1 \

\fs28\fc0\cf0 Sending commands to DSP	
\fc1\cf1 ± a
\fc0\cf0 djustMonitor:forOrchestra:\

\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 ± setUpSerialPort:\
± unMuteSerialPort:\
± closeDownSerialPort:\
± setSendsSettings:\
± sendsSettings\

\pard\tx7140\li2100\fc1\cf1 	± setUpAfterStartingSoundOut;\

\fs16\fc0\cf0 \
\
\

\fs28 INSTANCE METHODS\

\fs16 \

\pard\tx7140\b\fs28\li2100\fc0\cf0 adjustMonitor:forOrchestra:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b adjustMonitor:
\b0 (DSPLoadSpec *)system 
\b forOrchestra:
\b0 (Orchestra *)orchestra
\b \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Implement this to make any adjustments to the DSP monitor before it is loaded.  If you implement this method, you must first call DSPSetSystem(system); in the implementation.  Normally, it's better if you can make your adjustments in setUpSerialPort:.\

\pard\tx7140\li2100\fc0\cf0 \

\b defaultSamplingRate\

\pard\b0\fi-1020\li3620\fc0\cf0 ± (double)
\b defaultSamplingRate\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This method returns a default sampling rate for this device.   For Music Kit synthesis, this should be the lowest sampling rate (within reason) so that naive users have the least trouble with running out of DSP resources.  Half of a hardware-supported sampling rate may be returned.   Default version returns 22050.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 hardwareSupportsSamplingRate:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± (BOOL)
\b\fc1\cf1 hardwareSupportsSamplingRate:
\b0 (double
\fc0\cf0 )
\i rate
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This returns YES if rate is a sampling rate actually supported by the device.   Does not return YES for half sampling rates.  A subclass should not override this method.   \
\

\pard\tx7140\b\li2100\fc1\cf1 hardwareSupportedSamplingRates:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± (int)
\b\fc1\cf1 hardwareSupportedSamplingRates:
\b0 (double **
\fc0\cf0 )
\i rates
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This method mallocs and returns in 
\i *rates 
\i0 an array of sampling rates supported by the hardware.  In addition, it returns the length of the array.  A subclass may override this method.   \
\

\pard\tx7140\b\li2100\fc1\cf1 inputChannelCount\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 inputChannelCount
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns number of input sound channels.   Default version returns 2 for stereo.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 inputPadding\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\pard\tx7140\b\li2100\fc1\cf1 input
\pard\fi-1020\li3620\fc1\cf1 Padding
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns number of extra samples to append to each input sample frame.  Default implementation returns 0.  Subclasses may override this method.\

\pard\tx7140\b\li2100\fc1\cf1 \
inputSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 inputSampleSkip
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns samples skipped for sound input (i.e. sound entering the DSP via the serial port.)  Default is no skipping and this method returns 0.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 inputInitialSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 inputInitialSampleSkip
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns samples initially skipped for input.   For example, if inputSampleSkip is 1 and the samples arrive in the DSP as 0,<sample>,0,<sample>, then inputInitialSampleSkip should return 1.  On the other hand, if inputSampleSkip is 1 and the samples arrive in the DSP as <sample>,0,<sample>,0, then inputInitialSampleSkip should be 0.  Default is no initial skipping and this method returns 0.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 outputChannelCount\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 outputChannelCount
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns number of output sound channels.   Default version returns 2 for stereo.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 outputSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 outputSampleSkip
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns samples skipped for sound output (i.e. sound exiting the DSP via the serial port.)  Default is no skipping and this method returns 0.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 outputInitialSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 outputInitialSampleSkip
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns samples initially skipped for output.   For example, if outputSampleSkip is 1 and the samples are sent out the DSP as 0,<sample>,0,<sample>, then outputInitialSampleSkip should return 1.  On the other hand, if outputSampleSkip is 1 and the samples are sent out the DSP as <sample>,0,<sample>,0, then outputInitialSampleSkip should be 0.  Default is no initial skipping and this method returns 0.  A subclass may override this method.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 outputPadding\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 outputPadding
\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns number of extra samples to append to each output sample frame.  Default implementation returns 0.  Subclasses may override this method.  Currently, only padding of 2 or 0 are supported.\

\pard\tx7140\b\li2100\fc1\cf1 \

\fc0\cf0 sendsSettings\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b sendsSettings\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns value of sendsSettings instance variable.   \

\pard\tx7140\b\li2100\fc0\cf0 \
 setUpAfterStartingSoundOut\

\b0 ± 
\b (BOOL)setUpAfterStartingSoundOut\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This is invoked by Orchestra open to determine whether to send 
\b setUpSerialPort:
\b0  before or after calling 
\b DSPMKStartSoundOut()
\b0 .  The default implementation returns YES.  Subclasses may override this method.\
\

\pard\tx7140\b\li2100\fc0\cf0 setUpSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b setUpSerialPort
\b0 :
\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This is invoked by Orchestra open to set up the serial port.   A subclass may override this method to provide appropriate values.  The default version of this method uses these settings: scr = 0x302, sccr = 0x18, cra = 0x4100 and crb = 0xa00.   If sendsSettings is NO, does not set scr or sccr.  See the DSP56001 manual for details.  A subclass may also override this method and invoke the orchestra method 
\b sendSCIByte:
\b0  to send a command to the device hardware.   \
\

\pard\tx7140\b\li2100\fc0\cf0 setSendsSettings:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b setSendsSettings
\b0 :(BOOL)
\i yesOrNo
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Set whether settings, such as the sampling rate are sent by the object (via the SCI port) to the device.  It is up to the subclass implementation of setUpSerialPort: to support this flag.   The default value is YES.\
\

\pard\tx7140\b\li2100\fc0\cf0 supportsSamplingRate:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± (BOOL)
\b supportsSamplingRate:
\b0 (double)
\i rate
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This method returns YES if the device supports the specified sampling rate or if that sampling rate is obtainable as half of one of the sampling rates the device supports.  This method is implemented as \

\f2\fs24 	\
	return ([self hardwareSupportsSamplingRate:rate] || \
		 	 [self hardwareSupportsSamplingRate:rate*2])\

\f0\fs28  \
Subclass should not override this method, but should implement 
\b hardwareSupportedSamplingRates: 
\b0 instead.\

\pard\tx7140\li2100\fc0\cf0 \

\b supportsHalfSamplingRate:\

\pard\b0\fi-1020\li3620\fc0\cf0 ±(BOOL) 
\b supportsHalfSamplingRate:
\b0 (double)
\i rate
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This returns YES if rate is available only as half of one of the sampling rates supported by the hardware.  Implemented as\

\f2\fs24     \
	return ([self supportsSamplingRate:rate] &&  ![self hardwareSupportsSamplingRate:rate]);\

\f0\fs28 \
Subclass should not override this method, but should implement 
\b hardwareSupportedSamplingRates:
\b0  instead.\

\pard\tx7140\li2100\fc0\cf0 \
\

\b  unMuteSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b unMuteSerialPort
\b0 :
\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This is invoked by Orchestra open to unmute the serial port device.   A subclass may override this method to provide appropriate behaviour, when it is inclined to produce unwanted noise after setting up the serial port, before the DSP produces output.  The default version of this method does nothing. \

\pard\tx7140\li2100\fc0\cf0 \

\b closeDownSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b closeDownSerialPort:
\b0\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Subclass may override this method to do any special muting or other things needed for clean shut-down.   
\pard\tx7140\li2100\fc0\cf0 \
\

\pard\b\fs36\li1100\fc0\cf0 SSAD64x\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	DSPSerialPortDevice\

\fs16 \

\fs28 DECLARED IN	DSPSerialPortDevice.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 The SSAD64x class is a DSPSerialPortDevice subclass that corresponds to the Singular Solutions AD64x ADC & DAT interface. \

\pard\tx7140\fs16\li2100\fc0\cf0 \

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Objec
\i0 t	Class	isa;\

\fs16 \

\i\fs28 Declared in SSAD64x
\i0 	BOOL	professional\
\

\pard\tx7140\li2100\fc0\cf0 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Sampling rates supported	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 hardwareSupportedSamplingRates
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 :\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Sample frame adjustments	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 inputSampleSkip
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 \

\f1 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 input
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 Initial
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 SampleSkip
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 \

\f1 - 
\f0 outputSampleSkip\

\f1 - 
\f0 outputInitialSampleSkip\

\fs16\fc1\cf1 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Sending commands to DSP	
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 ± 
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc1\cf1 setUp
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 SerialPort:\
± unMuteSerialPort:\
± closeDownSerialPort:\

\pard\tx7140\fs16\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Settings	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 setProfessional:
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 \

\pard\tx7140\fs16\li2100\fc0\cf0 \
\

\fs28 INSTANCE METHODS\

\fs16 \

\b \

\b0\fs28 \

\b setUpSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b setUpSerialPort
\b0 :
\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This is invoked by Orchestra open to set up the serial port.   Sends the appropriate values for the AD64x.   If sendsSettings is YES, it sets the device to the proper sampling rate and professional/consumer mode setting.\
\

\pard\tx7140\b\li2100\fc0\cf0 hardwareSupportedSamplingRates:
\fc1\cf1 \

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b hardwareSupportedSamplingRates:
\b0 (double **)
\i rates
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns 3 and sets *
\i rates 
\i0 to a malloc'ed array containing 48000, 44100, and 32000. \

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 inputSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\pard\tx7140\b\li2100\fc1\cf1 inputSampleSkip
\pard\fi-1020\li3620\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns skip for sound input (i.e. sound entering the DSP via the serial port.)  Since the AD64x requires a zero before each sample, this method returns 1.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 inputInitialSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\pard\tx7140\b\li2100\fc1\cf1 input
\pard\fi-1020\li3620\fc1\cf1 InitialS
\pard\tx7140\li2100\fc1\cf1 ampleSkip
\pard\fi-1020\li3620\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns initial skip for sound input (i.e. sound entering the DSP via the serial port.)  Since the AD64x requires a zero 
\i before
\i0  each sample, this method returns 1.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 outputSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\pard\tx10180\tx10680\b\fi-520\li7660\fc1\cf1 outputSampleSkip
\pard\fi-1020\li3620\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns skip for sound output (i.e. sound exiting the DSP via the serial port.)  Since the AD64x requires a zero before each sample, this method returns 1.\

\pard\tx7140\li2100\fc0\cf0 \

\b\fc1\cf1 outputInitialSampleSkip\

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b\fc1\cf1 outp
\pard\tx7140\li2100\fc1\cf1 ut
\pard\fi-1020\li3620\fc1\cf1 InitialS
\pard\tx7140\li2100\fc1\cf1 ampleSkip
\pard\fi-1020\li3620\fc0\cf0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns initial skip for sound output (i.e. sound exiting the DSP via the serial port.)  Since the AD64x requires a zero 
\i before
\i0  each sample, this method returns 1.\

\pard\tx7140\li2100\fc0\cf0 \

\b setProfessional:
\fc1\cf1 \

\pard\b0\fi-1020\li3620\fc0\cf0 	± 
\b setProfessional:
\b0 (BOOL)
\i isPro
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Sets the 
\i professional
\i0  instance variable to 
\i isPro.   
\i0 Then, when 
\b setUpSerialPort: 
\b0 is invoked, the AD64x will be set to professional (AES/EBU) or consumer (SPDIF) mode, according to the value of 
\i professional.
\i0 \

\pard\tx7140\li2100\fc0\cf0 \

\b unMuteSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b unMuteSerialPort:
\b0\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Unmutes device.   
\pard\tx7140\li2100\fc0\cf0 \
\

\b closeDownSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 
\b closeDownSerialPort:
\b0\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Mutes device to prevent buzzing.   
\pard\tx7140\li2100\fc0\cf0 \
\

\pard\b\fs36\li1100\fc0\cf0 StealthDAI2400\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	DSPSerialPortDevice\

\fs16 \

\fs28 DECLARED IN	DSPSerialPortDevice.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 The StealthDAI2400 class is a DSPSerialPortDevice subclass that corresponds to the Stealth DAI2400 DAT interface. \

\pard\tx7140\fs16\li2100\fc0\cf0 \

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Objec
\i0 t	Class	isa;\

\fs16 \

\i\fs28 Declared in StealthDAI2400
\i0 	BOOL	copyProhibit\
	BOOL	emphasis\
\

\pard\tx7140\li2100\fc0\cf0 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Sampling rates supported	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 hardwareSupportedSamplingRates
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 :\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Sending commands to DSP	
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 ± 
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc1\cf1 setUp
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 SerialPort
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc1\cf1 :
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 \

\pard\tx7140\fs16\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Settings	
\f1 - 
\f0 setEmphasis:\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 set
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 CopyProhibit
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 :
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 \

\pard\tx7140\fs16\li2100\fc0\cf0 \
\

\fs28 INSTANCE METHODS\

\fs16 \

\b \

\b0\fs28 \

\b setUpSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 	
\b setUpSerialPortSetup
\b0 :
\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This is invoked by Orchestra open to set up the serial port.   Sends the appropriate values for the StealthDAI2400.  If sendsSettings is YES, it also sets the device to the proper sampling rate and settings of copyProhibit and emphasis.\
\

\pard\tx7140\b\li2100\fc0\cf0 hardwareSupportedSamplingRates:
\fc1\cf1 \

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b hardwareSupportedSamplingRates:
\b0 (double **)
\i rates
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns 3 and sets *
\i rates 
\i0 to a malloc'ed array containing  48000, 44100, 32000. \

\pard\tx7140\li2100\fc0\cf0 \

\b setCopyProhibit:
\fc1\cf1 \

\pard\b0\fi-1020\li3620\fc0\cf0 	±
\b setCopyProhibit:
\b0 (BOOL)
\i setCopyProhibit
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Sets the 
\i copyProhibit
\i0  instance variable to 
\i\fc0\cf0 setCopyProhibit
\fc1\cf1 .   
\i0 Then, when 
\b applySettings: 
\b0 is invoked, the StealthDAI2400 will be told to set or clear the copy prohibit flag.\

\pard\tx7140\li2100\fc0\cf0 \

\b setEmphasis:
\fc1\cf1 \

\pard\b0\fi-1020\li3620\fc0\cf0 	±
\b setEmphasis:
\b0 (BOOL)
\i useEmphasis
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Sets the 
\i empahsis
\i0  instance variable to 
\i useEmphasis.   
\i0 Then, when 
\b applySettings: 
\b0 is invoked, the StealthDAI2400 will be set to whether or not to use emphasis.\

\pard\tx7140\li2100\fc0\cf0 \
\

\pard\b\fs36\li1100\fc0\cf0 ArielProPort\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	DSPSerialPortDevice\

\fs16 \

\fs28 DECLARED IN	DSPSerialPortDevice.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 The ArielProPort class is a DSPSerialPortDevice subclass that corresponds to the Ariel ProPort ADC/DAC interface. \

\pard\tx7140\fs16\li2100\fc0\cf0 \

\fs28 INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Objec
\i0 t	Class	isa;\

\fs16 \

\i\fs28 Declared in ArielProPort
\i0 	(none)\
\

\pard\tx7140\li2100\fc0\cf0 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Sampling rates supported	
\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\pard\tx7140\tx10180\tx10680\f0\fi-4540\li7140\fc0\cf0 hardwareSupportedSamplingRates
\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 :\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Sending commands to DSP	
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 ± 
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc1\cf1 setUp
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 SerialPort
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc1\cf1 :
\pard\tx10180\tx10680\fi-520\li7660\fc1\cf1 \

\pard\tx7140\fs16\li2100\fc0\cf0 \
\

\fs28 INSTANCE METHODS\

\fs16 \

\b \

\fs28 setUpSerialPort:\

\pard\b0\fi-1020\li3620\fc0\cf0 ± 	
\b setUpSerialPortSetup
\b0 :
\i orchestra
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 This is invoked by Orchestra open to set up the serial port.   Sends the appropriate values for the Ariel ProPort.  If sendsSettings is YES, it also sets the device to the proper sampling rate.   Your ProPort should be set to "Auto1" mode in order for these settings to have an effect.\
\

\pard\tx7140\b\li2100\fc0\cf0 hardwareSupportedSamplingRates:
\fc1\cf1 \

\pard\b0\fi-1020\li3620\fc0\cf0 	±(int)
\b hardwareSupportedSamplingRates:
\b0 (double)
\i rates
\b\i0 \

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc1\cf1 Returns 7 and sets *
\i rates 
\i0 to a malloc'ed array containing  96000, 48000, 44100, 32000, 16000, 11025 or 8000.  Note that 96000 is supported by the ProPort for input only.\

\pard\tx7140\li2100\fc0\cf0 \
\

\pard\tx3120\tx3620\tx4120\fs16\li2620\fc0\cf0 \

}
