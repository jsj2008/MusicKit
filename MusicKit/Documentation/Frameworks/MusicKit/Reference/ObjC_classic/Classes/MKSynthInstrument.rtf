{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fmodern Courier;\f4\fmodern Ohlfs;}
\paperw16220
\paperh13540
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 2.0  Copyright 
\f1 ã
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.\
\

\pard\tx3120\tx3620\tx4120\fs16\li2620\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\b\li1100\fc0\cf0 \
\
\
\

\fs36 SynthInstrument\

\fs16 \

\pard\tx7140\b0\fs28\li2100\fc0\cf0 INHERITS FROM	Instrument : Object\

\fs16 \

\fs28 DECLARED IN	musickit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 A SynthInstrument realizes Notes by synthesizing them on the DSP.  It does this by forwarding each Note it receives to a SynthPatch object, which translates the parameter information in the Note into DSP instructions.  A SynthInstrument can manage any number of SynthPatch objects (limited by the speed and size of the DSP).  However, all of its SynthPatches are instances of the same SynthPatch subclass.  You assign a particular SynthPatch subclass to a SynthInstrument through the latter's 
\b setSynthPatchClass:
\b0  method.  A SynthInstrument can change its SynthPatch at any time, even during a performance.\

\fs16 \

\fs28 Each SynthPatch managed by the SynthInstrument corresponds to a particular noteTag.  As the SynthInstrument receives Notes, it compares the Note's noteTag to the noteTags of the SynthPatches that it's managing.  If a SynthPatch already exists for the noteTag, the Note is forwarded to that object; otherwise, the SynthInstrument either asks the Orchestra to allocate another SynthPatch, or it preempts an allocated SynthPatch to accommodate the Note.  Which action it takes depends on the SynthInstrument's allocation mode and the available DSP resources.\

\fs16 \

\fs28 A SynthInstrument can either be in automatic allocation mode (MK_AUTOALLOC) or manual mode (MK_MANUALALLOC).  In automatic mode, SynthPatches are allocated directly from the Orchestra as Notes are received by the SynthInstrument and released when it's no longer needed.  Automatic allocation is the default.\

\fs16 \

\fs28 In manual mode, the SynthInstrument pre-allocates a fixed number of SynthPatch objects through the 
\b setSynthPatchCount:
\b0  method.  If it receives more simultaneously sounding Notes than it has SynthPatches, the SynthInstrument preempt its oldest running SynthPatch (by sending it the 
\b preemptFor:
\b0  message).\
\
The SynthInstrument has a "noteUpdate state", a Note object containing the most recent parameter values that the SynthInstrument has received from  noteUpdates without noteTags.  For example, the current value of MIDI pitch bend would be stored there.  Additionally, the SynthInstrument has a "controllerTable."   This is used to map MIDI controller numbers to the most recent controller values that the SynthInstrument has received from noteUpdates without noteTags.   This information cannot be stored in the noteUpdate state because the noteUpdate state has room for only one controller/value pair.\

\fs16 \

\pard\tx7140\li2100\fc0\cf0 \

\pard\tx3120\tx3620\tx4120\fs28\li2620\fc0\cf0 By default, the update state is cleared after each performance.  However, you can request that it be retained with the 
\b setRetainUpdates:
\b0  method.     You can examine the updates and controllerTable with the method 
\b getUpdates:controllerValues:
\b0 .   \

\pard\tx7140\fs16\li2100\fc0\cf0 \

\fs28 \
INSTANCE VARIABLES\

\fs16 \

\pard\tx7140\tx10180\tx10680\i\fs28\fi-4540\li7140\fc0\cf0 Inherited from Object
\i0 	Class	isa;\

\fs16 \

\i\fs28 Inherited from Instrument
\i0 	id	noteReceivers;\

\fs16 \

\i\fs28 Declared in SynthInstrument
\i0 	id	synthPatchClass;\

\pard\tx10180\tx10680\fi-520\li7660\fc0\cf0 unsigned short	allocMode;\
id	taggedPatches;\

\fc1\cf1 id 	controllerTable\
id 	updates\
BOOL 	retainUpdates\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 synthPatchClass 	Class used to create SynthPatch instances.\

\fs16 \

\fs28 allocMode 	The object's allocation mode; either MK_MANUALALLOC or MK_AUTOALLOC.\

\fs16 \

\fs28 taggedPatches 	A HashTable of the objects SynthPatches.\
\
controllerTable 	HashTable mapping MIDI controllers to values.\
\
updates 	Note for storing common (no noteTag) updates.\

\pard\tx7140\fs16\li2100\fc0\cf0 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 retainUpdates 	NO if updates and controllerTable are cleared after\
                           	each performance.
\pard\tx7140\fs16\li2100\fc0\cf0 \
\

\fs28 METHOD TYPES\

\fs16 \

\pard\tx7140\tx10180\tx10680\fs28\fi-4540\li7140\fc0\cf0 Creating and freeing a SynthInstrument\

\f1\fi0 - 
\f0 copy\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 free\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Modifying the object	
\f1 - 
\f0 autoAlloc\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 init\

\f1 - 
\f0 clearUpdates \

\f1 - 
\f0 mute: \

\f1 - 
\f0 setRetainUpdates:\

\f1 - 
\f0 setSynthPatchClass:\
\

\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 Querying the object	
\f1 - 
\f0 activeSynthPatches: \

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 allocMode\

\f1 - 
\f0\fc1\cf1 doesRetainUpdates\

\f1\fc0\cf0 - 
\f0\fc1\cf1 getUpdates:controllerValues:\

\f1\fc0\cf0 - 
\f0 synthPatchClass\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Allocating SynthPatch objects	
\f1 - 
\f0 preemptSynthPatchFor:patches: \

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 setSynthPatchCount: \

\f1 - 
\f0 setSynthPatchCount:patchTemplate:\

\f1 - 
\f0 synthPatchCount\

\f1 - 
\f0 synthPatchCountForPatchTemplate:\

\pard\tx7140\tx10180\tx10680\fs16\fi-4540\li7140\fc0\cf0 \

\fs28 Performing the object	
\f1 - 
\f0 realizeNote:fromNoteReceiver:\

\pard\tx10180\tx10680\f1\fi-520\li7660\fc0\cf0 - 
\f0 abort \

\pard\tx7140\tx10180\tx10680\f1\fi-4540\li7140\fc0\cf0 	- 
\f0 allNotesOff\

\f1 	
\pard\tx7140\f0\fs16\li2100\fc0\cf0 \
\
\

\fs28 INSTANCE METHODS\

\fs16 \

\b \

\fs28 abort\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b abort\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Sends the 
\b noteEnd
\b0  message to all running (or finishing) SynthPatches managed by the receiver.  You should only invoke this method when all other attempts to halt synthesis fails.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 activeSynthPatches:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b activeSynthPatches:
\b0\i aTemplate\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Returns the first in the sequence of SynthPatches with PatchTemplate 
\i aTemplate
\i0  that are currently sounding.  The sequence is ordered by the begin times of the SynthPatches' current phrases, from the earliest to the latest.  You step down the sequence by sending 
\b next
\b0  to the objects returned by this method.  If 
\i aTemplate
\i0  is 
\b nil
\b0 , the default PatchTemplate is used.  If there aren't any active SynthPatches with the specified template, 
\b nil 
\b0 is returned.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 allNotesOff\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b allNotesOff\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Sends a
\b  noteOff:
\b0  message to all running SynthPatches managed by this SynthInstrument.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 allocMode\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0 (unsigned short)
\b allocMode\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the recevier's allocation mode, one of MK_AUTOALLOC or MK_MANUALALLOC.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 autoAlloc\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b autoAlloc\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Sets the receiver's allocation mode to MK_AUTOALLOC and releases any manually allocated SynthPatch objects.   Returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 clearUpdates\

\f1\b0\fi-1020\li3620 - 
\f0\b clearUpdates\

\fi0\li2100 \

\pard\tx3120\tx3620\tx4120\b0\li2620\fc1\cf1 Causes the SynthInstrument to clear any noteUpdate state it has accumulated as a result of receiving noteUpdates without noteTags.  The effect is not felt by the SynthPatches until the next phrase. Also clears controller info.\

\pard\tx7140\b\li2100\fc0\cf0 \
copy\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b copy\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Creates and returns a new SynthInstrument as a copy of the receiver. The copy has the same (NoteReceiver) connections but has no SynthPatches allocated.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 doesRetainUpdates\

\f1\b0\fi-1020\li3620 - 
\f0 (BOOL)
\b doesRetainUpdates\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc1\cf1 \
Returns whether the noteUpdate and controller state is retained from performance to performance. \
\

\pard\tx7140\b\li2100\fc0\cf0 free\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b free\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 If the receiver isn't in performance, this frees the receiver (returns 
\b nil
\b0 ).  Otherwise does nothing and returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 getUpdates:controllerValues:\

\pard\f1\b0\fi-1020\li3620\fc1\cf1 - 
\f0\b getUpdates:
\b0 (Note **)
\i aNoteUpdate
\i0  
\b controllerValues:
\b0 (HashTable **)
\i controllers
\f1\i0 \
\

\pard\tx3120\tx3620\tx4120\f0\li2620\fc1\cf1 Returns by reference the Note used to store the accumulated noteUpdate state.  Also returns by reference the HashTable used to store the state of the controllers. Any alterations to the returned objects will effect future phrases.  The returned objects should be used only immediately after they are returned, as they may later be freed by the SynthInstrument.  \
\

\pard\tx7140\b\li2100\fc0\cf0 init\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b init\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Initializes the receiver.  You invoke this method when you careate a new instance SynthInstrument  An overriding subclass method should send 
\b [super init]
\b0  before setting its own defaults.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 mute:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b mute:
\b0\i aMute\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 You never invoke this method; it's invoked automatically when the receiver receives a mute Note.  Mutes aren't normally forwarded to SynthPatches since they usually don't produce sound.  The default implementation does nothing.  A subclass can implement this method to examine 
\i aMute
\i0  and act accordingly.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 preemptSynthPatchFor:patches:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b preemptSynthPatchFor:
\b0\i aNote 
\b\i0 patches:
\b0\i firstPatch\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 You never invoke this method.  It's invoked automatically when the receiver is in manual mode and all SynthPatches are in use, or when it's in auto mode and the DSP resources needed to build another SynthPatch aren't available.  The return value is taken as the SynthPatch to preempt in order to accommodate the latest request.  
\i firstPatch
\i0  is the first in a sequence of ordered active SynthPatches, as returned by the 
\b activeSynthPatches:
\b0  method.  The default implementation simply returns 
\i firstPatch
\i0 , the SynthPatch with the oldest phrase.  A subclass can reimplement this method to provide a different scheme for determining which SynthPatch to preempt.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 realizeNote:fromNoteReceiver:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b realizeNote:
\b0\i aNote 
\b\i0 fromNoteReceiver:
\b0\i aNoteReceiver\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Synthesizes 
\i aNote
\i0 .\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 setRetainUpdates:\

\f1\b0\fi-1020\li3620 - 
\f0\b\fi0\li2100 setRetainUpdates:
\b0 (BOOL)
\i yesOrNo
\b\i0\fi-1020\li3620  
\fi0\li2100 \
\

\pard\tx3120\tx3620\tx4120\b0\li2620\fc1\cf1 Controls whether the noteUpdate and controller state is retained from performance to performance. Default is NO.\

\pard\tx7140\b\li2100\fc0\cf0 \
setSynthPatchClass:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b setSynthPatchClass:
\b0\i aSynthPatchClass\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Sets the receiver's SynthPatch class to 
\i aSynthPatchClass
\i0 .  Returns 
\b nil
\b0  if the argument isn't a subclass of SynthPatch.  Otherwise returns the receiver.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 setSynthPatchCount:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0 (int)
\b setSynthPatchCount:
\b0 (int)
\i voices\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Immediately allocates 
\i voices
\i0  SynthPatch objects.  Implemented as\

\fs16 \

\pard\f2\fs24\li3120\fc0\cf0 [self setSynthPatchCount:voices template:nil];\

\pard\tx3120\tx3620\tx4120\f0\fs16\li2620\fc0\cf0 \

\fs28 Returns the number of objects that were allocated.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 setSynthPatchCount:patchTemplate:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0 (int)
\b setSynthPatchCount:
\b0 (int)
\i voices 
\b\i0 patchTemplate:
\b0\i aTemplate\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Immediately allocates 
\i voices
\i0  SynthPatch objects using the patch template 
\i aTemplate
\i0  (the Orchestra must be open) and puts the receiver in manual mode.  If 
\i aTemplate
\i0  is 
\b nil
\b0 , the value returned by the message\

\fs16 \

\pard\f2\fs24\li3120\fc0\cf0 [synthPatchClass defaultPatchTemplate]\

\pard\tx3120\tx3620\tx4120\f0\fs16\li2620\fc0\cf0 \

\fs28 is used.  Returns the number of objects that were allocated (it may be less than the number requested).  \

\fs16 \

\fs28 If you decrease the number of manually allocated SynthPatches during a performance, the extra SynthPatches aren't deallocated until they become inactive.  In other words, reallocating downward won't interrupt notes that are already sounding.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 synthPatchClass\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0\b synthPatchClass\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the receiver's SynthPatch class.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 synthPatchCount\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0 (int)
\b synthPatchCount\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs28\li2620\fc0\cf0 Returns the number of allocated SynthPatch objects created with the default PatchTemplate.\

\fs16 \

\pard\tx7140\b\li2100\fc0\cf0 \

\fs28 synthPatchCountForPatchTemplate:\

\pard\f1\b0\fi-1020\li3620\fc0\cf0 - 
\f0 (int)
\b synthPatchCountForPatchTemplate:
\b0\i aTemplate\

\fs16 \

\pard\tx3120\tx3620\tx4120\i0\fs28\li2620\fc0\cf0 Returns the number of allocated SynthPatch objects created with the PatchTemplate 
\i aTemplate
\i0 .\

\fs16 \

\fs28 \

\fs16 \

}
