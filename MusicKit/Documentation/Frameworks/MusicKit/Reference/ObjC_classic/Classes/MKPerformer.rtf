{\rtf0\ansi{\fonttbl\f0\froman Times-Roman;\f1\ftech\fcharset2 Symbol;\f2\fmodern Courier;
}
{\colortbl;\red255\green255\blue255;}
\paperw16220\paperh13060
\pard

\f0\fs24 \cf0 Release 2.0  Copyright 
\f1 ã
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.
\fs16 \
\pard\tx3120\tx3620\tx4120\ql\qnatural

\fs24 \cf0 Release 4.0  Updates Copyright 
\f1 ã
\f0 1993 by CCRMA, Stanford University.  All Rights Reserved.\
\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\li1100\ql\qnatural

\b \cf0 \
\
\
\

\fs36 MKPerformer\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b0\fs28 \cf0 INHERITS FROM	NSObject\

\fs16 \

\fs28 DECLARED IN	MusicKit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 MKPerformer is an abstract class that defines a mechanism for performing MKNotes during a MusicKit performance.  Each subclass of MKPerformer implements the 
\b perform
\b0  method to define how it obtains and performs MKNotes.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 During a performance, a MKPerformer receives a series of 
\b perform
\b0  messages.  In its implementation of 
\b perform
\b0 , a MKPerformer subclass must set the 
\b nextPerform
\b0  variable.  
\b nextPerform
\b0  indicates the number of beats to wait before the next 
\b perform
\b0  message is sent.  The messages are sent by the MKPerformer's MKConductor.  Every MKPerformer is managed by a MKConductor; unless you set its MKConductor explicitly, through the 
\b setConductor:
\b0  method, a MKPerformer is managed by the the defaultConductor.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A MKPerformer contains a NSArray of MKNoteSenders, objects that send MKNotes (to MKNoteReceivers) during a performance.  MKPerformer subclasses should implement the 
\b init
\b0  method to create and add some number of MKNoteSenders to a newly created instance.  As part of its 
\b perform
\b0  method, a MKPerformer typically creates or otherwise obtains a MKNote (for example, by reading it from a MKPart or a scorefile) and sends it by invoking MKNoteSender's 
\b sendNote:
\b0  method.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 To use a MKPerformer in a performance, you must first send it the 
\b activate
\b0  message.  
\b activate
\b0  invokes the 
\b activateSelf
\b0  method and then schedules the first 
\b perform
\b0  message request with the MKConductor.  
\b activateSelf
\b0  can be overridden in a subclass to provide further initialization of the MKPerformer.  The performance begins when the MKConductor class receives the 
\b startPerformance
\b0  message.  It's legal to activate a Performer after the performance has started.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 Sending the 
\b deactivate
\b0  message removes the MKPerformer from the performance and invokes the 
\b deactivateSelf
\b0  method.  This method can be overridden to implement any necessary finalization, such as freeing contained objects.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 During a performance, a MKPerformer can be stopped and restarted by sending it the 
\b pause
\b0  and 
\b resume
\b0  messages, respectively.  
\b perform
\b0  messages destined for a paused MKPerformer are delayed until the object is resumed.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 You can shift a MKPerformer's performance timing by setting its 
\b timeShift
\b0  variable.  
\b timeShift
\b0 , measured in beats, is added to the initial setting of 
\b nextPerform
\b0 .  If the value of 
\b timeShift
\b0  is negative, the MKPerformer's MKNotes are sent earlier than otherwise expected; this is particularly useful for a MKPerformer that's performing MKNotes starting from the middle of a MKPart or MKScore.  A positive 
\b timeShift
\b0  delays the performance of a MKNote.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 You can also set a MKPerformer's maximum duration.  A MKPerformer is automatically deactivated if its performance extends beyond 
\b duration
\b0  beats.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A MKPerformer has a status, represented as one of the following 
\b MKPerformerStatus
\b0  values:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx5380\tx7140\tx9160\tx11180\li3120\ql\qnatural

\b\fs28 \cf0 Status	Meaning \
\pard\tx5380\tx5380\tx7140\tx7140\tx9160\tx9160\tx11180\tx11180\li3120\ql\qnatural

\b0 \cf0 MK_inactive	A deactivated or not-yet-activated Performer.\
MK_active	An activated, unpaused Performer. \
MK_paused	The Performer is activated but currently paused.\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 Some messages can only be sent to an inactive (MK_inactive) MKPerformer.  A MKPerformer's status can be queried with the 
\b status
\b0  message.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 If you subclass MKPerformer, some care is required to make sure that it synchronizes correctly to MIDI time code.  To make your own MKPerformer subclass synchronize, you need to support a simple informal protocol called 
\b Time Code Performer Protocol
\b0 , which is described at the end of this document.\
\
See also:  MKConductor, MKNoteSender\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\i\fs28 \cf0 Inherited from NSObject
\i0 	Class	isa;\

\fs16 \

\i\fs28 Declared in MKPerformer
\i0 	id	conductor;\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural
\cf0 MKPerformerStatus	status;\
int	performCount;\
double	timeShift;\
double	duration;\
double	time;\
double	nextPerform;\
id	noteSenders;\
id	delegate;\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 conductor 	The object's MKConductor.\

\fs16 \

\fs28 status 	The object's status.\

\fs16 \

\fs28 performCount 	Number of 
\b perform
\b0  messages the object has received.\

\fs16 \

\fs28 timeShift 	Timing offset.\

\fs16 \

\fs28 duration 	Maximum duration.\

\fs16 \

\fs28 time 	The object's notion of the current time.\

\fs16 \

\fs28 nextPerform 	The next time the object will send a Note.\

\fs16 \

\fs28 noteSenders 	The object's collection of MKNoteSenders.\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 delegate 	Object to receive various notification messages.\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\

\fs28 METHOD TYPES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 Creating and freeing a Performer	
\f1 - 
\f0 copy\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 free\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Modifying the object	
\f1 - 
\f0 addNoteSender:\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 freeNoteSenders\

\f1 - 
\f0 init\

\f1 - 
\f0 disconnectNoteSenders \

\f1 - 
\f0 removeNoteSender: \

\f1 - 
\f0 removeNoteSenders\

\f1 - 
\f0 setConductor: \

\f1 - 
\f0 setDelegate:\

\f1 - 
\f0 setDuration: \

\f1 - 
\f0 setTimeShift:\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Querying the object	
\f1 - 
\f0 conductor\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 delegate\

\f1 - 
\f0 duration\

\f1 - 
\f0 isNoteSenderPresent: \

\f1 - 
\f0 noteSender\

\f1 - 
\f0 noteSenders\

\f1 - 
\f0 performCount\

\f1 - 
\f0 status\

\f1 - 
\f0 time\

\f1 - 
\f0 timeShift\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Performing	
\f1 - 
\f0 activate\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 activateSelf\

\f1 - 
\f0 deactivate\

\f1 - 
\f0 deactivateSelf\

\f1 - 
\f0 pause\

\f1 - 
\f0 perform\

\f1 - 
\f0 resume\

\f1 - 
\f0 rescheduleAtTime:\

\f1 - 
\f0 rescheduleBy:\
\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\
\

\fs28 INSTANCE METHODS\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 activate\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b activate\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If the receiver isn't inactive, immediately returns the receiver; if its duration is less than or equal to 0.0, immediately returns 
\b nil
\b0 .  Otherwise prepares the receiver for a performance by setting 
\b nextPerform
\b0  to 0.0, 
\b performCount
\b0  to 0, invoking 
\b activateSelf
\b0 , scheduling the first 
\b perform
\b0  message request with the MKConductor, and setting the receiver's status to 
\b MK_active
\b0 .  If a subclass needs to alter the initial value of 
\b nextPerform
\b0 , it should do so in its implementation of the 
\b activateSelf
\b0  method.  Returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 activateSelf\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b activateSelf\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 You never invoke this method directly; it's invoked automatically from the 
\b activate
\b0  method.  A subclass can implement this method to perform pre-performance activities.  In particular, if the subclass needs to alter the initial 
\b nextPerform
\b0  value, it should be done here.  If 
\b activateSelf
\b0  returns 
\b nil
\b0 , the receiver is deactivated.  The default does nothing and returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 addNoteSender:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b addNoteSender:
\i\b0 aNoteSender\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Adds 
\i aNoteSender
\i0  to the recevier.  The receiver must be inactive.  If the receiver is currently in performance, or if 
\i aNoteSender
\i0  already belongs to the receiver, returns 
\b nil
\b0 .  Otherwise returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 conductor\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b conductor\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's Conductor.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 copy\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b copy\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Creates and returns a new, inactive MKPerformer as a copy of the receiver.  The new object has the same time shift and duration as the reciever.  Its 
\b time
\b0  and 
\b nextPerform
\b0  variables are set to 0.0.  The new object's MKNoteSenders are copied from the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 delegate\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b delegate\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's delegate, if any.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 deactivate\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b deactivate\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If the receiver's status is inactive, this does nothing and immediately returns the receiver.  Otherwise removes the receiver from the performance, invokes 
\b deactivateSelf
\b0 , and sets the receiver's status to 
\b MK_inactive
\b0 .  Returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 deactivateSelf\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b deactivateSelf\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 You never invoke this method directly; it's invoked automatically from the 
\b deactivate
\b0  method, A subclass can implement this method to perform post-performance activities.  The return value is ignored.  The default does nothing and returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 disconnectNoteSenders\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b disconnectNoteSenders\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Sends 
\b disconnect 
\b0 to each of the object's NoteSenders.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 duration\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b duration\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's duration value.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 free\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b free\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Frees the receiver and its MKNoteSenders. The receiver must be inactive.  Does nothing and returns 
\b nil
\b0  if the receiver is currently in performance.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 freeNoteSenders\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b freeNoteSenders\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Disconnects and frees the receiver's MKNoteSenders.  Returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 init\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b init\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Initializes the receiver.  You invoke this method when creating a new instance of MKPerformer.  A subclass implementation should send 
\b [super init]
\b0  before performing its own initialization.  \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 isNoteSenderPresent:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (BOOL)
\b isNoteSenderPresent:
\i\b0 aNoteSender\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns YES if 
\i aNoteSender
\i0  is a member of the receiver's MKNoteSender NSArray.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteSender\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b noteSender\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the first MKNoteSender in the receiver's NSArray.  This is a convenience method provided for MKPerformers that create and add a single MKNoteSender.  If there are currently no MKNoteSenders, this method creates and adds a MKNoteSender.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteSenders\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b noteSenders\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Creates and returns a NSArray containing the receiver's MKNoteSenders.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 pause\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b pause\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Suspends the receiver's performance and returns the receiver.  To free a paused MKPerformer during a performance, you should first send it the 
\b deactivate
\b0  message.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 perform\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b perform\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 This is a subclass responsibility expected to send a MKNote and then set the value of 
\b nextPerform
\b0 .  The return value is ignored.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 performCount\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b performCount\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the number of 
\b perform
\b0  messages the receiver has recieved in the current performance.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 removeNoteSender:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b removeNoteSender:
\i\b0 aNoteSender\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Removes 
\i aNoteSender
\i0  from the receiver.  The receiver must be inactive.  If the receiver is currently in performance, or if 
\i aNoteSender
\i0  wasn't part of its MKNoteSender NSArray, returns 
\b nil
\b0 .  Otherwise returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 removeNoteSenders\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b removeNoteSenders\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Removes the receiver's MKNoteSenders (but doesn't free them).  Returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 rescheduleBy:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b rescheduleBy:
\b0 (double)
\i dur
\i0\b \

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Shifts the MKPerformer's next scheduled invocation of 
\b perform
\b0  by 
\i dur
\i0 .  Positive values make the next invocation later, negative values make it earlier.  If 
\i dur 
\i0 is negative and of a magnitude large enough to shift the Performer into the past, reschedules the Performer to invoke 
\b perform 
\b0 immediately.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 rescheduleAtTime:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b rescheduleAtTime:
\b0 (double)
\i time
\i0\b \

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Shifts the MKPerformer's next scheduled invocation of 
\b perform
\b0  to 
\i time
\i0 , which is in the receiver's MKConductor's time base.  If 
\i time 
\i0 is in the past, reschedules the MKPerformer to invoke 
\b perform 
\b0 immediately.\
\pard\tx7140\li2100\ql\qnatural

\b\fs16 \cf0 \

\fs28 resume\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b resume\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Resumes the receiver's performance and returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setConductor:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setConductor:
\i\b0 aConductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the receiver's MKConductor to 
\i aConductor
\i0 .   The receiver must be inactive.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setDelegate:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setDelegate:
\i\b0 obj\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the delegate as indicated.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setDuration:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setDuration:
\b0 (double)
\i dur\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the receiver's maximum performance duration to 
\i dur
\i0  in beats.  The receiver must be inactive.  Returns 
\b nil
\b0  if the receiver is currently in performance, otherwise returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setTimeShift:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setTimeShift:
\b0 (double)
\i timeShift\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Shifts the receiver's performance time by 
\i timeShift
\i0  beats.  The receiver must be inactive.  Returns 
\b nil
\b0  if the receiver is currently in performance, otherwise returns the receiver.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 status\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b status\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's status.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 time\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b time\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the time, in beats, that the receiver last received the 
\b perform
\b0  message.  If the receiver is inactive, returns MK_ENDOFTIME.  The return value is measured from the beginning of the performance and doesn't include any time that the receiver has been paused.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 timeShift\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b timeShift\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's time shift value.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 \
\pard\li1100\ql\qnatural

\b\fs36 \cf0 Performer Delegate\
\
\pard\tx7140\li2100\ql\qnatural

\fs28 \cf0 performerDidActivate:\
\pard\tx7140\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b performerDidActivate:
\i\b0 sender
\i0\b \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Delegate receives this message, if it responds to it, after the performer is activated.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\b\fs28 \cf0 performerDidDeactivate:\
\pard\tx7140\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b performerDidDeactivate:
\i\b0 sender
\i0\b \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Delegate receives this message, if it responds to it,  after the performer is deactivated.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\li1100\ql\qnatural

\b\fs36 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\fs28 \cf0 performerDidPause:\
\pard\tx7140\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b performerDidPause:
\i\b0 sender
\i0\b \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Delegate receives this message, if it responds to it,  after the performer is paused.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\li1100\ql\qnatural

\b\fs36 \cf0 \
\pard\tx7140\li2100\ql\qnatural

\fs28 \cf0 performerDidResume:\
\pard\tx7140\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b performerDidResume:
\i\b0 sender
\i0\b \
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Delegate receives this message, if it responds to it,  after the performer is resumed.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\li1100\ql\qnatural

\b\fs36 \cf0 \
Performer Time Code Protocol\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs24 \cf0 MIDI time code support 
\f1 ã 1993, 
\f0 Copyright Pinnacle Research.\
\pard\li1100\ql\qnatural

\b\fs36 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 This is an informal protocol, required if a MKPerformer subclass is to synchronize correctly with incoming MIDI time code.\
\
There are three parts to this protocol.   \
	\
	1. A Time Code-conforming MKPerformer must implement a method 
\b setFirstTimeTag:
\b0 , which takes a 
\i double 
\i0 argument, represnting the starting value of MIDI time code in seconds.  A common implementation of this method stores the value it is passed in an instance variable.  The MKPerformer class provides a default implementation, which does nothing.\
	\
	2.  A Time Code-conforming MKPerformer's 
\b activateSelf 
\b0 method must position itself at the MKNote it wants to send at  
\i firstTimeTag
\i0 .   If there is no MKNote for that time, it should position itself at the first MKNote 
\i following
\i0  that time.
\i   
\i0 It then sets its 
\i nextPerform
\b  
\i0\b0 instance variable
\i  
\i0 to that MKNote's time (which will be greater than or equal to 
\i firstTimeTag.
\i0 )   In other words, it sets 
\i nextPerform
\i0  to the first time it wants to run.  Finally, it returns 
\b self
\b0 .   If there are no MKNotes to send after the specified time,  it returns 
\b nil
\b0 .  \
\
	3.  The first invocation of a Time Code-conforming MKPerformer's 
\b perform 
\b0 method should send the selected MKNote, then choose the next MKNote and set 
\i nextPerform 
\i0 to the time until that MKNote, as usual.   You can identify the first invocation because the instance variable 
\i performCount 
\i0 will be set to 1.  In the first invocation of 
\b perform
\b0 , you may also want to send any 
\b noteUpdates
\b0  that preceed 
\i firstTimeTag
\i0 .  This makes sure that all MKSynthInstrument  and MIDI controllers are up to date.  (This is sometimes called "chasing controller values" in MIDI parlance.)\
	\
Here is an example of a simple, but complete, Time Code-conforming MKPerfomer.  This example is a simplified version of the MusicKit MKPartPerformer:\
\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\f2\fs24 \cf0 #import <MusicKit/MusicKit.h>\
#import "MyPartPerformer.h"\
@implementation MyPartPerformer:MKPerformer\
\{\
    id part;             /* MKPart over which we're sequencing. */\
    double firstTimeTag; /* Required by Time Code Protocol. */        \
    int currentIndex;    /* Index of nextNote */\
\}\
\
-initForPart:aPart\
\{\
    if (!aPart) \
	   return nil;\
    [super init];\
    part = aPart;\
    [self addNoteSender: [[MKNoteSender alloc] init]];\
    return self;\
\}\
\
±setFirstTimeTag:(double)aTimeTag\
\{\
	firstTimeTag = aTimeTag;\
	return self;\
\}\
\
±activateSelf\
\{\
	int cnt\
	id aNote,noteList;\
	double tTag = 0;\
	BOOL success = NO;\
	noteList = [part notesNoCopy];\
	cnt = [noteList count];\
	for (currentIndex=0; currentIndex < cnt; currentIndex++) \{ \
		aNote = [noteList objectAtIndex:currentIndex];\
		tTag = [aNote timeTag];\
		if (tTag >= firstTimeTag) \{\
	    	     success = YES;\
	    	     break;\
	    	\}\
	\}\
	if (!success) \
	   return nil;\
	nextPerform = tTag;\
	return self;\
\}\
\
±perform \{\
	double t = [nextNote timeTag];\
	id aNote;\
	id noteList = [part notesNoCopy];\
	if (performCount == 1 && (firstTimeTag > 0)) \{  \
		/* Send all noteUpdates up to now */\
		int i,cnt;\
		for (i = 0, cnt = [noteList count]; i<cnt; i++) \
	  	     aNote = [noteList objectAt:i];\
		     if ([aNote noteType] == MK_noteUpdate)\
	                  [[self noteSender] sendNote:aNote];\
	\}\
	aNote = [noteList objectaAt:currentIndex++];\
	[[self noteSender] sendNote:aNote];\
	if (currentIndex == [aList count])\
	  return [self deactivate];\
	else \
	  nextPerform = [[noteList objectAt:currentIndex] timeTag]-t;\
	return self;\
\}\

\fs28 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\f0 \cf0 Of course, any performer can be used with a MIDI time code conductor.  However, unless you follow the 
\b Time Code Performer protocol
\b0  described above, it will not seek as you might expect.   \
\
N.B.  When a MKPerformer is activated while a performance is in progress, the MKPerformer 
\b activate 
\b0 method adds its 
\i nextPerform 
\i0 to the current MKConductor time to determine the time of the first invocation of the MKPerformer's 
\b perform 
\b0 method.  Thus, the protocol described above would seem to introduce an undesired offset equal to the MKConductor's current time.  Therfore, the 
\b activate 
\b0 method makes a special case of MKPerformers that are managed by a MKConductor that is synchronizing to MIDI Time CodeÐ it does 
\i not
\i0  add in the MKConductor's time when activating such MKPerformers.  The distinction between the two interpretations of 
\i nextPerform 
\i0 is an historical artifact.  \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b \cf0 \
\pard\li1100\ql\qnatural

\fs36 \cf0 \
}
