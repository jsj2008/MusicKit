{\rtf0\ansi{\fonttbl\f0\froman Times-Roman;\f1\ftech\fcharset2 Symbol;\f2\fmodern Courier;
}
{\colortbl;\red255\green255\blue255;}
\paperw16220\paperh12580
\pard\ql\qnatural

\f0\fs24 \cf0 Release 2.0  Copyright 
\f1 ã
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.\
\
Release 4.0  Updates Copyright 
\f1 ã
\f0 1993 by CCRMA, Stanford University.  All Rights Reserved.\
\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \
\pard\li1100\ql\qnatural

\b \cf0 \
\
\
\

\fs36 MKNote\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b0\fs28 \cf0 INHERITS FROM	NSObject\

\fs16 \

\fs28 DECLARED IN	MusicKit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 MKNote objects are containers of musical information.  The amount and type of information that a MKNote can hold is practically unlimited; however, you should keep in mind that MKNotes haven't the ability to act on this information, but merely store it.  It's left to other objects to read and process the information in a MKNote.  Most of the other MusicKit classes are designed around MKNote objects, treating them as common currency.  For example, MKPart objects store MKNotes, MKPerformers acquire them and pass them to MKInstruments, MKInstruments read the contents of MKNotes and apply the information therein to particular styles of realization, and so on.  \

\fs16 \

\fs28 The information that comprises a MKNote defines the attributes of a particular musical event.  Typically, an object that uses MKNotes plucks from them just those bits of information in which it's interested.  Thus you can create MKNotes that are meaningful in more than one application.  For example, a MKNote object that's realized as synthesis on the DSP would contain many particles of information that are used to drive the synthesis machinery; however, this doesn't mean that the MKNote can't also contain graphical information, such as how the MKNote would be rendered when drawn on the screen.  The objects that provide the DSP synthesis realization (MKSynthPatch objects, as defined by the MusicKit) are designed to read just those bits of information that have to do with synthesis, and ignore anything else the MKNote contains.  Likewise, a notation application would read the attributes that tell it how to render the MKNote graphically, and ignore all else.   Of course, some information, such as the pitch and duration of the MKNote, would most likely be read and applied in both applications. \

\fs16 \

\fs28 Most of the methods defined by the MKNote class are designed to let you set and retrieve information in the form of 
\i parameters
\i0 .  A parameter consists of a tag, a name, a value, and a data type: \

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	A parameter tag is a unique integer used to catalog the parameter within the MKNote; the MusicKit defines a number of parameter tags such as MK_freq (for frequency) and MK_amp (for amplitude). \

\fs16 \

\fs28 ·	The parameter's name is used primarily to identify the parameter in a scorefile.  The names of the MusicKit parameters are the same as the tag constants, but without the ªMK_º prefix.  You can also use a parameter's name to retrieve its tag, by passing the name to MKNote's 
\b parTagForName:
\b0  class method.  (As explained in its descriptions below, it's through this method that you create your own parameter tags.)  Similarly, you can get a name from a tag with MKNote's 
\b parNameForTag: 
\b0 class method.\

\fs16 \

\fs28 ·	A parameter's value can be a 
\b double
\b0 , 
\b int
\b0 , string (
\b char *
\b0 ), or an object (
\b id
\b0 ).  The method you invoke to set a parameter value depends on the type of the value.  To set a 
\b double
\b0  value, for example, you would invoke the 
\b setPar:toDouble:
\b0  method.  Analogous methods exist for the other types.  You can retrieve the value of a 
\b double
\b0 -, 
\b int
\b0 -, or string-valued parameter as any of these three types, regardless of the actual type of the value.  For example, you can set the frequency of a MKNote as a 
\b double
\b0 , thus:\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\ql\qnatural

\f2\fs24 \cf0 \

\f0\fs28 		
\f2\fs24 [aNote setPar:MK_freq toDouble:440.0]\

\f0\fs28 \
and then retrieve it as an 
\b int
\b0 :\
\
		
\f2\fs24 int freq = [aNote parAsInt:MK_freq]\

\f0\fs28 \
The type conversion is done automatically.  \
\
Object-valued parameters are treated differently from the other value types.  The only MusicKit objects that are designed to be used as parameter values are Envelopes and WaveTables (and the WaveTable descendants Partials and Samples).  Special methods are provided for setting and retrieving these objects.  Other objects, most specifically, objects of your own classes, are set through the 
\b setPar:toObject:
\b0  method.  While an instance of any class may be set as a parameter's value through this method, you should note well that only those objects that respond to the 
\b writeASCIIStream:
\b0  and 
\b readASCIIstream:
\b0  messages can be written to and read from a scorefile.  None of the MusicKit classes implement these methods and so their instances can't be written to a scorefile as parameter values (Envelopes and WaveTables are written and read through a different mechanism).\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	The parameter's data type is set when the parameter's value is set; thus the data type is either a 
\b double
\b0 , 
\b int
\b0 , string, Envelope, WaveTable, or (other) object.  These are represented by constants, as given in the description of 
\b parType:
\b0 , the method that retrieves a parameter's data type. \

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A parameter is said to be present within a MKNote once its value has been set.  You can determine whether a parameter is present in one of four ways:\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	The easiest way is to invoke the boolean
\b  
\b0 method
\b  isParPresent:
\b0 , passing the parameter tag as the argument.  An equivalent C function, 
\b MKIsNoteParPresent()
\b0  is also provided for greater efficiency.\

\fs16 \

\fs28 ·	At a lower lever, you can invoke the 
\b parVector:
\b0  method to retrieve one of a MKNote's ªparameter bit vectors,º integers that the MKNote uses internally to indicate which parameters are present.  You query a parameter bit vector by masking it with the parameter's tag:\

\fs16 \
\pard\tx3620\li2620\ql\qnatural

\f2\fs24 \cf0 	/* A MKNote may have more then one bit vector to accommodate all \
	 * its parameters.  \
	 */\
	int parVector = [aNote parVector:(MK_amp/32)];\
\
	/* If MK_amp is present, the predicate will be true. */\
	if (parVector & (1 << (MK_amp % 32)))\
  \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\f0\fs16 \cf0 \

\fs28 ·	If you plan on retrieving the value of the parameter after you've checked for the parameter's presence, then it's generally more efficient to go ahead and retrieve the value and 
\i then 
\i0 determine if the parameter is actually set by comparing its value to the appropriate parameter-not-set value, as given below:\

\fs16 \
\pard\tx3620\tx4620\tx6140\li2620\ql\qnatural

\b\fs28 \cf0 	Retrieval type	No-set value\

\b0 	int		MAXINT\
	double		MK_NODVAL (but see below)\
	NSString 
\f2\fs24 	"" (LMS this needs checking)\

\f0\fs28 	id	
\b 	nil\

\fs16 \
\pard\tx3120\tx4620\tx6140\li3120\fi-520\ql\qnatural

\b0\fs28 \cf0 	Unfortunately, you can't use MK_NODVAL in a simple comparison predicate.  To check for this return value, you must call the in-line function 
\b MKIsNoDVal()
\b0 ; the function returns 0 if its argument is MK_NODVAL and nonzero if not:\

\fs16 \
\pard\tx3620\tx4120\li2620\ql\qnatural

\f2\fs24 \cf0 	/* Retrieve the value of the amplitude parameter. */\
	double amp = [aNote parAsDouble:MK_amp];\
\
	/* Test for the parameter's existence. */\
	if (!MKIsNoDVal(amp))\
			... /* do something with the parameter */\
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\f0\fs16 \cf0 \

\fs28 ·	If you're looking for and processing a large number of parameters in one block, then you should make calls to the 
\b MKNextParameter()
\b0  C function, which returns the values of a MKNote's extant parameters only.  See the function's description in Chapter 2 for more details.  \

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A MKNote has two special timing attributes:  A MKNote's time tag corresponds, conceptually, to the time during a performance that the MKNote is performed.   Time tags are set through the 
\b setTimeTag:
\b0  method.  The other timing attribute is the MKNote's duration, a value that indicates how long the MKNote will endure once it has been struck. It's set through 
\b setDur:
\b0 . A single MKNote can have only one time tag and one duration.  Keep in mind, however, that not all MKNotes need a time tag and a duration.  For example, if you realize a MKNote by sending it directly to an MKInstrument, then the MKNote's time tagÐindeed, whether it even has a time tagÐis of no consequence; the MKNote's performance time is determined by when the MKInstrument receives it (although see the MKScorefileWriter, MKScoreRecorder, and MKPartRecorder class descriptions for alternatives to this edict).  Similarly, a MKNote that merely initiates an event, relying on a subsequent MKNote to halt the festivities, as described in the discussion of 
\i note types
\i0 , below, doesn't need and actually mustn't be given a duration value, .\

\fs16 \

\fs28 During a performance, time tag and duration values are measured in time units called 
\i beats.  
\i0 The size of a beat
\i  
\i0 is determined by the tempo of the MKNote's MKConductor.  You can set the MKNote's conductor directory with the method 
\b setConductor:
\b0 .  However, if  the MKNote is in the process of being sent by a MKPerformer (or MKMidi), the MKPerformer's MKConductor is used instead.   Hence, MKNote's 
\b conductor 
\b0 method returns the MKPerformer's MKConductor if the MKNote is in the process of being sent by a MKPerformer, or the MKNote's conductor otherwise.  If no MKConductor is set, then its MKConductor is the 
\i defaultConductor
\i0 , which has a default (but not immutable) tempo of 60.0 beats per minute.  \
\
Keep in mind that if you send a MKNote directly to an Instrument, then the MKNote's time tag is (usually) ignored, as described above, but its duration may be considered and employed by the MKInstrument. \

\fs16 \

\fs28 A MKNote has a 
\i note type
\i0  that casts it into one of five roles: \

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	A noteDur represents an entire musical note (a note with a duration).\
·	A noteOn establishes the beginning of a note.  \
·	A noteOff establishes the end of a note.  \
·	A noteUpdate represents the middle of a note (it updates a sounding note).  \
·	A mute makes no sound.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 Only noteDurs may have duration values; the very act of setting a MKNote's duration changes it to a noteDur.  \

\fs16 \

\fs28 You match the two MKNotes in a noteOn/noteOff pair by giving them the same 
\i note tag
\i0  value; a note tag is an integer that identifies two or more MKNotes as part of the same musical event or phrase.  In addition to coining noteOn/noteOff pairs, note tags are used to associate a noteUpdate with a noteDur or noteOn that's in the process of being performed.  The C function 
\b MKNoteTag()
\b0  is provided to generate note tag values that are guaranteed to be unique across your entire applicationÐyou should never create a new note tag except through this function.\

\fs16 \

\fs28 Instead of or in addition to being actively realized, a MKNote object can be stored.  In a running application, MKNotes are stored within MKPart objects through the 
\b addToPart:
\b0  method.  A MKNote can only be added to one MKPart at a time; adding it to a MKPart automatically removes it from its previous MKPart.  Within a MKPart object, MKNotes are sorted according to their time tag
\i  
\i0 values
\i .\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 For long-term storage, MKNotes can be written to a scorefile.  There are two ªsafeº ways to write a scorefile:  You can add a MKNote-filled MKPart to a MKScore and then write the MKScore to a scorefile, or you can send MKNotes during a performance to a MKScorefileWriter MKInstrument.  The former of these two methods is generally easier and more flexible since it's done statically and allows random access to the MKNotes within a MKPart.  The latter allows MKNote objects to be reused since the file is written dynamically; it also lets you record interactive performances.  \

\fs16 \

\fs28 You can also write individual MKNotes in scorefile format to an open stream by sending 
\b writeScorefileStream:
\b0  to the MKNotes.  This can be convenient while debugging, but keep in mind, however, that the method is designed primarily for use by MKScore and MKScorefileWriter objects; if you write MKNotes directly to a stream that's open to a file, the  file isn't guaranteed to be recognized by methods that read scorefiles, such as MKScore's 
\b readScorefile:
\b0 .\
\
MKNote are automatically created by the MusicKit in a number of circumstances, such as when reading a MKScorefile.  The function 
\b MKSetNoteClass() 
\b0 allows you to specify that your own subclass of MKNote be used when MKNotes are automatically created.   You retrieve the MKNote class with 
\b MKGetNoteClass()
\b0 .  \

\fs16 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\i\fs28 \cf0 Inherited from Object
\i0 	Class	isa;\

\fs16 \

\i\fs28 Declared in MKNote
\i0 	MKNoteType	noteType;\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural
\cf0 int	noteTag;\
id	performer;\
id	part;\
double	timeTag;\
id	conductor;\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 noteType 	The MKNote's note type.\

\fs16 \

\fs28 noteTag 	The MKNote's note tag.\

\fs16 \

\fs28 performer 	The MKPerformer that most recently performed this MKNote.\

\fs16 \

\fs28 part 	The MKPart that this MKNote is a member of.\

\fs16 \

\fs28 timeTag 	The MKNote's time tag.\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 conductor 	The MKConductor used to schedule this MKNote's noteOff, if it is a noteDur.\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\

\fs28 METHOD TYPES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 Creating and freeing a MKNote	
\f1 - 
\f0 copy\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 copyFromZone:\

\f1 - 
\f0 init\

\f1 - 
\f0 initWithTimeTag:\

\f1 - 
\f0 split::\

\f1 - 
\f0 free\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Storing the object	
\f1 - 
\f0 addToPart: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 part\

\f1 - 
\f0 removeFromPart\

\f1 - 
\f0 writeScorefileStream:\

\f1 - 
\f0 read:\

\f1 - 
\f0 write:\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Querying the object	
\f1 - 
\f0 compare: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 conductor\

\f1 - 
\f0 performer\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Modifying parameters	
\f1 - 
\f0 setPar:toDouble: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 setPar:toInt: \

\f1 - 
\f0 setPar:toString: \

\f1 - 
\f0 setPar:toEnvelope: \

\f1 - 
\f0 setPar:toWaveTable:\

\f1 - 
\f0 setPar:toObject: \

\f1 - 
\f0 copyParsFrom:\

\f1 - 
\f0 removePar:\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Querying parameters
\f1 \U9 - 
\f0 parAsDouble: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 parAsInt: \

\f1 - 
\f0 parAsString: \

\f1 - 
\f0 parAsStringNoCopy: \

\f1 - 
\f0 parAsEnvelope: \

\f1 - 
\f0 parAsWaveTable: \

\f1 - 
\f0 parAsObject:\
 
\f1 - 
\f0 freq\

\f1 - 
\f0 keyNum\

\f1 - 
\f0 isParPresent: \

\f1 - 
\f0 parType:  \
+ parTagForName: \
+ parNameForTag: \

\f1 - 
\f0 parVector: \

\f1 - 
\f0 parVectorCount\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Time tag and duration	
\f1 - 
\f0 setTimeTag: \
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 setDur: \

\f1 - 
\f0 timeTag\

\f1 - 
\f0 dur\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 MKNote type and note tag	
\f1 - 
\f0 setNoteType:\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 setNoteTag: \

\f1 - 
\f0 noteType\

\f1 - 
\f0 noteTag
\fs16 \

\f1\fs28 - 
\f0 removeNoteTag\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\

\fs28 CLASS METHODS\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 parTagForName:\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + (int)
\b parTagForName:
\b0 (char *)
\i aName\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the integer that identifies the parameter named 
\i aName
\i0 .  If the named parameter doesn't have an identifier, one is created and thereafter associated with the parameter. \

\fs16 \

\fs28 SEE ALSO: 
\f1 -
\f0\b  setPar:toDouble: 
\b0 (etc), 
\f1 -
\f0\b  isParPresent:
\b0 , ± 
\b parNameForTag:
\b0  \

\fs16 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\pard\tx7140\li2100\ql\qnatural

\b\fs28 \cf0 parNameForTag:\
\pard\li3620\fi-1020\ql\qnatural

\b0 \cf0 + (char *)
\b parTagForName:
\b0 (int)
\i aTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the name that identifies the parameter tagged 
\i aTag
\i0 .  If the parameter number given is not a valid parameter number, returns "".  Note that the string is not copied. \

\fs16 \

\fs28 SEE ALSO: 
\f1 -
\f0\b  setPar:toDouble: 
\b0 (etc), 
\f1 -
\f0\b  isParPresent:
\b0 , ± 
\b parNameForTag:
\b0  \

\fs16 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\

\fs28 INSTANCE METHODS\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 addToPart:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b addToPart:
\i\b0 aPart\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Removes the MKNote from the MKPart that it's currently a member of and adds it to 
\i aPart
\i0 .  Returns the MKNote's old MKPart, if any. \

\fs16 \

\fs28 This method is equivalent to MKPart's 
\b addNote:
\b0  method.\

\fs16 \

\fs28 SEE ALSO: 
\f1 -
\f0\b part
\b0 , 
\f1 -
\f0\b  removeFromPart\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 compare:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b compare:
\i\b0 aNote\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns a value that indicates which of the receiving MKNote and the argument MKNote would appear first if the two MKNotes were sorted into the same MKPart:\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	
\f1 -
\f0 1 indicates that the receiving MKNote is first.\
·	1 means that the argument, 
\i aNote
\i0 , is first.\
·	0 is returned if the receiving MKNote and 
\i aNote
\i0  are the same object.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 Keep in mind that the two MKNotes needn't actually be members of the same MKPart, nor must they be members of MKParts at all.  Naturally, the comparison is judged first on the relative values of the two MKNotes' time tags; changing one or both of the MKNotes' time tags invalidates the result of a previous invocation of this method.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 conductor\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b conductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If the MKNote is being sent by a MKPerformer (or Midi), returns the MKPerformer's MKConductor.   Otherwise, if conductor was set with 
\b setConductor:
\b0 , returns the 
\i conductor 
\i0 instance variable.  Otherwise returns the 
\i defaultConductor
\i0 .  A MKNote's MKConductor is used, primarily, by Instrument objects that split noteDurs into noteOn/noteOff pairs; performance of the noteOff is scheduled with the MKConductor that's returned by this method. \

\fs16 \

\fs28 SEE ALSO: 
\f1 - 
\f0\b performer\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 copy\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b copy\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Creates and returns a new MKNote object as a copy of the receiving MKNote.  The receiving MKNote's parameters, time tag, duration, note type, and note tag are copied into the new MKNote.  Object-valued parameters are shared by the two MKNotes.  The new MKNote isn't a member of a MKPart, regardless of the membership of the original MKNote.  However, the new MKNote's MKPerformer is that of the original MKNote, even though the new MKNote hasn't actually been performed.  This imposture is necessary so that an Instrument can copy the MKNotes that it receives (prior to altering them, for example) without sacrificing access to the appropriate MKConductor (more specifically, to the MKConductor's tempo), which is retrieved through the MKNote's MKPerformer.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  copyParsFrom:
\b0 , 
\f1 -
\f0\b  copyFromZone:, 
\f1\b0 - 
\f0\b split::\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 copyParsFrom:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b copyParsFrom:
\i\b0 aNote\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Copies 
\i aNote
\i0 's parameters into the receiving MKNote.  Object-valued parameters are shared by the two MKNotes.  Returns 
\b self
\b0 .\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  copy
\b0 , 
\f1 -
\f0\b  copyFromZone:, 
\f1\b0 - 
\f0\b split::\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 copyFromZone:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b copyFromZone:
\i\b0 (NXZone *)aZone\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 The same as 
\b copy
\b0 , but the new MKNote is allocated in 
\i aZone
\i0 .\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  copy
\b0 , 
\f1 -
\f0\b  copyParsFrom:, 
\f1\b0 - 
\f0\b split::\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 dur\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b dur\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If the MKNote has a duration, returns the duration, or MK_NODVAL if it isn't set (use the function 
\b MKIsNoDVal()
\b0  to check for MK_NODVAL).    This method always returns MK_NODVAL for noteOn, noteOff and noteUpdate MKNotes.  It returns a valid dur (if one has been set) for noteDur MKNotes.  For mute MKNotes, it returns a valid value if the MKNote has an 
\b MK_restDur
\b0  parameter, otherwise it returns MK_NODVAL.  This allows you to specify rests with durations.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  setDur:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 free\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b free\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Removes the MKNote from its MKPart and then frees the MKNote (the MKNote's object-valued parameters aren't freed).\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 freq\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b freq\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 This method returns the MKNote's frequency, measured in Hertz or cycles-per-second.  If the frequency parameter MK_freq is present, its value is returned; otherwise, the frequency is converted from the key number value given by the MK_keyNum parameter.  In the absence of both MK_freq and MK_keyNum, MK_NODVAL is returned (use the function 
\b MKIsNoDVal()
\b0  to check for MK_NODVAL).  The correspondence between key numbers and frequencies is given in Appendix A, ªMusic Tables.º  \

\fs16 \

\fs28 Frequency and key number are the only two parameters whose values are retrieved through specialized methods.  All other parameter values should be retrieved through one of the 
\b parAs
\i\b0 Type
\i0\b :
\b0  methods.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  keyNum, 
\f1\b0 -
\f0\b  setPar:toDouble:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 init\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b init\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Initializes a MKNote that was created through 
\b allocFromZone:
\b0 .  For example:\

\fs16 \
\pard\tx3120\li2620\ql\qnatural

\f2\fs24 \cf0 	id aNote = [MKNote allocFromZone:aZone];\
	[aNote init];\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\f0\fs16 \cf0 \

\fs28 A newly initialized MKNote's note type is mute.  Returns 
\b self
\b0 .\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  init:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 initSetTimeTag:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 -
\f0  
\b initSetTimeTag:
\b0 (double)
\i aTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Initializes a new mute MKNote object and sets its time tag to 
\i aTimeTag
\i0 .  Returns the new MKNote.\

\fs16 \

\fs28 SEE ALSO: 
\b  
\f1\b0 - 
\f0\b split::\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 isParPresent:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (BOOL)
\b isParPresent:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns 
\b YES
\b0  if the parameter 
\i identified by parameterTag
\i0  is present in the MKNote (in other words, if its value has been set), 
\b and NO
\b0  if it isn't.\

\fs16 \

\fs28 See also: 
\f1 -
\f0\b  parVector:, MKIsNoteParPresent(), MKNextParameter(), + parTagForName:
\b0 ,
\f1  \
\U9 \U9 
\f0\b + parNameForTag:
\f1\b0 -
\f0\b  parType:
\f1\b0 , -
\f0\b  setPar:toDouble: 
\b0 (etc), 
\f1 -
\f0\b  parAsDouble: 
\b0 (etc)\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 keyNum\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b keyNum\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 This method returns the key number of the MKNote.  Key numbers are integers that enumerate discrete pitches; they're provided primarily to accommodate MIDI.  If the MK_keyNum parameter is present, its value is returned; otherwise, the key number that corresponds to the value of the MK_freq parameter, if present, is returned.  In the absence of both MK_keyNum and MK_freq, MAXINT is returned.  The correspondence between key numbers and frequencies is given in Appendix A, ªMusic Tables.º\

\fs16 \

\fs28 Frequency and key number are the only two parameters whose values are retrieved through specialized methods.  All other parameter values should be retrieved through one of the 
\b parAs
\i\b0 Type
\i0\b :
\b0  methods.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  freq, 
\f1\b0 -
\f0\b  setPar:toInt:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 noteTag\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b noteTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Return the MKNote's note tag, or MAXINT if it isn't set.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  setNoteTag:, MKNoteTag()\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 noteType\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (MKNoteType)
\b noteType\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the MKNote's note type, one of MK_noteDur, MK_noteOn, MK_noteOff, MK_noteUpdate, or MK_mute.  The note type describes the character of the MKNote, whether it represents an entire musical note (or event), the beginning, middle, or end of a note, or no note (no sound).  A newly created MKNote is a mute.  A MKNote's note type can be set through 
\b setNoteType:
\b0 , although 
\b setDur:
\b0  and 
\b setNoteTag:
\b0  may also change it as a side effect.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  setNoteType:
\b0 ,
\b  
\f1\b0 -
\f0\b  setDur:, 
\f1\b0 -
\f0\b  setNoteTag:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsDouble:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b parAsDouble:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns a 
\b double
\b0  value converted from the value of the parameter 
\i identified by parameterTag
\i0 .  If the parameter isn't present or if its value is an object, returns MK_NODVAL (use the function 
\b MKIsNoDVal()
\b0  to check for MK_NODVAL).  You should use the 
\b freq
\b0  method if you're want to retrieve the frequency of the MKNote.\

\fs16 \

\fs28 See also:  
\b MKGetNoteParAsDouble()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\f1 -
\f0\b  isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsEnvelope:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b parAsEnvelope:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the Envelope value of 
\i parameterTag
\i0 .  If the parameter isn't present or if its value isn't an Envelope, returns 
\b nil
\b0 .\

\fs16 \

\fs28 See also:  
\b MKGetNoteParAsEnvelope()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\f1 -
\f0\b  isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsInt:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b parAsInt:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns an 
\b int
\b0  value converted from the value of the parameter identified by  
\i parameterTag
\i0 .  If the parameter isn't present, or if its value is an object, returns MAXINT.\

\fs16 \

\fs28 See also:  
\b MKGetNoteParAsInt()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\b isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsObject:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b parAsObject:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the object value of 
\i the parameter identified by parameterTag
\i0 .  If the parameter isn't present, or if its value isn't an object, returns 
\b nil
\b0 .  This method can be used to return Envelope and WaveTable objects, in addition to non-MusicKit objects.\

\fs16 \

\fs28 See also:  
\b MKGetNoteParAsObject()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\f1 -
\f0\b  isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsString:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (char *)
\b parAsString:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns a 
\b string converted from a copy of the value of the parameter identified by 
\i\b0 parameterTag
\i0 .  If the parameter isn't present, or if its value is an object, returns an empty string.\

\fs16 \

\fs28 See also:  
\b MKGetNoteParAsString()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\b isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsStringNoCopy:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (char *)
\b parAsStringNoCopy:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns a 
\b string converted from a the value of the parameter identified by
\i\b0  parameterTag
\i0 .  If the parameter was set as a string, then this returns a pointer to the actual string itself; you should neither delete nor alter the value returned by this method.  If the parameter isn't present, or if its value is an object, returns an empty string.\

\fs16 \

\fs28 See also:  
\b MKGetNoteParAsStringNoCopy()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\f1 -
\f0\b  isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parAsWaveTable:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b parAsWaveTable:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the WaveTable value of the parameter identified by  
\i parameterTag
\i0 .  If the parameter isn't present, or if it's value isn't a WaveTable, returns 
\b nil
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 parType:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (MKDataType)
\b parType:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the data type of 
\i the value of the parameter identified by parameterTag
\i0 .  The data type is set when the parameter's value is set; the specific data type of the value, one of the MKDataType constants listed below, depends on which method you used to set it: \

\fs16 \
\pard\tx3120\tx6140\tx14200\li2620\ql\qnatural

\b\fs28 \cf0 	Method	Data type\

\b0 	setPar:toInt:	MK_int\
	setPar:toDouble	MK_double\
	setPar:toString:	MK_string\
	setPar:toWaveTable:	MK_waveTable\
	setPar:toEnvelope:	MK_envelope\
	setPar:toObject:	MK_object\

\fs16 \
\pard\tx3120\tx4120\tx6140\li2620\ql\qnatural

\fs28 \cf0 If the parameter's value hasn't been set, MK_noType is returned.\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 See also:  
\b MKGetNoteParAsWaveTable()
\f1\b0 , -
\f0\b  setPar:toDouble:
\b0  (etc),
\f1  -
\f0\b  parType:
\b0 , 
\f1 -
\f0\b  isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parVector:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (unsigned)
\b parVector:
\b0 (unsigned)
\i index\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns an integer bit vector that indicates the presence of the 
\i index
\i0 'th set of parameters.  Each bit vector represents 32 parameters.  For example, if 
\i index
\i0  is 1, the bits in the returned value indicate the presence of parameters 0 through 31, where 1 means the parameter is present and 0 means that it's absent.  An 
\i index 
\i0 of 2 returns a vector that represents parameters 32 through 63, and so on.  To query for the presence of a particular parameter, use the following predicate formula:\

\fs16 \
\pard\tx3120\li2620\ql\qnatural

\f2\fs24 \cf0 	[aNote parVector:(parameterTag/32)] & (1<<(parameterTag%32))\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\f0\i\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 In this formula, 
\i parameterTag 
\i0 identifies the parameter that you're interested in.
\i   
\i0 Keep in mind
\i  
\i0 that the parameter bit vectors only indicate the presence of a parameter, not its value.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  parVectorCount
\f1\b0 ,
\f0  
\f1 -
\f0\b  isParPresent:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 parVectorCount\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b parVectorCount\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the number of parameter bit vectors that the MKNote is using to accommodate all its parameters identifiers.   Normally you only need to know this if you're iterating over the parameter vectors.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  parVector\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 part\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b part\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the MKPart that contains the MKNote, or 
\b nil
\b0  if none.  By default, a MKNote isn't contained in a MKPart. \

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  addToPart:
\b0 , 
\f1 -
\f0\b  removeFromPart\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 performer\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b performer\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the MKPerformer that most recently performed the MKNote.  This is provided, primarily, as part of the implementation of the 
\b conductor
\b0  method. \

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  conductor\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 read:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b read:
\b0 (NXTypedStream *)
\i stream\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 You never invoke this method directly; to read an archived MKNote, call the 
\b NXReadObject()
\b0  C function.  \

\fs16 \

\fs28 See also: 
\f1 - 
\f0\b write:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 removeFromPart\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b removeFromPart\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Removes the MKNote from its MKPart.  Returns the MKPart, or 
\b nil
\b0  if none.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  addToPart:
\b0 , 
\f1 -
\f0\b  part\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 removeNoteTag\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b removeNoteTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Removes the noteTag, if any.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b\fs28 \cf0 removePar:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b removePar:
\b0 (int)
\i parameterTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Removes the parameter identified by  
\i parameterTag
\i0  from the MKNote; in other words, this sets the parameter's value to indicate that the parameter isn't set.  If the parameter was present, then the MKNote is returned; if not, 
\b nil
\b0  is returned.\

\fs16 \

\fs28 See also:  
\f1 +
\f0\b  parTagForName:
\b0 , 
\f1 +
\f0\b  parNameForTag:
\b0 , 
\f1 -
\f0\b  isParPresent:, 
\f1\b0 -
\f0\b  setPar:toDouble: 
\b0 (etc)\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setConductor:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setConductor:
\i\b0 newConductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets 
\i conductor
\i0  instance variable.  Note that 
\i conductor
\i0  is not archived, nor is it saved when a MKNote is added to a MKPartÐit is used only in performance.   Note that 
\b ±setConductor
\b0  is called implicitly when a MKNote is copied with the 
\b copy 
\b0 method.   Be careful not to free a MKConductor while leaving a dangling reference to it in a MKNote!\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  conductor\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setDur:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b setDur:
\b0 (double)
\i value\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the MKNote's duration to 
\i value
\i0  beats and sets its note type to MK_noteDur.  If 
\i value
\i0  is negative the duration isn't set, the note type isn't changed, and MK_NODVAL is returned (use the function 
\b MKIsNoDVal()
\b0  to check for MK_NODVAL); otherwise returns 
\i value
\i0 .\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  dur, 
\f1\b0 -
\f0\b  conductor\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setNoteTag:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setNoteTag:
\b0 (int)
\i newTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the Note's note tag to 
\i newTag
\i0 ; if the note type is 
\b MK_mute it's changed to MK_noteUpdate.  Returns self
\b0 .\

\fs16 \

\fs28 Note tags are used to associate different MKNotes with each other, thus creating an identifiable (by the note tag value) ªNote stream.º  For example, you create a noteOn/noteOff pair by giving the two MKNotes identical note tag values.  Also, you can associate any number of noteUpdates with a single noteDur, or with a noteOn/noteOff pair, through similarly matching note tags.  While note tag values are arbitrary, they should be unique across an entire application; to ensure this, you should never create noteTag values but through the 
\b MKNoteTag()
\b0  C function.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  noteTag, MKNoteTag()\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setNoteType:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setNoteType:
\b0 (MKNoteType)
\i newNoteType\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the MKNote's note type to 
\i newNoteType
\i0 , one of:\

\fs16 \
\pard\tx3120\tx3620\tx4120\tx4620\li3120\fi-520\ql\qnatural

\fs28 \cf0 ·	MK_noteDur; represents an entire musical note.\
·	MK_noteOn; represents the beginning of a note. \
·	MK_noteOff; represents the end of a note. \
·	MK_noteUpdate; represents the middle of a note. \
·	MK_mute; makes no sound.\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 Returns 
\b self
\b0 , or 
\b nil
\b0  if 
\i newNoteType
\i0  isn't a valid note type.\

\fs16 \

\fs28 You should keep in mind that the 
\b setDur:
\b0  method automatically sets a MKNote's note type to MK_noteDur; 
\b setNoteTag:
\b0  changes mutes into noteUpdates.\

\fs16 \

\fs28 See also:  
\f1 -
\f0\b  noteType, 
\f1\b0 -
\f0\b  setNoteTag:
\b0 , 
\f1 -
\f0\b  setDur:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setPar:toDouble:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPar:
\b0 (int)
\i parameterTag 
\i0\b toDouble:
\b0 (double)
\i aDouble\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the parameter identified by 
\i parameterTag
\i0  to 
\i aDouble
\i0 , and sets its data type to MK_double.   If 
\i aDouble 
\i0 is the special value MK_NODVAL, this method is the same as 
\b [self removePar:
\i\b0 parameterTag
\i0\b ].
\b0   Returns 
\b self
\b0 .\

\fs16 \

\fs28 See also:   
\f1 +
\f0\b  parTagForName:
\f1\b0 , +
\f0\b  parNameForTag:
\f1\b0 ,-
\f0\b  parType:, 
\f1\b0 -
\f0\b  isParPresent:
\b0 , 
\f1 -
\f0\b  parAsDouble:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setPar:toEnvelope:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPar:
\b0 (int)
\i parameterTag 
\i0\b toEnvelope:
\i\b0 anEnvelope\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the parameter identified by 
\i parameterTag
\i0  to 
\i anEnvelope
\i0 , and sets its data type to MK_envelope.  If 
\i anEnvelope 
\i0 is 
\b nil
\b0 , this method is the same as 
\b [self removePar:
\i\b0 parameterTag
\i0\b ].
\b0   Returns 
\b self
\b0 .  \

\fs16 \

\fs28 See also:   
\f1 +
\f0\b  parTagForName:
\f1\b0 , +
\f0\b  parNameForTag:
\f1\b0 ,-
\f0\b  parType:, 
\f1\b0 -
\f0\b  isParPresent:
\b0 , 
\f1 -
\f0\b  parAsEnvelope:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setPar:toInt:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPar:
\b0 (int)
\i parameterTag 
\i0\b toInt:
\b0 (int)
\i anInteger\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the parameter identified by 
\i parameterTag
\i0  to 
\i anInteger
\i0 , and sets its data type to MK_int.  If 
\i anInteger 
\i0 is MAXINT, this method is the same as 
\b [self removePar:
\i\b0 parameterTag
\i0\b ].
\b0   Returns 
\b self
\b0 .\

\fs16 \

\fs28 See also:   
\f1 +
\f0\b  parTagForName:
\f1\b0 , +
\f0\b  parNameForTag:
\f1\b0 ,-
\f0\b  parType:, 
\f1\b0 -
\f0\b  isParPresent:
\b0 , 
\f1 -
\f0\b  parAsInteger:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setPar:toObject:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPar:
\b0 (int)
\i parameterTag 
\i0\b toObject:
\i\b0 anObject\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the parameter identified by 
\i parameterTag
\i0  to 
\i anObject
\i0 , and sets its data type to MK_object.  If 
\i anObject 
\i0 is 
\b nil,
\b0  this method is the same as 
\b [self removePar:
\i\b0 parameterTag
\i0\b ].
\b0   Returns 
\b self
\b0 .\

\fs16 \

\fs28 While you can use this method to set the value of a parameter to any object, it's designed, principally, to allow you to use an instance of one of your own classes as a parameter value.  If you want the object to be written to and read from a scorefile, it must respond to the messages 
\b writeASCIIStream:
\b0  and 
\b readASCIIStream:
\b0 .  While response to these messages isn't a prerequisite for an object to be used as the argument to this method, if you try to write a MKNote that contains a parameter that doesn't respond to 
\b writeASCIIStream:
\b0 , an error is generated.\

\fs16 \

\fs28 Note that unless you really need to write your object to a Scorefile, you are better off saving your object using the NXTypedStream archiving mechanism.\
\
If you're setting the value as an Envelope or WaveTable object, you should use the  
\b setPar:toEnvelope:
\b0  or 
\b setPar:toWaveTable:
\b0  method, respectively. \

\fs16 \

\fs28 See also:   
\f1 +
\f0\b  parTagForName:
\f1\b0 , +
\f0\b  parNameForTag:
\f1\b0 ,-
\f0\b  parType:, 
\f1\b0 -
\f0\b  isParPresent:
\b0 , 
\f1 -
\f0\b  parAsObject:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setPar:toString:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPar:
\b0 (int)
\i parameterTag 
\i0\b toString:
\b0 (char *)
\i aString\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the parameter identified by 
\i parameterTag
\i0  to 
\i aString
\i0 , and sets its data type to MK_string.  If 
\i aString 
\i0 is NULL or ""
\b ,
\b0  this method is the same as 
\b [self removePar:
\i\b0 parameterTag
\i0\b ].
\b0  Returns 
\b self
\b0 .\

\fs16 \

\fs28 See also:   
\f1 +
\f0\b  parTagForName:
\f1\b0 , +
\f0\b  parNameForTag:
\f1\b0 ,-
\f0\b  parType:, 
\f1\b0 -
\f0\b  isParPresent:
\b0 , 
\f1 -
\f0\b  parAsString:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setPar:toWaveTable:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPar:
\b0 (int)
\i parameterTag 
\i0\b toWaveTable:
\i\b0 aWaveTable\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the value of the parameter identified by 
\i parameterTag
\i0  to 
\i aWaveTable
\i0 , and sets its data type to MK_waveTable.  If 
\i aWaveTable 
\i0 is 
\b nil
\b0 , this method is the same as 
\b [self removePar:
\i\b0 parameterTag
\i0\b ].
\b0  Returns 
\b self
\b0 .\

\fs16 \

\fs28 See also:   
\f1 +
\f0\b  parTagForName:
\f1\b0 , +
\f0\b  parNameForTag:
\f1\b0 ,-
\f0\b  parType:, 
\f1\b0 -
\f0\b  isParPresent:
\b0 , 
\f1 -
\f0\b  parAsWaveTable:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 setTimeTag:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b setTimeTag:
\b0 (double)
\i newTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the MKNote's time tag to 
\i newTimeTag
\i0  or 0.0, whichever is greater (a time tag can't be negative) .  The old time tag value is returned; a return value of MK_ENDOFTIME indicates that the time tag hadn't been set.  Time tags are used to sort the MKNotes within a MKPart; if you change the time tag of a MKNote that's been added to a MKPart, the MKNote is automatically resorted.\

\fs16 \

\fs28 See also:  
\f1  -
\f0\b  timeTag, 
\f1\b0 -
\f0\b  addToPart:
\b0 , 
\f1 -
\f0\b sort 
\b0 (MKPart)\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 split::\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b split:
\b0 (id *)
\i aNoteOn 
\i0\b :
\b0 (id *)
\i aNoteOff\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 This method splits a noteDur into a noteOn/noteOff pair, as described below.  The new MKNotes are returned by reference in the arguments.  The noteDur itself is left unchanged.  If the receiving MKNote isn't a noteDur, this does nothing and returns 
\b nil
\b0 , otherwise it returns 
\b self
\b0 . \

\fs16 \

\fs28 The receiving MKNote's MK_relVelocity parameter, if present, is copied into the noteOff.  All other parameters are copied into (or, in the case of object-valued parameters, referenced by) the noteOn.  The noteOn takes the receiving MKNote's time tag value; the noteOff's time tag is that of the MKNote plus its duration.  If the receiving MKNote has a note tag, it's copied into the noteOn and noteOff; otherwise a new note tag is generated for them.  The new MKNotes are added to the receiving MKNote's MKPart, if any.\

\fs16 \

\fs28 Keep in mind that if while this method replicates the noteDur within the  noteOn/noteOff pair, it doesn't replace the former with the latter.  To do this, you must free the noteDur yourself.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 timeTag\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b timeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the MKNote's time tag.  If the time tag isn't set, MK_ENDOFTIME is returned.  Time tag values are used to sort the MKNotes within a MKPart.\

\fs16 \

\fs28 See also:  
\f1  -
\f0\b  setTimeTag:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \

\fs28 writeScorefileStream:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b writeScorefileStream:
\b0 (NXStream *)
\i aStream\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Writes the MKNote, in scorefile format, to the stream 
\i\b aStream
\i0 .  The stream must be open for writing.  You rarely invoke this method yourself; it's invoked from the scorefile-writing methods defined by Score and ScorefileWriter.  Returns self
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 write:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i stream\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 You never invoke this method directly; to archive a MKNote, call the 
\b NXWriteRootObject()
\b0  C function.  The MKNote's parameters, note type, note tag, and time tag are archived directly.  Its MKPerformer and MKPart are archived through 
\b NXWriteObjectReference()
\b0 .\

\fs16 \

\fs28 See also:  
\f1  -
\f0\b  read:\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 \

\fs16 \
}
