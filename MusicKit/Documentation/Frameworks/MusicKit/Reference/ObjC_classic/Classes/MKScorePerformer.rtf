{\rtf0\ansi{\fonttbl\f0\froman Times-Roman;\f1\ftech\fcharset2 Symbol;}
{\colortbl;\red255\green255\blue255;}
\paperw16220\paperh12580
\pard\ql\qnatural

\f0\fs24 \cf0 Release 2.0  Copyright 
\f1 ã
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.\
\
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs16 \cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \
\pard\li1100\ql\qnatural

\b \cf0 \
\
\
\

\fs36 MKScorePerformer\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b0\fs28 \cf0 INHERITS FROM	NSObject\

\fs16 \

\fs28 DECLARED IN	MusicKit.h\

\fs16 \
\
\

\fs28 CLASS DESCRIPTION\

\fs16 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\fs28 \cf0 A MKScorePerformer performs a MKScore object by creating a group of MKPartPerformers, one for each MKPart in the MKScore, and controlling the group's performance.  MKScorePerformer itself isn't a MKPerformer but it does define a number of methods, such as 
\b activate
\b0 , 
\b pause
\b0 , and 
\b resume
\b0 , that emulate MKPerformer methods.  When a MKScorePerformer receives such a message, it forwards the message to each of its MKPartPerformer objects, which are true MKPerformers.\

\fs16 \

\fs28 MKScorePerformer also has a MKPerformer-like status; it can be active, inactive, or paused.  The status of a MKScorePerformer is, in general, the same as the status of all its MKPartPerformers.  For instance, when you send the 
\b activate
\b0  message to a MKScorePerformer, its status becomes MK_active as does the status of all its MKPartPerformers.  However, you can access and control a MKPartPerformer independent of the MKScorePerformer that created it.  Thus, an individual MKPartPerformer's status can be different from that of the MKScorePerformer.\

\fs16 \

\fs28 A MKScorePerformer's MKScore is set and its MKPartPerformers are created when it receives the 
\b setScore:
\b0  message.  If you add MKParts to or remove MKParts from the Score after sending the 
\b setScore:
\b0  message, the changes will not be seen by the MKScorePerformer.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\

\fs28 INSTANCE VARIABLES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\i\fs28 \cf0 Inherited from NSObject
\i0 	Class	isa;\

\fs16 \

\i\fs28 Declared in MKScorePerformer
\i0 	MKPerformerStatus	status;\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural
\cf0 id	partPerformers;\
id	score;\
double	firstTimeTag;\
double	lastTimeTag;\
double	timeShift;\
double	duration;\
id	conductor;\
id	partPerformerClass;\
id	delegate;\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 status 	The object's status.\

\fs16 \

\fs28 partPerformers 	The object's MKPartPerformer instances.\

\fs16 \

\fs28 score 	The MKScore with which this object is associated.\

\fs16 \

\fs28 firstTimeTag 	Smallest timeTag value considered for performance.\

\fs16 \

\fs28 lastTimeTag 	Greatest timeTag value considered for performance.\

\fs16 \

\fs28 timeShift 	Performance time offset in beats.\

\fs16 \

\fs28 duration 	Maximum performance duration in beats.\

\fs16 \

\fs28 conductor 	The object's MKConductor (that of its MKPartPerformers). \
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 partPerformerClass 	Sublass of MKPartPerformers created by this object.\
\
delegate 	Object to which various notification messages are sent.\
\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\

\fs28 METHOD TYPES\

\fs16 \
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs28 \cf0 Creating and freeing a MKScorePerformer\
\pard\tx7140\tx10180\tx10680\li7140\ql\qnatural

\f1 \cf0 - 
\f0 copy\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 free\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Modifying the object	
\f1 - 
\f0 freePartPerformers\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 init\

\f1 - 
\f0 removePartPerformers\

\f1 - 
\f0 setConductor: \

\f1 - 
\f0 setDelegate: \

\f1 - 
\f0 setDuration: \

\f1 - 
\f0 setFirstTimeTag: \

\f1 - 
\f0 setLastTimeTag: \

\f1 - 
\f0 setPartPerformerClass: \

\f1 - 
\f0 setScore: \

\f1 - 
\f0 setTimeShift:\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Querying the object	
\f1 - 
\f0 duration\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 delegate\

\f1 - 
\f0 firstTimeTag\

\f1 - 
\f0 lastTimeTag\

\f1 - 
\f0 noteSenders\

\f1 - 
\f0 partPerformerForPart: \

\f1 - 
\f0 partPerformers\

\f1 - 
\f0 partPerformerClass\

\f1 - 
\f0 score\

\f1 - 
\f0 status\

\f1 - 
\f0 timeShift\
\pard\tx7140\tx10180\tx10680\li7140\fi-4540\ql\qnatural

\fs16 \cf0 \

\fs28 Performing the object	
\f1 - 
\f0 activate\
\pard\tx10180\tx10680\li7660\fi-520\ql\qnatural

\f1 \cf0 - 
\f0 activateSelf\

\f1 - 
\f0 deactivate\

\f1 - 
\f0 deactivateSelf\

\f1 - 
\f0 pause\

\f1 - 
\f0 resume\
\pard\tx7140\li2100\ql\qnatural

\fs16 \cf0 \
\
\

\fs28 INSTANCE METHODS\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 activate\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b activate\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Sends 
\b activateSelf
\b0  to the receiver and then sends the 
\b activate
\b0  message to each of the receiver's MKPartPerformers.  If 
\b activateSelf
\b0  returns 
\b nil
\b0 , the message isn't sent and 
\b nil
\b0  is returned.  Otherwise returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 activateSelf\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b activateSelf\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 You never invoke this method directly; it's invoked as part of the 
\b activate
\b0  method.  A subclass implementation should send 
\b [superactivateSelf]
\b0 .  If 
\b activateSelf
\b0  returns 
\b nil
\b0 , the receiver isn't activated.  The default implementation does nothing and returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 copy\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b copy\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Creates and returns a new, inactive MKScorePerformer that's a copy of the receiver.  The new object is associated with the same Score as the receiver, and has the same Conductor and timing window variables (
\b timeShift
\b0 , 
\b duration
\b0 , 
\b fromTimeTag
\b0 , and 
\b toTimeTag
\b0 ).  New MKPartPerformers are created for the new object.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 deactivate\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b deactivate\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Deactivates the receiver's MKPartPerformers.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 deactivateSelf\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b deactivateSelf\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 A subclass can implement this method to perform post-performance activites.  The default does nothing; the return value is ignored.  You never invoke this method directly; it's invoked by the 
\b deactivate
\b0  method.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 delegate\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b delegate\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's delegate, if any.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 duration\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b duration\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's maximum performance duration in beats.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 firstTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b firstTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the smallest timeTag value considered for performance.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 free\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b free\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Frees the receiver and its MKPartPerformers.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 freePartPerformers\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b freePartPerformers\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 If the receiver is in performance, does nothing and returns 
\b nil
\b0 .  Otherwise, removes and frees the receiver's MKPartPerformers, sets the receiver's Score to 
\b nil
\b0  and returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 init\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b init\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Initializes the receiver.  A subclass implementation should send 
\b [super init]
\b0  before performing its own initialization.  \

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 lastTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b lastTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the greatest timeTag value considered for performance.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 noteSenders\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b noteSenders\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Creates and returns a NSMutableArray containing the MKNoteSender objects that belong to the receiver's MKPartPerformers  (A MKPartPerformer contains at most one MKNoteSender, created when the MKPartPerformer is initialized).\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 partPerformerClass\
\pard\tx7140\li3620\fi-1020\ql\qnatural
\cf0  
\f1\b0 - 
\f0\b partPerformerClass \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0 \cf0 Returns the class used for MKPartPerformers, as set by 
\b setPartPerformerClass:
\b0 . The default is [MKPartPerformer class] itself. \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \
partPerformerForPart:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b partPerformerForPart:
\i\b0 aPart\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Returns the receiver's MKPartPerformer that's associated with 
\i aPart
\i0 , where 
\i aPart
\i0  is a MKPart in the receiver's MKScore.  Keep in mind that it's possible for a MKPart to have more than one MKPartPerformer; this method returns only the MKPartPerformer that was created by the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 partPerformers\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b partPerformers\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Creates and returns a NSMutableArray containing the receiver's MKPartPerformers. 
\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 pause\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b pause\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Suspends the receiver's performance by sending the 
\b pause
\b0  message to each of its MKPartPerformers.  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 removePartPerformers\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b removePartPerformers\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Removes the receiver's MKPartPerformers (but doesn't free them) and sets the receiver's MKScore to 
\b nil
\b0 .  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 resume\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b resume\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Resumes a previously paused performance by sending the 
\b resume
\b0  message to each of the receiver's MKPartPerformers.  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 score\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b score\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the object's Score.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setConductor:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setConductor:
\i\b0 aConductor\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sends the message 
\b setConductor:
\i\b0 aConductor
\i0  to each of the receiver's MKPartPerformers.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setDuration:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setDuration:
\b0 (double)
\i aDuration\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the maximum performance duration by sending 
\b setDuration:
\i\b0 aDuration
\i0  to each of the receiver's MKPartPerformers.  The duration is measured in beats.  Returns the receiver.  If the receiver is active, this does nothing and returns 
\b nil
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setFirstTimeTag:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setFirstTimeTag:
\b0 (double)
\i aTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the smallest timeTag value considered for performance by sending 
\b setFirstTimeTag:
\i\b0 aTimeTag
\i0  to each of the receiver's MKPartPerformers.  Returns the receiver.  If the receiver is active, this does nothing and returns 
\b nil
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setLastTimeTag:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setLastTimeTag:
\b0 (double)
\i aTimeTag\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the greatest timeTag value considered for performance by sending 
\b setLastTimeTag:
\i\b0 aTimeTag
\i0  to each of the receiver's MKPartPerformers.  Returns the receiver.  If the receiver is active, this does nothing and returns 
\b nil
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setPartPerformerClass:\
\pard\tx7140\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setPartPerformerClass:
\i\b0 aPart
\i0\b Performer
\i\b0 Subclass
\i0\b \
\pard\tx7140\li2100\ql\qnatural
\cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0 \cf0 Normally, MKScorePerformers create instances of the MKPartPerformer class.  This method allows you to specify that instances of some MKPartPerformer subclass be created instead.  If 
\i aPartPerformerSubclass
\i0  is not a subclass of MKPartPerformer (or MKPartPerformer itself), this method has no effect and returns nil.  Otherwise, it returns self.\
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \
setDelegate:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setDelegate:
\i\b0 obj\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the delegate as indicated.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setScore:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setScore:
\i\b0 aScore\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the receiver's Score to 
\i aScore
\i0  and creates a MKPartPerformer for each of the Score's MKParts.  Subsequent changes to 
\i aScore
\i0  (by adding or removing MKParts) won't be seen by the receiver.  The MKPartPerformers from a previously set Score (if any) are first removed and freed.  Returns the receiver.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 setTimeShift:\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0\b setTimeShift:
\b0 (double)
\i aTimeShift\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\i0\fs28 \cf0 Sets the performance time offset by sending 
\b setTimeShift:
\i\b0 aTimeShift
\i0  to each of the receiver's MKPartPerformers.  The offset is measured in beats.  Returns the receiver.  If the receiver is active, this does nothing and returns 
\b nil
\b0 .\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 status\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (int)
\b status\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's status.\

\fs16 \
\pard\tx7140\li2100\ql\qnatural

\b \cf0 \

\fs28 timeShift\
\pard\li3620\fi-1020\ql\qnatural

\f1\b0 \cf0 - 
\f0 (double)
\b timeShift\
\pard\li3620\fi-1020\ql\qnatural

\fs16 \cf0 \
\pard\tx3120\tx3620\tx4120\li2620\ql\qnatural

\b0\fs28 \cf0 Returns the receiver's performance time offset in beats.\

\fs16 \
\pard\li1100\ql\qnatural

\b\fs36 \cf0 \
MKScorePerformer Delegate\
\
\pard\tx7140\li2100\ql\qnatural

\fs28 \cf0 See MKPerformer.rtf for a description of the delegate messages that MKScorePerformers send. }
