{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f4\fswiss Helvetica;\f2\fmodern Courier;}
\paperw16220
\paperh13360
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 4.0 Copyright 
\f1 ã
\f0 1994 by Stanford University.  All Rights Reserved.\
\

\pard\tx2480\tx2860\tx3240\fs16\li2100\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\f4\b\li2100\fc0\cf0 \
\
\
\
\
\

\fs56 Defined Types\

\fs16 \
\
\

\fs28 MKDataType\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Note.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum 
\b _MKDataType
\b0  \{    \
   			
\b MK_noType
\b0  = ((int)MK_sysReset + 1),\
    			
\b MK_double
\b0 ,\
    			
\b MK_string
\b0 ,\
    			
\b MK_int
\b0 ,\
    			
\b MK_object
\b0 ,\
    			
\b MK_envelope
\b0 ,\
    			
\b MK_waveTable
\b0 \}\
		
\b MKDataType
\b0 ;\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \

\pard\tx2860\tx3620\tx4380\f0\b0\li2100\fc0\cf0 \

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the types of parametes in Note objects.  The types are as follows
\b \

\pard\tx6640\tx8160\b0\li2480\fc0\cf0 \
MK_noType	Invalid type.\
MK_double	C Double value.\
MK_string	Character string value.\
MK_int	C nt value.\
MK_object	Generic object value.  Object must implement scorefile object protocol)\
MK_envelope	Envelope object value.  Object must implement Envelope protocol.\
MK_waveTable	WaveTable object value.  Object must implement WaveTable protocol.\
\

\pard\f4\b\li2100\fc1\cf1 \
\
\
		MKDeviceStatus	\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/devstatus.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef enum 
\b _MKDeviceStatus
\b0  \{\
  			
\b MK_devClosed
\b0  = 0,\
			
\b MK_devOpen
\b0 ,\
			
\b MK_devRunning
\b0 ,\
			
\b MK_devStopped
\b0 \
		\} 
\b MKDeviceStatus
\pard\tx1720\tx2100\b0\fs16\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 \
	DESCRIPTION	
\f0\fs28\fc1\cf1 MKDeviceStatus
\b0\fc0\cf0  enum values define the status of objects that represent devices, such as Midi and the Orchestra.  Such classes are called
\i   device classes.
\i0   The values for 
\b MKDeviceStatus 
\b0 are as follows:\
\

\pard\tx6640\tx8160\b\li2480\fc0\cf0 devClosed 	
\b0 Mach device is closed.\

\b devOpen   	
\b0 Mach device is open but its clock has not yet begun to run.  It's clock is in a \
	reset state.\

\b devRunning	
\b0 Mach device is open and its clock is running.\

\b devStopped 	
\b0 Mach device is open, its clock has run, but it has been temporarily stopped.\
\

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 		There are four methods for changing the state, defined in all Music Kit 
\pard\tx6640\tx8160\li2480\fc0\cf0 device classes:\
\

\b open	
\b0 Opens Mach device if not already open.  Resets object if needed.  Sets \
	status to 
\b MK_devOpen.  
\b0 Returns nil if some problem occurs, else self.\
r
\b un	
\b0 If not open, does a
\b  [self open].   
\b0 If not already running, starts Mach device \
	clock.  Sets status to
\b  MK_devRunning.\
stop	
\b0 If not open, does a
\b  [self open].  
\b0 Otherwise, stops Mach device clock and sets \
	status to 
\b MK_devStopped.  \
close	
\b0 Closes the Mach device after waiting for all enqueued events to  finish. \
	Returns self and sets status to 
\b MK_devClosed
\b0  unless there's some problem \
	closing the device, in which case, returns nil.\

\b abort	
\b0 Like close, but doesn't wait for enqueued events to finish.\

\pard\f4\fs16\li2100\fc0\cf0 \

\b \
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 \

\pard\f4\b\li2100\fc0\cf0 \
\
MKEnvStatus\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Envelope.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum _MKEnvStatus \{\

\pard\tx2860\tx3620\tx4380\li2100\fc0\cf0 	
\b MK_noMorePoints
\b0  = -1,\
	
\b MK_noEnvError
\b0  = 0,\
	
\b MK_stickPoint
\b0 ,\
	
\b MK_lastPoint
\b0 \}\
	
\b MKEnvStatus
\b0 ;\
\

\fs16 \

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the return values of the Envelope method 
\b getNth:x:y:smoothing:
\b0 .  The types are as follows
\b \

\pard\tx6640\tx8160\b0\li2480\fc0\cf0 \
MK_noMorePoints	Attempt to read invalid point in envelope.\
MK_noEnvError	Envelope has not been properly initialized.\
MK_stickPoint	The requested point is the stick point of the Envelope.\
MK_lastPoint	The requested point is the last point of the Envelope.\

\pard\f4\b\fs16\li2100\fc0\cf0 \
\
\

\fs28 \
\
\
MKErrno\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Performer.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum _MKErrno \{\
    			
\b MK_musicKitErr
\b0  = MK_ERRORBASE,\

\pard\tx2860\tx3000\tx3700\fc0\cf0 	
\b MK_machErr,\
	MK_cantOpenFileErr ,\
	MK_cantCloseFileErr,\
    	MK_outOfOrderErr,    	 MK_samplesNoResampleErr,\
    	MK_noMoreTagsErr,\
    	MK_notScorefileObjectTypeErr,\
    	MK_orchBadFreeErr,\
    	MK_synthDataCantClearErr,       	MK_synthDataLoadErr,\
    	MK_synthDataReadonlyErr,\
    	MK_synthInsOmitNoteErr,     \
    	MK_synthInsNoClass,\
	MK_ugLoadErr,               \
    	MK_ugBadArgErr,\
    	MK_ugBadAddrPokeErr,\
    	MK_ugBadDatumPokeErr,\
   	MK_ugOrchMismatchErr,\
    	MK_ugArgSpaceMismatchErr,\
    	MK_ugNonAddrErr,\
	MK_ugNonDatumErr,\
	MK_sfBadExprErr, 	MK_sfBadDefineErr,\
	MK_sfBadParValErr,\
	MK_sfNoNestDefineErr,\
	MK_sfBadDeclErr, 	MK_sfMissingStringErr,\
	MK_sfBadNoteTypeErr,\
	MK_sfBadNoteTagErr,\
	MK_sfBadNoteTypeErr,\
	MK_sfMissingSemicolonErr,\
	MK_sfUndeclaredErr,\
	MK_sfBadAssignErr,\
	MK_sfBadIncludeErr,\
	MK_sfBadParamErr,\
	MK_sfNumberErr,\
	MK_sfStringErr,\
	MK_sfGlobalErr,\
	MK_sfCantFindGlobalErr,\
	MK_sfMulDefErr, 	MK_sfDuplicateDeclErr,\
	MK_sfNotHereErr,\
	MK_sfWrongTypeDeclErr,\
	MK_sfBadHeaderStmtErr,\
	MK_sfBadStmtErr,\
	MK_sfBadInitErr,\
	MK_sfNoTuneErr,\
	MK_sfNoIncludeErr,\
	MK_sfCantFindFileErr,\
	MK_sfCantWriteErr,\
	MK_sfOutOfOrderErr,\
	MK_sfUnmatchedCommentErr,\
	MK_sfInactiveNoteTagErr,\
	MK_sfCantFindClass,\
	MK_sfBoundsErr,\
	MK_sfTypeConversionErr,\
	MK_sfReadOnlyErr,\
	MK_sfArithErr,\
	MK_sfNonScorefileErr,\
	MK_sfTooManyErrorsErr,\
	MK_ugsNotSetRunErr,\
	MK_ugsPowerOf2Err,\
	MK_ugsNotSetGetErr,\
	MK_spsCantGetMemoryErr,\
	MK_spsSineROMSubstitutionErr,\
	MK_spsInvalidPartialsDatabaseKeywordErr,\
	MK_spsOutOfRangeErr,\
	MK_spsCantGetUGErr,\
	MK_synthDataCantReadDSPErr,\
	MK_dspMonitorVersionError,\
  	MK_highestErr,\
	MK_maxErr 
\b0 = (MK_ERRORBASE + 1000)\
	\} 
\b MKErrno
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the exceptions that the Music Kit can generate via the 
\b _MKErrorf
\b0 () mechanism.   The errors are in six categories: general errors, representation errors, synthesis errors, scorefile errors, UnitGenerator library errors and SynthPatch library errors.\
\

\pard\tx2860\tx7280\tx7520\b\fc0\cf0 	GENERAL ERRORS\

\b0 	MK_musicKitErr	Used as a way of specifying Music Kit errors not otherwise defined.	MK_machErr	Used for errors from the operating system.  For example, the MIDI object \
		uses this error to report problems gaining access to the MIDI device. \
	\
	
\b REPRESENTATION ERRORS
\b0 	General purpose errors dealing with music representation.\
	MK_cantOpenFileErr 	Warns that a file can't be opened. \
	MK_cantCloseFileErr	Warns that a file can't be closed. \
    	MK_outOfOrderErr    	Warns that notes were found in a scorefile with times out of order.  \
	MK_samplesNoResampleErr	Samples class:  Warns that the Samples object cannot change the sampling \
		rate of a waveform by anything but a negative power of 2.\
    	MK_noMoreTagsErr	Warns that the Music Kit has run out of 
\i noteTags
\i0 .\
    	MK_notScorefileObjectTypeErr	Warns that a class is specified in a scorefile as a 
\i scorefile object type
\i0 ; \
		but that class does not implement the appropriate protocol to be used in that \
		way.  \
\
	
\b SYNTHESIS ERRORS	
\b0 \
    	MK_orchBadFreeErr	Orchestra class: Attempt to free a UnitGenerator that's in use.\
    	MK_synthDataCantClearErr       	SynthData class: A DSP error occurred when trying to clear a SynthData.\
	MK_synthDataLoadErr	SynthData class: A DSP error occurred when trying to load a SynthData.\
    	MK_synthDataReadonlyErr	SynthData class: An attempt was made to set the value of a read-only \
		SynthData.\
    	MK_synthInsOmitNoteErr     	SynthInstrument class:  A Note had to be omitted.\
    	MK_synthInsNoClass	SynthInstrument class:  No SynthPatch class was set.\
	MK_ugLoadErr               	UnitGenerator class:  A DSP error occurred when loading a unit generator.\
    	MK_ugBadArgErr	UnitGenerator class:  A bad argument was specified.  Probably a bug in a  \
		subclass.\
    	MK_ugBadAddrPokeErr	UnitGenerator class:  A DSP error occurred when trying to put an address \
		in an argument.\
    	MK_ugBadDatumPokeErr	UnitGenerator class:  A DSP error occurred when trying to put a datum in \
		an argument.\
   	MK_ugOrchMismatchErr	UnitGenerator class:  An attempt was made to set an argument to a \
		SynthData from a different Orchestra.\
    	MK_ugArgSpaceMismatchErr	UnitGenerator class:  The memory space of an address-valued argument \
		does not match the SynthData it was given.\
    	MK_ugNonAddrErr	UnitGenerator class:  An attempt was made to set a DSP unit generator\
		argument to a datum value when that unit generator argument accepts only\
		an address.\
 	MK_ugNonDatumErr	UnitGenerator class:  An attempt was made to set a DSP unit generator\
		argument to an address value when that unit generator argument accepts \
		only a datum.\
	MK_synthDataCantReadDSPErr	SynthData class: Problem reading SynthData from DSP.\
	MK_dspMonitorVersionError	Orchestra class:  Mismatch between DSP monitor version and Orchestra \
		version.  \
\
	
\b SCOREFILE LANGUAGE ERRORS
\b0 \
	MK_sfBadExprErr	Illegal expression. \
	MK_sfBadDefineErr	Illegal definition.\
	MK_sfBadParValErr	Illegal parameter value.\
	MK_sfNoNestDefineErr	Illegal nesting of definitions.\
	MK_sfBadDeclErr 	Illegal declaration.\
	MK_sfMissingStringErr	Missing string where a string is required.\
	MK_sfBadNoteTypeErr	Illegal note type.\
	MK_sfBadNoteTagErr	Illegal (non-integer) note tag.\
	MK_sfMissingSemicolonErr	Missing semicolon.\
	MK_sfUndeclaredErr	Undeclared symbol.\
	MK_sfBadAssignErr	Illegal assignment.\
	MK_sfBadIncludeErr	Illegal include.\
	MK_sfBadParamErr	Illegal parameter.\
	MK_sfNumberErr	Illegal number.\
	MK_sfStringErr	Illegal string.\
	MK_sfGlobalErr	Illegal global symbol.\
	MK_sfCantFindGlobalErr	Undefined global symbol.\
	MK_sfMulDefErr 	Multiple definitions.\
	MK_sfDuplicateDeclErr	Duplicate declarations.\
	MK_sfNotHereErr	Something may not appear where it does appear.\
	MK_sfWrongTypeDeclErr	Something is declared where it should not be declared. \
	MK_sfBadHeaderStmtErr	Illegal header statement.\
	MK_sfBadStmtErr	Illegal body statement.\
	MK_sfBadInitErr	Illegal initialization.\
	MK_sfNoTuneErr	Illegal argument follows the 
\b tune
\b0  construct.\
	MK_sfNoIncludeErr	Unused.\
	MK_sfCantFindFileErr	Can't find a file.\
	MK_sfCantWriteErr	Can't write a file.\
	MK_sfOutOfOrderErr	Times appear out of order in a file.\
	MK_sfUnmatchedCommentErr	
\b comment
\b0  without a matching 
\b endComment
\b0 .\
	MK_sfInactiveNoteTagErr	A noteOff or noteUpdate appears for an inactive noteTag.\
	MK_sfCantFindClass	An Objective-C class is specified which can not be found.\
	MK_sfBoundsErr	Lookup value is out of bounds.\
	MK_sfTypeConversionErr	Illegal type conversion.\
	MK_sfReadOnlyErr	An attempt to set a read-only variable.\
	MK_sfArithErr	An arithmetic error, such as divide by zero.\
	MK_sfNonScorefileErr	An attempt to read a text file that is not a ScoreFile.\
	MK_sfTooManyErrorsErr	Too many errors have occurred--aborting.\
	\
	
\b UNIT GENERATOR LIBRARY ERRORS
\b0 \
	MK_ugsNotSetRunErr	Indicates a memory argument that needs to be set before 
\b run 
\b0 is sent.\
	MK_ugsPowerOf2Err	Indicates that a UnitGenerator that accepts only power-of-2 length \
		SynthData was passed a SynthData of some other length.\
	MK_ugsNotSetGetErr	Indicates that a value was queried before a dependent value was set.\
\
	
\b SYNTHPATCH LIBRARY ERRORS
\b0 \
	MK_spsCantGetMemoryErr	Indicates a SynthPatch cannot get enough DSP memory for some purpose.\
	MK_spsSineROMSubstitutionErr	Indicates a SynthPatch is substituting the sine ROM for the requested \
		wavetable, due to a lack of DSP memory.\
	MK_spsInvalidPartialsDatabaseKeywordErr\
		Indicates an invalid keyword was passed to the Timbre data base.\
	MK_spsOutOfRangeErr	Indicates that a parameter is out of range.\
	MK_spsCantGetUGErr	Indicates that a SynthPatch can't allocate a UnitGenerator it needs.  This \
		can arise, for example, if a SynthPatch allocates UnitGenerators outside of\
		its basic definition (i.e. outside of the 
\b patchTemplateFor:
\b0  method.) \

\f4\b\fc1\cf1 		
\pard\fs16\li2100\fc0\cf0 \
\

\fs28\fc1\cf1 \
\
	MKKeyNum	\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/keynums.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		See MusicTables.rtf.\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 MIDI key numbers.  See MusicTables.rtf for more information.\

\pard\tx1140\tx2300\tx3440\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc0\cf0 \

\pard\f4\b\li2100\fc1\cf1 \
\
\
		MKLeafUGStruct	\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/dspwrap.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef struct 
\b _MKLeafUGStruct
\b0  \{    			MKOrchMemStruct 
\b reso
\b0 ;\
			double 
\b computeTime
\b0 ;\
			id **
\b availLists
\b0 ;\
			DSPDataRecord *
\b data
\b0 [DSP_LC_NUM];\
			DSPFixup *
\b fixups
\b0 [DSP_LC_NUM_P];\
			DSPMemorySpace *
\b argSpaces
\b0 ;\
			MKMasterUGStruct *
\b master
\b0 ;\
			int 
\b reserved1
\b0 ;\
			double 
\b offChipComputeTime
\b0 ;\
			void *
\b reserved2
\b0 ;\
			\} 
\b MKLeafUGStruct
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\
		
\f0\b0\fs28\fc1\cf1 The 
\b MKLeafUGStruct
\b0\fc0\cf0  struct represents the DSP statistics of a "leaf" UnitGenerator class.  That is, it contains the information specific to a particular memory space combination.  Its fields should not be altered.   Their meaning is as follows:\
\

\pard\tx6640\tx8160\b\li2480\fc0\cf0 reso	
\b0 Memory and computation resources needed by this unit generator.\

\b computeTime	
\b0 Time for this unit generator to compute one sample, in seconds, when \
	unit generator is on chip.\

\b availLists	
\b0 Array of lists of idle patches, indexed by dsp number.\

\b data[]	
\b0 Sorted absolute data records. \

\b fixups[] 	
\b0 Fix-up array for each P space.\

\b argSpaces	
\b0 Array which tells which space each argument points to. If the argument\
	is not address-valued, the array value here is 
\b DSP_MS_N
\b0 . \

\b master	
\b0 Pointer to corresonding MKMasterUGStruct.\

\b reserved1	
\b0 Reserved
\b \
offChipComputeTime	
\b0 Compute time when unit generator is off chip.\

\b reserved2	
\b0 Rerserved
\b \
\

\pard\f4\li2100\fc1\cf1 \
\
\
		MKMasterUGStruct	\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/dspwrap.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef struct 
\b _MKMasterUGStruct
\b0  \{\
			unsigned 
\b argCount
\b0 ;\
			int 
\b symCount
\b0 [DSP_LC_NUM];\
			int 
\b fixupCount
\b0 [DSP_LC_NUM_P]; \
			DSPSymbol *
\b symbols
\b0 [DSP_LC_NUM];\
			DSPSymbol *
\b argSymbols
\b0 ;\
			void *
\b reserved
\b0 ;\
		\} 
\b MKMasterUGStruct
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\
		
\f0\b0\fs28\fc1\cf1 The 
\b MKMasterUGStruct
\b0\fc0\cf0  struct represents the DSP statistics of a "master" UnitGenerator class.  That is, it contains all the information common to the subclasses.  Its fields should not be altered.   Their meaning is as follows:\
\

\pard\tx6640\tx8160\b\li2480\fc0\cf0 argCount
\b0 	Number of memory arguments.\

\b symCount[]	
\b0 Number of symbols loaded in each space.  Needed for symbols that are not args.\

\b fixupCount
\b0 	Number of fixups in each P space.\

\b symbols
\b0 	Symbol list for each DSP location counter.\

\b argSymbols	
\b0 Array of symbols corresponding to memory arguments.\

\b reserved
\b0 	Reserved.\

\pard\tx1720\tx2100\tx2860\fc0\cf0 	\

\pard\f4\b\fs16\li2100\fc0\cf0 \
\
\

\fs28 \
\
\
MKMsgStruct\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Conductor.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef struct _MKMsgStruct \{\
   		 	double 
\b _timeOfMsg
\b0 ;\
   			SEL 
\b _aSelector
\b0 ;\
    			id 
\b _toObject
\b0 ;\
    			int 
\b _argCount
\b0 ;\
    			id 
\b _arg1
\b0 ;\
    			id 
\b _arg2
\b0 ;\
   		 	struct _MKMsgStruct *
\b _next
\b0 ;\
   			 IMP 
\b _methodImp
\b0 ;\
    			id *
\b _otherArgs
\b0 ;\
    			BOOL 
\b _conductorFrees
\b0 ;\
   			BOOL 
\b _onQueue
\b0 ;\
    			struct _MKMsgStruct *
\b _prev
\b0 ;\
   			 id 
\b _conductor
\b0 ;\
		\} 
\b MKMsgStruct
\b0 ;\

\pard\tx2860\tx3620\tx4380\b\fs16\li2100\fc0\cf0 \

\pard\tx1720\tx2100\b0\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\fs28 MKMsgStruct
\b0  is the structure that represents a message the Conductor will send to an object.   See the functions 
\b MKNewMsgRequest
\b0 (), 
\b MKScheduleMsgRequest
\b0 (), 
\b MKCancelMsgRequest
\b0 (), 
\b MKRescheduleMsgRequest
\b0 (), and 
\b MKRepositionMsgRequest
\b0 ().\

\fs16 \

\pard\f4\b\li2100\fc0\cf0 \
\
\

\fs28\fc1\cf1 \
\
MKMidiParVal\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/params.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef enum 
\b _MKMidiParVal
\b0  \{\
		
\b 	MK_resetControllers 
\b0 = 262
\b ,\
			MK_localControlModeOn,\
			MK_localControlModeOff,\
			MK_allNotesOff,\
			MK_omniModeOff,\
			MK_omniModeOn,\
			MK_monoMode,\
			MK_polyMode,\
			MK_sysClock,\
			MK_sysUndefined0xf9,\
			MK_sysStart,\
			MK_sysContinue,\
			MK_sysStop,\
			MK_sysUndefined0xfd,\
			MK_sysActiveSensing,
\b0 \
			
\b MK_sysReset
\b0 \}\
		
\b MKMidiParVal
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 This enumeration defines arguments for certain MIDI parameters.  The first 8 correspond to MIDI Channel Mode Message values.  These are the arguments for the parameter 
\b MK_chanMode
\b0 .\
\
    MK_resetControllers	Reset controllers\
    MK_localControlModeOn,	Local control mode on\
    MK_localControlModeOff,	Local control mode off\
    MK_allNotesOff,	All notes off\
    MK_omniModeOff,	Omni mode off\
    MK_omniModeOn,	Omni mode on\
    MK_monoMode,	Mono mode\
    MK_polyMode,	Poly mode.\
\
The second 8 correspond to MIDI System Realtime Message values.   These are arguments for the parameter 
\b MK_sysRealTime
\b0 \
\
    
\fc1\cf1 MK_sysClock,	Clock tick.\

\fc0\cf0     
\fc1\cf1 MK_sysUndefined0xf9,	Undefined.\

\fc0\cf0     
\fc1\cf1 MK_sysStart,	Sart sequence.\

\fc0\cf0     
\fc1\cf1 MK_sysContinue,	Continue seqeuence.\

\fc0\cf0     
\fc1\cf1 MK_sysStop,	Stop sequence.\

\fc0\cf0     
\fc1\cf1 MK_sysUndefined0xfd,	Undefined.\

\fc0\cf0     
\fc1\cf1 MK_sysActiveSensing,	Active sensing.\

\fc0\cf0     
\fc1\cf1 MK_sysReset	Reset.\

\pard\tx1140\tx2300\tx3440\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc1\cf1 \

\pard\f4\b\fs16\li2100\fc0\cf0 \
\
\

\fs28 \
\
MKNoteType\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Note.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum 
\b _MKNoteType
\b0  \{\
    			
\b MK_noteDur
\b0  = 257, \
			
\b MK_noteOn
\b0 , \
			
\b MK_noteOff
\b0 , \
			
\b MK_noteUpdate
\b0 , \
			
\b MK_mute
\b0 \}\
		
\b MKNoteType
\b0 ;\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \

\pard\tx2860\tx3620\tx4380\f0\b0\li2100\fc0\cf0 \

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the types of Note objects.  The types are as follows
\b \

\pard\tx6640\tx8160\b0\li2480\fc0\cf0 \
MK_noteDur	A Note with a duration.  Can have a noteTag.\
MK_noteOn	The start of a musical note.  Must have a noteTag.\
MK_noteOff	The onset of the ending portion of a musical note.   Must have a noteTag.\
MK_noteUpdate	An update to an already-playing musical note.  Can have a noteTag.\
MK_mute	A Note that makes no sound.  May not have a noteTag.\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \
\

\fs28\fc1\cf1 \
\
MKOrchAddrStruct\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/orch.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef struct  _
\b MKOrchAddrStruct
\b0  \{     \
			DSPAddress 
\b address
\b0 ;\
			DSPMemorySpace 
\b memSpace
\b0 ;\
			MKOrchMemSegment 
\b memSegment
\b0 ;\
			 int 
\b orchIndex
\b0 ;\
			\} 
\b MKOrchAddrStruct
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 This struct fully-specifies an Orchestra (DSP) memory address.   The fields are as follows:\
\

\pard\tx2860\tx7280\tx7520\fc0\cf0 	address	Absolute address of symbol.\
	memSpace	Memory space, in low-level DSP terms.\
	memSegment	Logical memory segment, in Orchestra terms.\
	orchIndex	Which Orchestra.\
\

\pard\f4\b\li2100\fc1\cf1 \
\
\
\
MKOrchMemSegment\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/orch.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef enum _MKOrchMemSegment \{			
\b MK_noSegment
\b0  = 0, 			
\b MK_pLoop
\b0 , 			
\b MK_pSubr
\b0 ,			
\b MK_xArg
\b0 , 			
\b MK_yArg
\b0 , 			
\b MK_lArg,			MK_xData, 			MK_yData, 			MK_lData, 			MK_xPatch, 			MK_yPatch, 			MK_lPatch, 			MK_numOrchMemSegments
\b0   		\} 
\b MKOrchMemSegment
\b0 ;\
\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 This enumeration specifies the memory segments supported by the Music Kit.  These memory segments are not necessarily contiguous on the DSP--they are "logical" rather than "physical".  The segments are:\
\

\pard\tx2860\tx7280\tx7520\fc0\cf0 	MK_noSegment 	Illegal segment.	MK_pLoop	Orchestra loop P memory.	MK_pSubr	P subroutine memory (off-chip only) 	MK_xArg	X argument memory.	MK_yArg	Y argument memory.\
	MK_lArg                     	L argument memory. (on-chip only)\
	MK_xData            	X data memory (off-chip only)\
	MK_yData                    	Y data memory (off-chip only, except sine table rom)\
	MK_lData 	L data memory (currently unsupported.)\
	MK_xPatch	X patchpoint\
	MK_yPatch	Y patchpoint\
	MK_lPatch	L patchpoints (currently unsupported.)\

\pard\f4\b\li2100\fc1\cf1 \
\
\
\
\
MKOrchMemStruct\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/orch.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef struct 
\b _MKOrchMemStruct
\b0  \{ 			unsigned 
\b xArg
\b0 ;  			unsigned 
\b yArg
\b0 ; 			unsigned 
\b lArg
\b0 ;  			unsigned 
\b pLoop
\b0 ; 			unsigned 
\b pSubr
\b0 ;			unsigned 
\b xData
\b0 ;			unsigned 
\b yData
\b0 ; 			unsigned 
\b lData
\b0 ; 			\} 
\b MKOrchMemStruct
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 This struct specifies the memory segments required for a UnitGenerator.  It is also used to specify the relocation of a UnitGenerator.  The fields are as follows:\
\

\pard\tx2860\tx7280\tx7520\fc0\cf0 	xArg	X unit generator memory arguments\
	yArg	Y unit generator memory arguments\
	lArg	L unit generator memory arguments\
	pLoop	Program memory that's part of the main orch loop.\
	pSubr	Program memory subroutines (offchip).\
	xData	X data memory. Also used for xPatch memory.\
	yData	Y data memory.  Also used for yPatch memory.\
	lData	Currently unused.\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \

\fs28 \
\
MKOrchSharedType\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Orchestra.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum 
\b _MKOrchSharedType
\b0  \{\
    			
\b MK_noOrchSharedType
\b0  = 0,\
    			
\b MK_oscTable
\b0  = 1,\
    			
\b MK_waveshapingTable
\b0  = 2,\
    			
\b MK_excitationTable
\b0  = 3\}\
		
\b MKOrchSharedType
\b0 ;\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \

\pard\tx2860\tx3620\tx4380\f0\b0\li2100\fc0\cf0 \

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the types of shared objects that can be registered with the Orchestra's shared object mechanism.  The shared object mechanism manages reference counts, automatic lazy garbage collection, etc.
\b \

\pard\tx6640\tx8160\b0\li2480\fc0\cf0 \
MK_noOrchSharedType	Wildcard.\
MK_oscTable	Data used as a wave table for an oscillator.  This shared type must be a power\
	of 2 in length and if a request for a shorter length is made, it is downsampled.\
MK_waveshapingTable	Data used as a waveshaping table.  This table performs a non-linear mapping.  	When looked-up with a sine wave, it provides a specified spectrum.  \
MK_excitationTable	Data used as an excitation table for waveguide-based synthesis. \
	This type is similar to oscTable but it need not be a power of 2 and it is \
	shortened by truncation (from the end.) \
\
Note that the same data object may be registered as the key for several different types of shared data.  For example, a Partials object may have associated with it two SynthData objects, one representing its oscTable representation and one representing its waveshapingTable representation.\
\
\

\pard\tx2860\tx7280\tx7520\f4\b\fc1\cf1 \

\pard\li2100\fc1\cf1 \
\
MKPars\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/params.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		See below.\
\
	
\f4\b\fs20\fc0\cf0 DESCRIPTION\
\

\f0\b0\fs28 		Music Kit-defined Note parameters.   Parameters are similar to objective-C messages in that their precise meaning \
		depends on the object interpreting them.  The parameters are given below, organized according to function.\
		See MusicTables.rtf for a list of the parameters organized according to which SynthPatches use them.  Applications \
		may also define their own parameters, as described in the Note class description.\
\

\fc1\cf1 		typedef enum _MKPars \{     \

\pard\tx2100\tx2480\tx2860\fc1\cf1 		
\b MK_noPar
\b0  = 0,          /* Begin marker */\
\

\i     		MIDI opcodes are represented by the presence of one of the following 12 parameters, along with the noteType:\

\i0 \
		
\b MK_keyPressure
\b0 ,     /* MIDI voice msg. (See MIDI spec) */\
		
\b MK_afterTouch
\b0 ,       /* MIDI voice msg */\
		
\b MK_controlChange
\b0 , /* MIDI voice msg */\
		
\b MK_pitchBend
\b0 ,         /* MIDI voice msg. Stored as 14-bit signed quantity, centered on 0x2000. */\
		
\b MK_programChange
\b0 ,   /* MIDI voice msg */ \
		
\b MK_timeCodeQ
\b0 ,       /* MIDI time code, quarter frame */\
		
\b MK_songPosition
\b0 ,    /* MIDI system common msg (See MIDI spec) */\
		
\b MK_songSelect
\b0 ,      /* MIDI system common msg */\
		
\b MK_tuneRequest
\b0 ,     /* MIDI system common message. Significant by its presence alone. Its value is irrelevant. */\
		
\b MK_sysExclusive
\b0 ,    /* MIDI system exclusive string (See MIDI Spec) */\
		
\b MK_chanMode
\b0 ,        /* MIDI chan mode msg: takes a MKMidiParVal val */\
		
\b MK_sysRealTime
\b0 ,     /* MIDI real time msg: takes a MKMidiParVal */ \
\

\i    		The remaining MIDI parameters provide additional data needed to fully represent MIDI messages. \

\i0 \
		
\b MK_basicChan
\b0 ,       /* MIDI basic channel for MIDI mode messages */\
		
\b MK_controlVal
\b0 ,      /* MIDI Controller value for MK_controlChange */\
		
\b MK_monoChans
\b0 ,       /* An arg for the MIDI monoMode msg arg */\
\
		
\i The following are derived from MIDI but are used extensively in Orchestra synthesis as well. Most SynthPatches 		support them.\
\

\i0 		
\b MK_velocity
\b0 ,         /* Key velocity for noteOns -- also used as a brightness and amp in Orchestra synthesis. */\
		
\b MK_relVelocity
\b0 ,    /* Release key velocity. Asociated with noteOffs. */\
		
\b MK_keyNum
\b0 ,          /* Key number. Also used for Orchestra synthesis as a substitute for 
\b freq
\b0 . Takes a                          			                                    MKKeyNum value. */\
\
		
\i The following specify sensitivity of SynthPatches to various MIDI parameters.
\i0 \
\
		
\b MK_velocitySensitivity,\
		MK_afterTouchSensitivity,\
		MK_modWheelSensitivity,\
		MK_breathSensitivity,\
		MK_footSensitivity,\
		MK_portamentoSensitivity,\
		MK_balanceSensitivity,\
		MK_panSensitivity,\
		MK_expressionSensitivity,\
		MK_pitchBendSensitivity,\

\b0 \

\i    		The following are basic synthesis parameters, which should be supported by all SynthPatch classes, if possible.  \

\i0 \
		
\b MK_freq
\b0 ,                   /* Frequency of the fundamental. keyNum is an alternative (see Note class). */\
		
\b MK_amp
\b0 ,                   /* Amplitude. In the range 0 : 1.0. velocity is an alternative (see Note class). */\
		
\b MK_bearing
\b0 ,            /* L/R stereo panning. In the range -45 : 45 */\
		
\b MK_bright
\b0 ,                /* Brightness. */\
		
\b MK_portamento
\b0 ,    /* Portamento time--the transition time to a note from immediately preceding note in the same \
			                                       phrase. */\
\

\i 		The following are supported by oscillator-based SynthPatch classes. 	
\i0 \

\pard\tx2420\tx2440\tx2860\fc1\cf1 	
\b MK_waveform
\b0 ,        /* WaveTable used for the oscillator */\
	
\b MK_waveLen
\b0 ,         /* Length of wavetable. */\
	
\b MK_phase
\b0 ,           /* Initial phase in degrees of wavetable */\
    \

\i 	The following are supported by SynthPatch classes which use frequency modulation synthesis.  Parameters are \
	predefined  for three carriers and four modulators, enough to emulate the patches on 4-operator fm synthesizers.  \
	For fm instruments,  the brightness parameter is usually a synonym for one or more of the modulator indices.\
       \

\i0 	
\b MK_cRatio
\b0 ,        /* carrier 1 frequency == (cRatio  * freq).  c1Ratio is a synonym.  */\
	
\b MK_c2Ratio
\b0 ,       /* carrier 2 frequency == (c2Ratio * freq) */\
	
\b MK_c2Amp
\b0 ,         /* carrier 2 amplitude  */\
	
\b MK_c2Waveform
\b0 ,    /* carrier 2 WaveTable */\
	
\b MK_c2Phase
\b0 ,\
	
\b MK_c3Ratio
\b0 ,       /* carrier 3 frequency == (c3Ratio * freq) */\
	
\b MK_c3Amp
\b0 ,         /* carrier 3 amplitude  */\
	
\b MK_c3Waveform
\b0 ,    /* carrier 3 WaveTable */\
	
\b MK_c3Phase
\b0 ,\
	
\b MK_m1Ratio
\b0 ,       /* modulator 1 frequency == (m1Ratio * freq) */\
	
\b MK_m1Ind
\b0 ,         /* modulator 1 modulation index */\
	
\b MK_m1Waveform
\b0 ,    /* modulator 1 WaveTable */\
	
\b MK_m1Phase,\
	MK_m2Ratio,\
	MK_m2Ind,\
	MK_m2Waveform,        \
	MK_m2Phase,\
	MK_m3Ratio,    
\b0    /* Same as above for third modulator. */\
	
\b MK_m3Ind,\
	MK_m3Waveform,\
	MK_m3Phase,\
	MK_m4Ratio,      
\b0  /* Same as above for fourth modulator. */\
	
\b MK_m4Ind,\
	MK_m4Waveform,\
	MK_m4Phase,\
	MK_feedback,    
\b0   /* Percentage of modulator feedback. */\
    \

\i 	The following are recognized by the Pluck SynthPatch\

\i0 \
	
\b MK_pickNoise
\b0 ,     /* Duration of attack noise burst in seconds. */\
	
\b MK_decay
\b0 ,         /* Frequency-independent decay during entire note.  Specified as time constant to reach -60dB of \
	                                     original value. The special value 0 means no  decay. */\
	
\b MK_sustain
\b0 ,       /* Frequency-dependent sustain. In the range 0 == normal : 1 == maximum. */\
	
\b MK_lowestFreq
\b0 ,    /* In the first note of a phrase, this warns the SynthPatch what the lowest note of the phrase is.\
		                                           Some SynthPatches (such as Pluck) need this information to do appropriate allocation. */\
\

\i 	The following vibrato parameters are supported by SynthPatches that allow vibrato of various kinds\
\

\i0 	
\b MK_svibFreq
\b0 ,       /* Periodic vibrato rate in hz. */\
	
\b MK_svibAmp
\b0 ,        /* Periodic vibrato amplitude in percentage of fundamental frequency. */\
	
\b MK_rvibFreq
\b0 ,       /* Random vibrato rate in hz. */\
	
\b MK_rvibAmp
\b0 ,        /* Random vibrato amplitude in percentage of fundamental frequency. */\
	
\b MK_indSvibFreq
\b0 ,    /* Periodic fm index vibrato in hz. */\
	
\b MK_indSvibAmp
\b0 ,     /* Periodic fm index vibrato amplitude in percentage of current fm index. */\
    	
\b MK_indRvibFreq
\b0 ,    /* Random fm index vibrato in hz. */\
    	
\b MK_indRvibAmp
\b0 ,     /* Random fm index vibrato amplitude in percentage of current fm index. */\
               \

\i 	A noise generator may play a role in some SynthPatches to create special effects or increase realism.  The following \
	predefined parameters are useful in these cases. Note that for SynthPatches where the noise generator is the \
	primary source of sound (as in Pluck),  the standard parameters MK_amp and MK_freq are used instead of  these \
	parameters.\

\i0 \
	
\b MK_noiseAmp
\b0 ,     /* Amplitude of a noise generator, 0 to 1 */\
    	
\b MK_noiseFreq
\b0 ,    /* Frequency of a noise generator in Hz. */\
                   \

\i 	The following are commonly-used envelope parameters, which may be supported by some SynthPatch classes.  Note \
	that there are several alternative ways to use envelopes, among them:\

\i0        \

\i 	* Specify the desired values directly as the y values of the envelope.  \
	* Do the same, scaling by a normalized constant scaler\
	* Do the same, adding a constant to the results.\
	* Normalize the envelope values, and multiply times a constant scaler.\
	* Do the same, adding a constant to the results. \
	* Use the envelope to interpolate between two specific values.\
      \
	The SynthPatches provided with the Music Kit allow all of the above situations for parameters which support \
	envelopes, depending on what is supplied in the parameter list.  If a parameter is specified as a single value, that \
	value is used.  If an envelope is supplied but no value, the envelope values are used directly.  If both are supplied, \
	the envelope is scaled by the numeric value to produce the resulting values.  If two values and an envelope are \
	supplied, the resulting values are the first value plus the difference of the two  values times the envelope values \
	(i.e., interpolation).  In other words\
       \

\f2\i0           		 frequency(t) == freq0 + (freq1 - freq0) * envelope(t)\

\f0\i       \
       	where freq0 defaults to 0, freq1 defaults to 1, and the envelope defaults to a constant value of 1.\

\i0 \
	
\b MK_freqEnv
\b0 ,      /* Frequency envelope */\
	
\b MK_freq0
\b0 ,        /* Fundamental frequency when the envelope is at 0. 
\b MK_freq
\b0  is frequency when the envelope is \
		                                  at 1.  
\b MK_freq1
\b0  is a synonym for 
\b MK_freq
\b0 . */    \
	
\b MK_freqAtt
\b0 ,      /* Absolute time of attack portion of envelope */\
	
\b MK_freqRel
\b0 ,      /* Absolute time of release portion of envelope */\
\
	
\b MK_ampEnv
\b0 ,       /* Amplitude envelope */\
	
\b MK_amp0
\b0 ,         /* Amplitude when the envelope is at 0.  
\b MK_amp
\b0  is amplitude when the envelope is at 1. \
                                                                           
\b MK_amp1
\b0  is a synonym for 
\b MK_amp
\b0 . */\
	
\b MK_ampAtt
\b0 ,       /* Absolute time of attack portion of envelope */\
	
\b MK_ampRel
\b0 ,       /* Absolute time of release portion of envelope */\
\
	
\b MK_bearingEnv
\b0 ,   /* Bearing envelope */\
	
\b MK_bearing0
\b0 ,     /* Bearing when the envelope is at 0. 
\b MK_bearing
\b0  is bearing when envelope is at 1.\
	                                       
\b MK_bearing1
\b0  is a synonym for MK_bearing. */\
\
	
\b MK_brightEnv
\b0 ,    /* Brightness envelope */\
	
\b MK_bright0
\b0 ,      /* Brightness when the envelope is at 0.  
\b MK_brightness
\b0  is brightness when envelope is at 1.\
	                                     
\b MK_brightness1
\b0  is a synonym for MK_brightness. */\
	
\b MK_brightAtt
\b0 ,    /* Absolute time of attack portion of envelope */\
	
\b MK_brightRel
\b0 ,    /* Absolute time of release portion of envelope */\
\
	
\b MK_waveformEnv
\b0 ,  /* WaveTable interpolation envelope */\
	
\b MK_waveform0
\b0 ,    /* WaveTable when the envelope is at 0.  
\b MK_waveform
\b0  is WaveTable when the envelope is at \
			                                  1.    
\b MK_waveform1
\b0  is a synonym for 
\b MK_waveform
\b0 . */\
	
\b MK_waveformAtt
\b0 ,  /* Absolute time of attack portion of envelope */\
	
\b MK_waveformRel
\b0 ,  /* Absolute time of release portion of envelope */\
\

\i 	Additional parameters needed for fm envelopes.\

\i0     \
	
\b MK_c2AmpEnv
\b0 ,     /* Amplitude envelope for second carrier. Defaults to 
\b MK_ampEnv
\b0 . */\
	
\b MK_c2Amp0
\b0 ,       /* Amplitude when envelope == 0. 
\b MK_c2Amp
\b0  is amplitude when envelope == 1.\
	                                       
\b MK_c2Amp1
\b0  is synonym for 
\b MK_c2Amp
\b0 . */\
	
\b MK_c2AmpAtt
\b0 ,     /* Absolute time of attack portion of envelope */\
	
\b MK_c2AmpRel
\b0 ,     /* Absolute time of release portion of envelope */\
	
\b MK_c3AmpEnv
\b0 ,     /* Amplitude envelope for second carrier. Defaults to 
\b MK_ampEnv
\b0 . */\
	
\b MK_c3Amp0
\b0 ,       /* Amplitude when envelope == 0. 
\b MK_c3Amp
\b0  is amplitude when envelope == 1.\
		                                     
\b MK_c3Amp1
\b0  is synonym for 
\b MK_c3Amp
\b0 . */\
	
\b MK_c3AmpAtt
\b0 ,     /* Absolute time of attack portion of envelope */\
	
\b MK_c3AmpRel
\b0 ,     /* Absolute time of release portion of envelope */\
	
\b MK_m1IndEnv
\b0 ,     /* Frequency modulation index envelope. */\
	
\b MK_m1Ind0
\b0 ,       /* Modulation index when envelope is at 0.  
\b MK_m1Ind
\b0  is index when envelope is at 1.\
                                                                               
\b MK_m1Ind1
\b0  is synonym for 
\b MK_m1Ind
\b0 . */\
	
\b MK_m1IndAtt
\b0 ,     /* Absolute time of attack portion of envelope */\
	
\b MK_m1IndRel
\b0 ,     /* Absolute time of release portion of envelope */\
	
\b MK_m2IndEnv
\b0 ,     /* Same as above for second modulator. */\
	
\b MK_m2Ind0
\b0 ,\
	
\b MK_m2IndAtt
\b0 ,    \
	
\b MK_m2IndRel
\b0 ,    \
	
\b MK_m3IndEnv
\b0 ,     /* etc. */\
	
\b MK_m3Ind0
\b0 ,\
	
\b MK_m3IndAtt,    \
	MK_m3IndRel,    \
	MK_m4IndEnv,\
	MK_m4Ind0,\
	MK_m4IndAtt,    \
	MK_m4IndRel,\

\b0 \

\i 	Additional parameters needed when applying envelopes to vibrato.\

\i0                \
	
\b MK_svibFreqEnv
\b0 ,\
	
\b MK_svibFreq0
\b0 ,       /* 
\b MK_svibFreq1 == MK_svibFreq
\b0  */\
	
\b MK_rvibFreqEnv
\b0 ,\
	
\b MK_rvibFreq0
\b0 ,       /* 
\b MK_rvibFreq1 == MK_rvibFreq 
\b0 */\
	
\b MK_indSvibFreqEnv
\b0 ,\
	
\b MK_indSvibFreq0
\b0 ,    /* 
\b MK_indSvibFreq1 == MK_indSvibFreq
\b0  */\
	
\b MK_indRvibFreqEnv
\b0 ,\
	
\b MK_indRvibFreq0
\b0 ,    /* 
\b MK_indRvibFreq1 == MK_indRvibFreq
\b0  */\
\
	
\b MK_svibAmpEnv
\b0 ,\
	
\b MK_svibAmp0
\b0 ,        /* 
\b MK_svibAmp1 == MK_svibAmp
\b0  */\
	
\b MK_rvibAmpEnv
\b0 ,\
	
\b MK_rvibAmp0
\b0 ,        /* 
\b MK_rvibAmp1 == MK_rvibAmp
\b0  */\
	
\b MK_indSvibAmpEnv
\b0 ,\
	
\b MK_indSvibAmp0
\b0 ,     /* 
\b MK_indSvibAmp1 == MK_indSvibAmp 
\b0 */\
	
\b MK_indRvibAmpEnv
\b0 ,\
	
\b MK_indRvibAmp0
\b0 ,     /* 
\b MK_indRvibAmp1 == MK_indRvibAmp
\b0  */\
    \
	
\b MK_noiseAmpEnv
\b0 ,\
	
\b MK_noiseAmp0
\b0 ,       /* Amplitude of noise generator when envelope is 0.  
\b MK_noiseAmp
\b0  is amplitude when \
			                                       envelope is at 1.    
\b MK_noiseAmp1
\b0  is synonym for 
\b MK_noiseAmp
\b0 . */\
	
\b MK_noiseAmpAtt
\b0 ,     /* Attack and decay values for noiseAmp envelope */\
	
\b MK_noiseAmpRel
\b0 ,\
	
\b MK_noiseFreqEnv
\b0 ,\
	
\b MK_noiseFreq0
\b0 ,      /* Frequency of noise generator when envelope is 0.  
\b MK_noiseFreq
\b0  is frequency when \
	                                              envelope is at 1.    
\b MK_noiseFreq1
\b0  is synonym for 
\b MK_noiseFreq
\b0 . */\
    \

\i 	The following are currently not supported explicitly by any Music Kit class. However, by convention, they may \
	appear in Part info notes to associate information with a Part.\

\i0 \
	
\b MK_synthPatch
\b0 ,        /* A suggested synthPatch class which the app may want to assign to a SynthInstrument */\
	
\b MK_synthPatchCount
\b0 ,   /* A suggested count of manually allocated SynthPatches of the type specified by\
	                                                        
\b MK_synthPatch
\b0  and the default template. */\
	
\b MK_midiChan
\b0 ,          /* A suggested midi channel to which the app may want to connect to playing this part on \
                                                                                      MidiOut. */\
	
\b MK_track
\b0 ,             /* Track number. Set in Part info when a midifile is read.*/ \
\

\i 	The following are currently not supported explicitly by any Music Kit class. However, by convention, they may \
	appear in Score info notes to associate information with a Score.\

\i0 \
	
\b MK_title
\b0 ,            /* A name for the piece. Used in Score info. */\
	
\b MK_samplingRate
\b0 ,     /* Suggested DSP sampling rate to be used. For real-time synthesis with the NeXT \
			                                          hardware, this must be 44100 or 22050.   For DSP serial port devices, this may be\
	                                                  other values. */\
	
\b MK_headroom
\b0 ,         /* Suggested "headroom" on DSP synthesis in the range (-1:1). The headroom determines how \
                                                                                      conservative the Orchestra is when allocating resources. See the Orchestra class for \
	                                             details. */\
	
\b MK_tempo
\b0 ,            /* Suggested performance tempo for the default conductor. When a MIDI file is read, this \
	                                        parameter appears in the score info note if the MIDI file has a tempo specified. */\
	
\b MK_vibWaveform
\b0 ,      /* Periodic vibrato waveform */\
\

\i 	The following parameters are used primarily in reading/writing Standard MIDI files. See Standard MIDI file 1.0 \
	Specification for details. \
\

\i0 	
\b MK_sequence
\b0 ,         /* Sequence number may be in the Part info. */  \
	
\b MK_text
\b0 ,             /* Any text describing anything. */\
	
\b MK_copyright
\b0 ,        /* Copyright notice. May be in Score info */\
	
\b MK_lyric
\b0 ,            /* Lyric to be sung */\
	
\b MK_marker
\b0 ,           /* Rehearsal letter or section name */\
	
\b MK_cuePoint
\b0 ,         /* Description of something happening on film. */\
	
\b MK_smpteOffset
\b0 ,      /* SMPTE time at which the track starts. May be in Score info. Encoded as a string of five \
	                                              hex  numbers, separated by spaces. See MIDI file spec */\
	
\b MK_timeSignature
\b0 ,    /* Encoded as a string of 4 hex numbers, separated by spaces. See MIDI file spec. */\
	
\b MK_keySignature
\b0 ,     /* Encoded as a string of 2 hex numbers, separated by a space. See MIDI file spec. */\
	
\b MK_instrumentName
\b0 ,   /* Instrumentation to be used in the track */\
\

\i 	The following parameter is needed to support rests with durations--a mute note with a MK_restDur parameter is \
	assumed to be a rest.\

\i0 \
	
\b MK_restDur
\b0 ,          \
\
   	
\b MK_privatePars
\b0 ,      /* Marker for private Music Kit parameter block */\
                         	/* Parameters 
\b MK_privatePars
\b0  to 
\b MK_appPars
\b0  are reserved. */\
    	
\b MK_appPars
\b0   = 192    /* End marker. Must be evenly divisible by 32. */\
 	 \} 
\b MKPar
\b0 ;\

\f4\b\fs20\fc0\cf0 \

\pard\fs28\li2100\fc0\cf0 \
\
\
\
MKPerformerStatus\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Performer.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum 
\b _MKPerformerStatus
\b0  \{     			
\b MK_inactive
\b0 ,\
    			
\b MK_active
\b0 ,\
    			
\b MK_paused
\b0 \
  		\} 
\b MKPerformerStatus
\b0 ;\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \

\pard\tx2860\tx3620\tx4380\f0\b0\li2100\fc0\cf0 \

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the state of a Performer.  A Performer may be in one of the following three states:
\b \

\pard\tx6640\tx8160\b0\li2480\fc0\cf0 \
MK_inactive	Not yet activated or already deactivated.\
MK_active	Performer has been activated.   Performer is either performing (if [Conductor \
	startPerformance] has been invoked), or will start performing when the \
	performance starts (as soon as [Conductor startPerformance] is invoked.)\
MK_paused	Performer was activated, then paused.\
\
\

\pard\f4\b\li2100\fc0\cf0 \
\
MKPhraseStatus\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Performer.h\

\fs16 \
\

\pard\tx1720\tx2100\tx2860\fs28\fc0\cf0 	SYNOPSIS		typedef enum 
\b _MKPhraseStatus
\b0  \{\
   			
\b MK_phraseOn
\b0 ,\
    			
\b MK_phraseOnPreempt
\b0 ,\
    			
\b MK_phraseRearticulate
\b0 ,\
  			 
\b MK_phraseUpdate
\b0 ,\
    			
\b MK_phraseOff
\b0 ,\
    			
\b MK_phraseOffUpdate
\b0 ,\
   			 
\b MK_phraseEnd
\b0 ,\
        			
\b MK_noPhraseActivity
\b0 \}\
		
\b MKPhraseStatus
\b0 ;\
\
\

\pard\f4\b\fs16\li2100\fc0\cf0 \

\pard\tx2860\tx3620\tx4380\f0\b0\li2100\fc0\cf0 \

\pard\tx1720\tx2100\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\b0\fs28 This enumeration defines the state of a SynthPatch and is designed for use in a SynthPatch subclass implementation.  Each instance of SynthPatch performs a single musical voice.  The 
\b MKPhraseStatus 
\b0 defines where in the phrase that voice is.  The method 
\b phraseStatus
\b0  returns one of these values.  Note that if a SynthPatch is not in one of the subclass methods 
\b noteOnSelf:, noteOffSelf:, noteUpdateSelf:, 
\b0 or
\b  noteEndSelf
\b0 , the method 
\b phraseStatus 
\b0 returns 
\b MK_noPhraseActivity.\

\pard\tx6640\tx8160\b0\li2480\fc0\cf0 \
MK_phraseOn	SynthPatch is processing a noteOn for a new phrase.\
MK_phraseOnPreempt	SynthPatch is processing a noteOn for a preempted phrase.  That is, a phrase\
	for another noteTag was preempted because there were not enough DSP\
	resources available to play the new note.  \
MK_phraseOnRearticulate	SynthPatch is processing a noteOn for a rearticulation of an existing phrase.\
	That is, a noteOn has been received for a noteTag that is already in the process\
	of playing a phrase.\
MK_phraseUpdate	SynthPatch is processing a noteUpdate for a phrase that has received a noteOn \
	but has not yet received a noteOff.\
MK_phraseOff	SynthPatch is processing a noteOff.\
MK_phraseOffUpdate	SynthPatch is processing a noteUpdate for a phrase that has received a noteOff. \
MK_phraseEnd	SynthPatch is executing the 
\b noteEnd
\b0  method.\
MK_noPhraseActivity	SynthPatch is not currently executing any of the methods 
\b noteOnSelf:, \
	noteOffSelf:, noteUpdateSelf, 
\b0 or 
\b noteEndSelf.\
\

\pard\f4\li2100\fc1\cf1 \
\
\
MKSynthStatus\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/orch.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef enum 
\b _MKSynthStatus
\b0  \{ 			
\b MK_idle
\b0 ,   			
\b MK_running
\b0 , 			
\b MK_finishing
\b0 , 			  \} 
\b MKSynthStatus
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 This enumeration specifies the status of UnitGenerator or SynthPatch objects.  There are three possible values:\
\

\pard\tx2860\tx7280\tx7520\fc0\cf0 	idle	Not in use.  Writing to sink (nowhere). \
	running	In use.  Has not yet received 
\b finish
\b0  or 
\b noteOff
\b0  message.\
	finishing	In final phase of operation, if any.  Has received 
\b finish 
\b0 or
\b  noteOff
\b0  \
		message.\
\

\pard\f4\b\li2100\fc1\cf1 \
\
\
MKTimeUnit\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/timeunits.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef enum 
\b _MKTimeUnit
\b0  \{\
			
\b MK_beat
\b0 ,\
			
\b MK_second
\b0 ,\
			
\b MK_timeTag
\b0 \
		\} 
\b MKTimeUnit
\b0 ;\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 \
	DESCRIPTION\
\

\pard\tx6640\tx8160\f0\b0\fs28\li2480\fc0\cf0 This enumeration specifies the manner in which time is recorded by ScorefileWriter, PartWriter and ScoreWriter classes.  The values are:\
\

\pard\tx2860\tx7280\tx7520\fc0\cf0 	beat	Time is stored in beats.\
	second	Time is stored in seconds. \
	timeTag	The time is taken from the timeTag in the Note itself.\
		Care must be taken when using this TimeUnitÐotherwise, out-of-order\
		Notes may result.\
	\

\pard\tx6640\tx8160\li2480\fc0\cf0 \

\pard\f4\b\li2100\fc1\cf1 \
\
MKUGArgStruct	\

\fs16\fc0\cf0 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/UnitGenerator.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx1740\tx2100\tx2860\tx5380\tx7660\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS			\

\pard\tx1720\tx2100\tx2860\f0\b0\fs28\fc1\cf1 		typedef struct 
\b _MKUGArgStruct
\b0  \{        			MKOrchAddrStruct 
\b addrStruct
\b0 ;   \
			DSPMemorySpace 
\b addressMemSpace
\b0 ;\
			DSPLongDatum 
\b curVal
\b0 ; \
                     			BOOL 
\b initialized
\b0 ; 			int 
\b type
\b0 ; \} \
			
\b MKUGArgStruct
\b0 ;\

\pard\tx2860\tx3620\tx4380\b\fs16\li2100\fc0\cf0 \

\pard\tx1720\tx2100\b0\fi-2020\li2100\fc0\cf0 \

\f4\b\fs20 	DESCRIPTION	
\f0\fs28 MKUGArgStruct
\b0  is the structure that represents each DSP unit generator memory argument.  All fields are private and should not be altered.  The meaning of the fields is as follows:\
\

\pard\tx6640\tx8160\b\li2480\fc0\cf0 addrStruct
\b0  	Specifies location of the argument on the DSP.\

\b\fc1\cf1 addressMemSpace
\b0\fc0\cf0 	For address-valued memory arguments, this is the memory space where the DSP \
	code assumes the address is located.   \
	For datum-valued memory arguments, 
\b addressMemSpace 
\b0 is DSP_MS_N.\

\b curVal	
\b0 Most-recently sent value for this argument.  If type is not long, low order word\
	is ignored.\

\b initialized	
\b0 YES if a value has been sent to the DSP since the object was instantiated.\

\b type	
\b0 Unused.\
\

\pard\tx1720\tx2100\fs16\fi-2020\li2100\fc0\cf0 \

\pard\f4\b\li2100\fc0\cf0 \

\fs28 \

\fs16 \

\fs56 Symbolic Constants\

\fs16 \
\
\
\
\
\

\fs28 Delta T Constants\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Conductor.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant		Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_DELTAT_DEVICE_LAG		Commands to device have an offset added to\
							their time.\
	MK_DELTAT_SCHEDULER_ADVANCE	Scheduler (Conductor) subtracts offset from\
							the time it uses internally to schedule messages.\
	\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 These constants control the 
\i deltaT mode
\b .  
\b0\i0 See 
\b Conductor.rtf 
\b0 and the Performance Concepts documentation for details.\

\fs16 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
\
Conductor Constants
\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Conductor.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_ENDOFTIME	Largest time value that may be scheduled with the Conductor.\
		MK_UNTIMED	DSP commands are executed as soon as they are sent.\
	MK_TIMED	DSP commands are executed at the time of their time-stamp.\
	MK_SOFTTIMED	Obsolete.\
\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 MK_UNTIMED and MK_TIMED are arguments for the Conductor 
\b setTimed: 
\b0 method.   MK_ENDOFTIME is widely used to specify the largetst time value that may be scheduled.  See 
\b Conductor.rtf 
\b0 and the Performance Concepts documentation for details.\

\fs16 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
\
Invalid 
\i double
\i0  Constant
\fs16 \

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	\
	DECLARED IN	
\f0\b0\fs28 musickit/noDVal.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_NODVAL	Special 
\i double 
\i0 value that means "invalid value."\
	\

\pard\tx1720\tx2100\fi-2020\li2100\fc1\cf1 	
\f4\b\fs20 DESCRIPTION
\f0\b0\fs28 	Music Kit methods that return a value of type 
\i double 
\i0 and want to signal an invalid value return MK_NODVAL, which stands for 
\b N
\b0 o 
\b D
\b0 ouble 
\b VAL
\b0 ue.   This is not an actual valid floating point number.  It is a particular non-signaling "NAN" (not a number.)  Therefore, it can not be compared using ==.  You must use the special functions defined in 
\b noDVal.h
\b0 .\

\fs16\fc0\cf0 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
\
Midi Time Code Constants\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/MTCPerformer.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_MTC_FORMAT_24	24 frame/sec. MIDI Time code format\
	MK_MTC_FORMAT_25	25 frame/sec. MIDI Time code format\
	MK_MTC_FORMAT_DROP_30	30 frame/sec., drop frame. MIDI Time code format\
	MK_MTC_FORMAT_30	30 frame/sec., non-drop frame. MIDI Time code format\
	MK_MTC_FORWARD	Forward MIDI Time code direction.\
	MK_MTC_REVERSE	Reverse MIDI Time code direction.\

\pard\tx1720\tx1740\tx1740\tx1740\tx2100\tx2100\tx6140\tx10180\fs16\li100\fc0\cf0 \

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 These constants define the MIDI Time code formats and directions used by the MTCPerformer class.
\fs16 \

\b \

\b0 \
\
\

\f4\b\fs20 	
\fs28 Orchestra
\pard\li2100\fc0\cf0  Constants\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Orchestra.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Value\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	
\fc1\cf1 MK_nextCompatibleDSPPort	1\
		MK_hostSoundOut	2\
		MK_serialSoundOut	4\
		MK_serialSoundIn	8\
		MK_soundfileOut	16\
\

\pard\tx1720\tx1740\tx1740\tx1740\tx2100\tx2100\tx6140\tx10180\fs16\li100\fc0\cf0 \

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 These constants define the Orchestra capabilities bits returned by the Orchestra 
\b capabilities 
\b0 method.  
\fs16 \

\b \

\b0 \
\
\

\f4\b\fs20 	
\pard\fs16\li2100\fc0\cf0 \

\fs28 QuintProcessor Constants
\fs16 \

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	\
	DECLARED IN	
\f0\b0\fs28 musickit/ArielQP.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_DRAM_ZERO	Special QuintProcessor DRAM location that always holds a zero.\
	MK_DRAM_SINK	Special QuintProcessor DRAM location that acts as a "sink" or "bit bucket."\
	\

\pard\tx1720\tx2100\fi-2020\li2100\fc1\cf1 	
\f4\b\fs20 DESCRIPTION
\f0\b0\fs28 	These constants define special QuintProcessor DRAM locations .\

\fs16\fc0\cf0 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
\
Score Magic Constant
\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/musickit.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_SCOREMAGIC	Magic number at the start of an optimized scorefile\
	\

\pard\tx1720\tx2100\fi-2020\li2100\fc1\cf1 	
\f4\b\fs20 DESCRIPTION
\f0\b0\fs28 	Optimized scorefiles are stored in the file system with a
\i  .playscore
\i0  file name extension.  Such files are recognized programmatically by a unique 4-byte constant that starts the file.   MK_SCOREMAGIC gives this constant.  Note that binary scorefiles are always stored big-endian.\

\fs16\fc0\cf0 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
\
SynthInstrument Allocation Constants\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/SynthInstrument.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_AUTOALLOC	Automatic allocation from a global pool.\
	MK_MANUALALLOC	Allocation from a local, manually-allocated, pool.\
	MK_MIXEDALLOC	Hybrid between AUTO and MANUAL.  First tries local pool, then tries global pool.\
	
\pard\tx1720\tx1740\tx1740\tx1740\tx2100\tx2100\tx6140\tx10180\fs16\li100\fc0\cf0 \

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION\
\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\fs28\li100\fc1\cf1 	The steps performed by SynthInstrument for each of the allocation modes are given below:\
\
	MANUAL:\
			
\i 	1m. Look for idle patch of correct template.\
				2m. Else try and preempt patch of correct template.\
				3m. Else look for idle patch of incorrect template.\
				4m. Else try and preempt patch of incorrect template.\
	     5m. Else give up.\

\i0 \
	AUTO:\
			
\i 	1a. Try to alloc a new patch of correct template.\
				2a. Else try and preempt patch of correct template.\
				3a. Else try and preempt patch of incorrect template.\
				4a. Else give up.\

\i0 \
		MIXED\
				Same as MANUAL, except for the insertion of step 1m+ after 1m:\

\i 				1m+. Try to alloc a new patch of correct template.\

\i0 \

\pard\tx1720\tx2100\b\fs16\fi-2020\li2100\fc0\cf0 \

\b0 \
\
\

\f4\b\fs20 	
\pard\fs16\li2100\fc0\cf0 \

\fs28 Trace Constants\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/errors.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_TRACEORCHALLOC	DSP resource allocation\
	MK_TRACEPARS	Application-defined parameters\
	MK_TRACEDSP	DSP manipulation\
	MK_TRACEMIDI	MIDI manipulation\
	MK_TRACEPREEMPT	SynthPatch preemption\
	MK_TRACESYNTHINS	SynthInstrument mechanations\
	MK_TRACESYNTHPATCH	SynthPatch library messages\
	MK_TRACEUNITGENERATORUnitGenerator library messages\
	MK_TRACECONDUCTOR	Conductor time setting messages\
	MK_TRACEDSPARRAYS	DSP array-setting messages\

\pard\tx1720\tx1740\tx1740\tx1740\tx2100\tx2100\tx6140\tx10180\fs16\li100\fc0\cf0 \

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 To enable a set of messages, you pass a trace code to the 
\b MKSetTrace()
\b0  function.  You can enable more than one set with a single function call by bitwise-or'ing the codes.   Clearing a trace is done similarly, by passing codes to 
\b MKClearTrace()
\b0 .  The 
\b MKIsTraced()
\b0  function returns YES or NO as the argument code is or isn't currently traced.  These functions should only be used while you're debugging and fine-tuning your application.  \

\fs16 \

\fs28 		For more information on the constants and their meaning, see 
\b MusicFunctions.rtf.
\b0\fs16 \

\b \

\b0 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
Timbre Constant\

\fs16 \
\

\pard\tx1720\tx2100\fs20\fi-2020\li2100\fc0\cf0 	DECLARED IN	
\f0\b0\fs28 musickit/Conductor.h\

\fs16 \
\

\pard\tx1720\tx1740\tx1740\tx1740\tx1740\tx2100\tx6140\tx10180\f4\b\fs20\li100\fc0\cf0 	SYNOPSIS					
\fs28 Constant	Meaning\

\pard\tx2100\tx2100\tx2120\tx2320\tx2380\tx2680\tx6140\tx10180\f0\b0\li100\fc0\cf0 	MK_MAXTIMBRENAMELEN	Maximum length of the name of a Timbre object.\
	\

\pard\tx1720\tx2100\f4\b\fs20\fi-2020\li2100\fc0\cf0 	DESCRIPTION	
\f0\b0\fs28 See 
\b Timbre.rtf
\b0  for details.\

\fs16 \

\pard\f4\b\fs28\li2100\fc0\cf0 \
\
\

}
