{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fmodern Courier;}
\paperw12240
\paperh12580
\margl0
\margr0
{\colortbl;\red0\green0\blue0;}
\f0\b\i0\ulnone\ql\fs28\fi0\li720\gray0\fc0\cf0\up0\dn0 \
\
\
Music Kit Classes\
\
\
\
Conductor\
\

\b0\li1080 Conductor : Object\
\

\b \
Creating and Freeing a Conductor\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b allocFromZone
\b0 :(NXZone *)
\i zone
\i0 	Allocates memory for new Conductor, from specified zone, if not in performance\
+ 
\b alloc
\b0 	Allocates memory for new Conductor, from default zone,  if not in performance\

\f1 - 
\f0\b init
\b0 	Initializes a new Conductor\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *
\i zone
\i0 )	Same as
\b  [[self allocFromZone:
\b0\i zone
\b\i0 ] init]\

\f1\b0 -
\f0  
\b copy
\b0 	Same as
\b  [self copyFromZone:[self
\b0  
\b zone]]\

\pard\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b defaultConductor
\b0 	Returns the defaultConductor\
+ 
\b clockConductor
\b0 	Returns the clockConductor\
+ 
\b currentConductor
\b0 	Returns the Conductor that's sending a message, if any\
+ (BOOL)
\b inPerformance
\b0 	YES if a performance is in session\
+ (BOOL)
\b isPaused
\b0 	YES if the performance is paused\
+ (BOOL)
\b isClocked
\b0 	YES if performance is clocked\
+ (BOOL)
\b isEmpty
\b0 	YES if in performance and all queues are empty\
+ (BOOL)
\b finishWhenEmpty
\b0 	YES if the performance will finish when the queues are empty\
+ (double)
\b time
\b0 	Same as
\b  [[self clockConductor] time]\

\f1\b0 +
\f0  
\b delegate
\b0 	Returns the class delegate or 
\b nil 
\b0 if none\

\f1 +
\f0  (cthread_t)
\b performanceThread	
\b0 Returns the separate  performance thread  or NO_CTHREAD
\b  
\b0 if none\

\f1 -
\f0  (BOOL)
\b isPaused
\b0 	YES if the object is paused\

\f1 -
\f0  (double)
\b beatSize
\b0 	Returns the object's tempo in seconds per beat\

\f1 -
\f0  (double)
\b tempo
\b0 	Returns the object's tempo in beats per minute\

\f1 -
\f0  (double)
\b timeOffset
\b0 	Returns the object's performance time offset in seconds\

\f1 -
\f0  (double)
\b time
\b0 	Returns the object's notion of the current time in beats\

\f1 -
\f0  
\b delegate
\b0 	Returns the object's delegate or 
\b nil 
\b0 if none\

\f1 -
\f0  (BOOL)
\b isCurrentConductor
\b0 	YES if the object is sending a message\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b useSeparateThread
\b0 :(BOOL)
\i yesOrNo
\i0 	Controls whether performance is in separate C thread\
+ 
\b setThreadPriority:
\b0 (float)
\i priorityFactor	
\i0 Sets priority of performance thread\
+ 
\b setClocked:
\b0 (BOOL)
\i yesOrNo
\i0 	Establishes clocked or unclocked performance\
+ 
\b setFinishWhenEmpty:
\b0 (BOOL)
\i yesOrNo
\i0 	Establishes behavior with regard to empty queues\

\f1 -
\f0\b  emptyQueue
\b0 	Empties the object's message queue\

\f1 -
\f0\b  setDelegate:
\b0\i object
\i0 	Sets the delegate to be
\i  object\

\pard\b\i0\li1080\fc0\cf0 \
\
Controlling a Performance\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b startPerformance
\b0 	Starts a performance\
+ 
\b finishPerformance
\b0 	Ends the performance\
+ 
\b pausePerformance
\b0 	Pauses the performance\
+ 
\b resumePerformance
\b0 	Resumes the performance\
+ 
\b lockPerformance
\b0 	Locks the performance and sends 
\b [self adjustTime]\

\b0 + 
\b lockPerformanceNoBlock
\b0 	Locks performance, if possible, otherwise returns 
\b nil\

\b0 + 
\b unlockPerformance
\b0 	Unlocks performance and sends any buffered DSP commands\

\f1 - 
\f0\b pause
\b0 	Pauses the object's performance\

\f1 -
\f0  
\b pauseFor:
\b0 (double)
\i seconds
\i0 	Pauses the object's performance for 
\i seconds 
\i0 seconds\

\f1 -
\f0  
\b resume
\b0 	Resumes the object's performance\

\pard\b\li1080\fc0\cf0 \
\
Manipulating Time\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b adjustTime
\b0 	Updates every Conductor's notion of the current time\

\f1 -
\f0  (double)
\b setBeatSize:
\b0 (double)
\i newBeatSize
\i0 \
	Sets the tempo by resizing the beat \

\f1 -
\f0  (double)
\b setTempo:
\b0 (double)
\i newTempo
\i0 \
	Sets the tempo in beats per minute\

\f1 -
\f0  (double)
\b setTimeOffset:
\b0 (double)
\i newTimeOffset
\i0 \
	Sets the object's performance time offset in seconds\

\f1 -
\f0  (double)
\b predictTime:
\b0 (double)
\i beatTime
\i0 \
	Returns predicted time in seconds corresponding to 
\i beatTime\

\pard\b\i0\li1080\fc0\cf0 \
\
Requesting Messages\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b sel:
\b0 (SEL)
\i aSelector	
\i0 Sends 
\i aSelector
\i0  to 
\i toObject
\i0  after 
\i beats
\i0  beats\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b to:
\b0\i toObject\

\i0 	
\b withDelay:
\b0 (double)
\i beats\

\i0 	
\b argCount:
\b0 (int)
\i argCount,...\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b sel:
\b0 (SEL)
\i aSelector	
\i0 Sends 
\i aSelector
\i0  to 
\i toObject
\i0  at time 
\i time\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b to:
\b0\i toObject\

\i0 	
\b atTime:
\b0 (double)
\i time\

\i0 	
\b argCount:
\b0 (int)
\i argCount,...\

\pard\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 + (MKMsgStruct *)
\b afterPerformanceSel:
\b0 (SEL)
\i aSelector\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b to:
\b0\i toObject
\i0 	\
	
\b argCount:
\b0 (int)
\i argCount,...	
\i0 Sends 
\i aSelector
\i0  to 
\i toObject
\i0  after the performance
\i \

\pard\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 + (MKMsgStruct *)
\b beforePerformanceSel:
\b0 (SEL)
\i aSelector\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b to:
\b0\i toObject
\i0 	\
	
\b argCount:
\b0 (int)
\i argCount,...	
\i0 Sends 
\i aSelector
\i0  to 
\i toObject
\i0  after the performance
\i \

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b finishUnarchiving
\b0 	Used by unarchiver to finish unarchiving object\

\pard\b\li1080\fc0\cf0 \
\
Implemented by the Class Delegate\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b conductorCrossedLowDeltaTThreshold:
\b0\i sender
\i0 \
	Sent to the delegate when the delta time
\i  
\i0 falls below the low threshold\

\f1 -
\f0  
\b conductorCrossedHighDeltaTThreshold:
\b0\i sender
\i0 \
	Sent to the delegate when the delta time
\i  
\i0 crosses  the high threshold\

\pard\b\li1080\fc0\cf0 \
\
Implemented by the Instance Delegate\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b conductorDidPause:
\b0\i sender
\i0 	Sent to the delegate when the Conductor pauses \

\f1 -
\f0  
\b conductorDidResume:
\b0\i sender
\i0 	Sent to the delegate when the Conductor resumes\

\pard\b\li720\fc0\cf0 \
\
\
DSPSerialPortDevice\
\

\b0\li1080 DSPSerialPortDevice : Object\
\

\pard\tx7140\li2100\fc0\cf0 \

\pard\b\li1080\fc0\cf0 Sampling Rates Supported\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  
\b0 (double)
\b defaultSamplingRate
\b0 	Returns default sampling rate\

\f1 -
\f0  (BOOL)
\b hardwareSupportsSamplingRate:
\b0 (double)
\i rate\
	
\i0 Returns YES if the specified rate is supported by the hardware.\

\f1 -
\f0  (BOOL)
\b supportsHalfSamplingRate:
\b0 (double)rate\
	Returns YES if the specified rate is supported by software.\
± (BOOL)
\b supportsSamplingRate:
\b0 (double)
\i rate\
	
\i0 Returns YES if the specified rate is supported by hardware or software.\

\pard\b\li1080\fc0\cf0 \
Sample Skips\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (int)
\b inputSkip
\b0 	Returns input skip (sample increment)\

\f1 -
\f0\fc1\cf1 (int)
\b\fc0\cf0 outputSkip
\b0\i 	
\i0 Returns output skip (sample increment)\
\

\pard\b\li1080\fc0\cf0 Sending Commands to the DSP\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b applySettings:
\b0 (id)
\i orchestra
\i0 	Returns input skip (sample increment)\

\f1 -
\f0\b\fc1\cf1 getSerialPortSetup:
\b0 (DSPSerialPortParameters *)
\i p  \
	
\i0 Returns by reference the low-level DSP serial port parameters.
\fc0\cf0 \

\pard\b\li720\fc0\cf0 \
StealthDAI2400\
\

\b0\li1080 StealthDAI2400 : DSPSerialPortDevice : Object\
\

\pard\tx7140\li2100\fc0\cf0 \

\pard\b\li1080\fc0\cf0 Settings\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  setEmphasis:
\b0 (BOOL)
\i yesOrNo
\i0 	Sets empahsis bit.\

\f1 -
\f0  
\b setCopyProhibit:
\b0 (BOOL)
\i yesOrNo	
\i0 Sets copy prohibit bit.
\i \

\pard\b\i0\li720\fc0\cf0 \
SSAD64x\
\

\b0\li1080 SSAD64x : DSPSerialPortDevice : Object\
\

\pard\tx7140\li2100\fc0\cf0 \

\pard\b\li1080\fc0\cf0 Settings\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  setProfessional:
\b0 (BOOL)
\i yesOrNo
\i0 	Sets whether pro (AES/EBU) or consumer (SPDIF) mode is enabled.\

\pard\b\li720\fc0\cf0 \
\
Envelope\
\

\b0\li1080 Envelope : Object\
\

\b \
Creating and Freeing an Envelope\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns an Envelope as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\f1 -
\f0  
\b free
\b0 	Frees the object and its contents\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setStickPoint:
\b0 (int)
\i sp
\i0 	Sets the object's stickpoint to the 
\i sp
\i0 'th point\

\f1 -
\f0  
\b setPointCount:
\b0 (int)
\i n	
\i0 Sets the object's x, y, and smoothing values\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b xArray:
\b0 (double *)
\i xPtr\

\i0 	
\b orSamplingPeriod:
\b0 (double)
\i period\

\i0 	
\b yArray:
\b0 (double *)
\i yPtr\

\i0 	
\b smoothingArray:
\b0 (double *)
\i smoothingPtr\

\i0 	
\b orDefaultSmoothing:
\b0 (double)
\i smoothing\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setPointCount:
\b0 (int)
\i n	
\i0 Sets the object's x and y values\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b xArray:
\b0 (double *)
\i xPtr\

\i0 	
\b yArray:
\b0 (double *)
\i yPtr\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (int)
\b pointCount
\b0 	Returns the number of points in the object\

\f1 -
\f0  (double)
\b defaultSmoothing
\b0 	Returns the default smoothing, or 
\b MK_NODVAL
\b0  if there's a smoothing array\

\f1 -
\f0  (double)
\b samplingPeriod
\b0 	Returns the sampling period, or 
\b MK_NODVAL
\b0  if there's an x array\

\f1 -
\f0  (int)
\b stickPoint
\b0 	Returns the stickpoint, or 
\b MAXINT
\b0  if none\

\f1 -
\f0  (double *)
\b yArray
\b0 	Returns a pointer to the object's y array\

\f1 -
\f0  (double *)
\b xArray
\b0 	Returns a pointer to the object's x array\

\f1 -
\f0  (double *)
\b smoothingArray
\b0 	Returns a pointer to the object's smoothing array\

\f1 -
\f0  (MKEnvStatus)
\b getNth:
\b0 (int)
\i n	
\i0 Returns info for the 
\i n
\i0 'th point in the object\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b x:
\b0 (double *)
\i xPtr\

\i0 	
\b y:
\b0 (double *)
\i yPtr\

\i0 	
\b smoothing:
\b0 (double *)
\i smoothingPtr\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double)
\b lookupYForX:
\b0 (double)
\i xVal
\i0 	Returns the y value for 
\i xVal
\i0 , interpolating as needed\

\f1 -
\f0  (double)
\b releaseDur
\b0 	Returns the object's release duration in seconds\

\f1 -
\f0  (double)
\b attackDur
\b0 	Returns the object's attack duration in seconds\

\f1 -
\f0  
\b writeScorefileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Writes the object in ASCII scorefile format to the open stream 
\i aStream\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use
\b  NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
FilePerformer\
\

\b0\li1080 FilePerformer : Performer : Object\
\

\b \
Creating a FilePerformer\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setFile:
\b0 (char *)
\i aName
\i0 	Associates the object with file 
\i aName\

\f1\i0 -
\f0  
\b setStream:
\b0 (NXStream *)
\i aStream
\i0 	Sets the object's stream pointer to 
\i aStream\

\f1\i0 -
\f0  
\b setFirstTimeTag:
\b0 (double)
\i aTimeTag
\i0 	Sets 
\b firstTimeTag
\b0  to 
\i aTimeTag\

\f1\i0 -
\f0  
\b setLastTimeTag:
\b0 (double)
\i aTimeTag
\i0 	Sets 
\b lastTimeTag
\b0  to 
\i aTimeTag\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (NXStream *)
\b stream
\b0 	Returns the object's stream pointer\

\f1 -
\f0  (char *)
\b file
\b0 	Returns the name set through 
\b setFile:\

\b0 + (char **)
\b fileExtension
\b0 	Returns array of file extensions; defined in subclasses\
+ (char *)
\b fileExtensions
\b0 	Returns the default file extension; defined in subclasses\

\f1 -
\f0  (double)
\b firstTimeTag
\b0 	Returns the object's 
\b firstTimeTag
\b0  value\

\f1 -
\f0  (double)
\b lastTimeTag
\b0 	Returns the object's 
\b lastTimeTag
\b0  value\

\pard\b\li1080\fc0\cf0 \
\
Performing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b activateSelf
\b0 	Prepares the receiver for a performance\

\f1 -
\f0  
\b perform
\b0 	Gets a Note from the object's file and performs it\

\f1 -
\f0  
\b performNote:
\b0\i aNote
\i0 	Performs 
\i aNote
\i0 ; subclass responsibility\

\f1 -
\f0  
\b nextNote
\b0 	Gets the next Note from the file; subclass responsibility\

\f1 -
\f0  
\b initializeFile
\b0 	Prepares the file for a performance\

\f1 -
\f0\b  deactivateSelf
\b0 	Cleans up after a performance\

\f1 - 
\f0\b finishFile
\b0 	Wraps up the file after a performance\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
FileWriter\
\

\b0\li1080 FileWriter : Instrument : Object\
\

\b \
Creating a FileWriter\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Returns a copy of the object with 
\b NULL
\b0  file name and stream pointer\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setFile:
\b0 (char *)
\i aName
\i0 	Associates the object with the file 
\i aName\

\f1\i0 -
\f0  
\b setStream:
\b0 (NXStream *)
\i aStream
\i0 	Points the object's stream pointer to 
\i aStream\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (char *)
\b fileExtension
\b0 	Returns the default file extension; defined in subclasses\

\f1 - 
\f0 (char *)
\b fileExtension
\b0 	Returns the file extension; defined in subclasses\

\f1 -
\f0  (NXStream *)
\b stream
\b0 	Returns the object's stream pointer\

\f1 -
\f0  (char *)
\b file
\b0 	Returns the name set through 
\b setFile:\

\pard\li1080\fc0\cf0 \
\
Performing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b finishFile
\b0 	Cleans up after a performance\

\f1 -
\f0  
\b initializeFile
\b0 	Prepares the file for writing\

\f1 -
\f0  
\b firstNote:
\b0\i aNote
\i0 	You never invoke this method\

\f1 -
\f0  
\b afterPerformance
\b0 	You never invoke this method\

\pard\b\li1080\fc0\cf0 \
\
Accessing Time\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setTimeUnit:
\b0 (MKTimeUnit)
\i aTimeUnit
\i0 \
	Sets the unit in which the object marks time (beats or seconds)\

\f1 -
\f0  (MKTimeUnit)
\b timeUnit
\b0 	Returns the unit in which the object marks time\

\f1 -
\f0  
\b setTimeShift:
\b0 (double)
\i timeShift
\i0 	Sets the object's performance time offset to 
\i timeShift\

\f1\i0 -
\f0  (double)
\b timeShift	
\b0 Returns the object's performance time offset\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
Instrument\
\

\b0\li1080 Instrument : Object\
\

\b \
Creating and Freeing an Instrument\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes the object\

\f1 -
\f0  
\b free
\b0 	Frees the object and its NoteReceivers\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b addNoteReceiver:
\b0\i aNoteReceiver
\i0 	Adds 
\i aNoteReceiver
\i0  to the object\

\f1 -
\f0  
\b removeNoteReceiver:
\b0\i aNoteReceiver
\i0 \
	Removes 
\i aNoteReceiver
\i0  from the object\

\f1 -
\f0  
\b freeNoteReceivers
\b0 	Removes and frees the object's NoteReceivers\

\f1 -
\f0  
\b removeNoteReceivers
\b0 	Removes all the object's NoteReceivers\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b noteReceivers
\b0 	Returns a copy of the object's List of NoteReceivers\

\f1 -
\f0  (BOOL )
\b isNoteReceiverPresent:
\b0\i aNoteReceiver
\i0 \
	Returns YES if the object contains 
\i aNoteReceiver\

\f1\i0 -
\f0  (BOOL )
\b inPerformance
\b0 	Returns YES if the object is in performance\

\f1 -
\f0  
\b noteReceiver
\b0 	Returns the object's first NoteReceiver\

\pard\b\li1080\fc0\cf0 \
\
Performing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b realizeNote:
\b0\i aNote	
\i0 Realizes 
\i aNote
\i0 . You never invoke this method.\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b fromNoteReceiver:
\b0\i aNoteReceiver\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b firstNote:
\b0\i aNote
\i0 	Received just before the first Note is realized\

\f1 -
\f0  
\b afterPerformance	
\b0 Invoked automatically after the performance is finished\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
Midi\
\

\b0\li1080 Midi : Object\
\

\b \
Creating and Freeing a Midi\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b newOnDevice:
\b0 (char *)
\i devName
\i0 	Creates a new object for the  serial port 
\i devName\

\i0 + 
\b new
\b0 	Creates a new object on ªmidi1º\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setOutputTimed:
\b0 (BOOL)
\i yesOrNo
\i0 	Establishes the object's timing\

\f1 -
\f0  
\b setUseInputTimeStamps:
\b0 (BOOL)
\i yesOrNo
\i0 \
	Establishes whether the Conductor is synched to MIDI\

\f1 -
\f0  
\b ignoreSys:
\b0 (MKMidiParVal)
\i param
\i0 	Sets the object to ignore the specified MIDI message\

\f1 -
\f0  
\b acceptSys:
\b0 (MKMidiParVal)
\i param
\i0 	Sets the object to accept the specified MIDI message\

\f1 -
\f0  
\b setLocalDeltaT:
\b0 (double)
\i value
\i0 	Sets the object's local delta time\

\f1 -
\f0  
\b setMergeInput:
\b0 (BOOL)
\i yesOrNo	
\i0 Sets whether object sends all input to NoteSender 0\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\fi-4680\li5760\fc1\cf1 + 
\b0 (int)
\b getDriverNames:
\b0 (char ***n) 
\b units:
\b0 (int **)u
\b \
	
\b0 Returns
\b  
\b0 number of added Intel drivers and (by reference) arrays of their names and units.
\b \

\f1\b0\fc0\cf0 -
\f0  
\b conductor
\b0 	Returns the clockConductor\

\f1 -
\f0  (MKDeviceStatus)
\b deviceStatus
\b0 	Returns the object's status\

\f1 -
\f0  (BOOL)
\b outputIsTimed
\b0 	Returns YES if the object is timed\

\f1 -
\f0  
\b channelNoteSender:
\b0 (unsigned)
\i n
\i0 	Returns the NoteSender for channel 
\i n\

\f1\i0 -
\f0  
\b channelNoteReceiver:
\b0 (unsigned)
\i n
\i0 	Returns the NoteReceiver for channel 
\i n\

\f1\i0 -
\f0  (int)
\b driverUnit
\b0 	Returns the Intel driver unit number.\

\f1 -
\f0  
\b noteReceiver
\b0 	Returns the default NoteReceiver\

\f1 -
\f0  
\b noteReceivers
\b0 	Returns a List of the object's NoteReceivers\

\f1 -
\f0  
\b noteSender
\b0 	Returns the default NoteSender\

\f1 -
\f0  
\b noteSenders
\b0 	Returns a List of the object's NoteSenders\

\f1 -
\f0  (BOOL)
\b useInputTimeStamps
\b0 	Returns YES if the Conductor is synched to MIDI\

\f1 -
\f0  (double)
\b localDeltaT
\b0 	Returns the object's local delta time\

\pard\b\li1080\fc0\cf0 \
\
Opening and Running the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b awaitQueueDrain
\b0 	Block until all queued MIDI events are sent.\

\f1 -
\f0  
\b open
\b0 	Opens the object\

\f1 -
\f0  
\b openInputOnly
\b0 	Opens the object for input only\

\f1 -
\f0  
\b openOutputOnly
\b0 	Opens the object for output only\

\f1 -
\f0  
\b run
\b0 	Starts the object's clock\

\f1 -
\f0  
\b stop
\b0 	Stops the object's clock\

\f1 -
\f0  
\b close
\b0 	Closes the object after output queue are empty\

\f1 -
\f0  
\b abort
\b0 	Closes the object without waiting for output queues to empty\

\pard\b\li720\fc0\cf0 \
\
\
Note\
\

\b0\li1080 Note : Object\
\

\b \
Creating and Freeing a Note\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init	
\b0 Initializes a new mute Note object\

\f1 - 
\f0\b initWithTimeTag:
\b0 (double )
\i aTimeTag
\i0 \
	Initializes a new mute Note and sets its timeTag\

\f1 -
\f0  
\b free
\b0 	Frees the object and its contents\

\f1 -
\f0  
\b copy
\b0 	Returns a new Note as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\f1 -
\f0  
\b split:
\b0 (id *)
\i aNoteOn 
\b\i0 :
\b0 (id *)
\i aNoteOff
\i0 	Splits the object (a noteDur) into a noteOn/noteOff pair\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b addToPart:
\b0\i aPart
\i0 	Adds the object to 
\i aPart\

\f1\i0 -
\f0  
\b removeFromPart
\b0 	Removes the object from its Part\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b performer
\b0 	Returns the Performer that is sending the object\

\f1 -
\f0  
\b part
\b0 	Returns the object's Part\

\f1 -
\f0  
\b conductor
\b0 	Returns the object's Performer's Conductor\

\f1 -
\f0  (int )
\b compare:
\b0\i aNote
\i0 	Compares the object with 
\b aNote\

\f1\b0 -
\f0  
\b writeScorefileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Writes the object in scorefile format\

\pard\b\li1080\fc0\cf0 \
\
Accessing Parameters\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (int )
\b parName:
\b0 (char *)
\i aName
\i0 	Creates (if necessary) and returns the parameter integer for 
\i aName\

\i0 + (char * )
\b nameOfPar:
\b0 (int)
\i aPar	
\i0 Returns the name of 
\i aPar
\i0  or the empty string if none\

\f1 -
\f0  (double )
\b parAsDouble:
\b0 (int )
\i par
\i0 	Returns the value of 
\i par
\i0  as a 
\b double\

\f1\b0 -
\f0  (int )
\b parAsInt:
\b0 (int )
\i par
\i0 	Returns the value of 
\i par
\i0  as an 
\b int\

\f1\b0 -
\f0  (char *)
\b parAsString:
\b0 (int )
\i par
\i0 	Returns a copy of the value of 
\i par
\i0  as a 
\b char *\

\f1\b0 -
\f0  (char *)
\b parAsStringNoCopy:
\b0 (int )
\i par
\i0 \
	Returns the value of 
\i par
\i0  as a 
\b char *\

\f1\b0 -
\f0  
\b parAsEnvelope:
\b0 (int )
\i par
\i0 	Returns 
\i par
\i0 's value if it was set as an Envelope\

\f1 -
\f0  
\b parAsWaveTable:
\b0 (int )
\i par
\i0 	Returns 
\i par
\i0 's value if it was set as a WaveTable\

\f1 -
\f0  
\b parAsObject:
\b0 (int )
\i par
\i0 	Returns 
\i par
\i0 's value if it's an object\

\f1 -
\f0  (BOOL )
\b isParPresent:
\b0 (int )
\i par
\i0 	YES if 
\i par
\i0  is present in the object\

\f1 -
\f0  (MKDataType )
\b parType:
\b0 (int )
\i par
\i0 	Returns the data type of 
\i par\

\f1\i0 -
\f0  
\b removePar:
\b0 (int )
\i par
\i0 	Removes 
\i par
\i0  from the object\

\f1 -
\f0  
\b copyParsFrom:
\b0\i aNote
\i0 	Copies parameters from 
\i aNote
\i0  into the object\

\f1 -
\f0  (double )
\b freq
\b0 	Special method that returns the object's frequency\

\f1 -
\f0  (int )
\b keyNum
\b0 	Special method that returns the object's key number\

\f1 -
\f0  
\b setPar:
\b0 (int )
\i par 
\b\i0 toDouble:
\b0 (double )
\i value
\i0 \
	Sets parameter 
\i par
\i0  to 
\i value
\i0 , a 
\b double\

\f1\b0 -
\f0  
\b setPar:
\b0 (int )
\i par 
\b\i0 toInt:
\b0 (int )
\i value
\i0 	Sets parameter 
\i par
\i0  to 
\i value
\i0 , an 
\b int\

\f1\b0 -
\f0  
\b setPar:
\b0 (int )
\i par 
\b\i0 toString:
\b0 (char *)
\i value
\i0 \
	Sets parameter 
\i par
\i0  to a copy of 
\i value
\i0 , a 
\b char *\

\f1\b0 -
\f0  
\b setPar:
\b0 (int )
\i par 
\b\i0 toEnvelope:
\b0\i envObj
\i0 	Sets parameter 
\i par
\i0  to the Envelope 
\i envObj\

\f1\i0 -
\f0  
\b setPar:
\b0 (int )
\i par 
\b\i0 toWaveTable:
\b0\i waveObj
\i0 \
	Sets parameter 
\i par
\i0  to the WaveTable 
\i waveObj\

\f1\i0 -
\f0  
\b setPar:
\b0 (int )
\i par 
\b\i0 toObject:
\b0\i anObj
\i0 	Sets parameter 
\i par
\i0  to the object 
\i anObj\

\f1\i0 -
\f0  (int)
\b parVectorCount
\b0 	Returns the object' parameter bit vector count\

\f1 -
\f0  (unsigned)
\b parVector:
\b0 (unsigned)
\i index
\i0 \
	Returns the 
\i index
\i0 'th parameter bit vector\

\pard\b\li1080\fc0\cf0 \
\
Timing Information\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (double )
\b timeTag
\b0 	Returns the object's timeTag\

\f1 -
\f0  (double )
\b setTimeTag:
\b0 (double )
\i newTimeTag
\i0 \
	Sets the object's timeTag\

\f1 -
\f0  (double )
\b setDur:
\b0 (double )
\i value
\i0 	Sets the object's duration to 
\i value\

\f1\i0 -
\f0  (double )
\b dur
\b0 	Returns the object's duration\

\pard\b\li1080\fc0\cf0 \
\
Type and Tag Information\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (MKNoteType )
\b noteType
\b0 	Returns the object's noteType\

\f1 -
\f0  
\b setNoteType:
\b0 (MKNoteType )
\i newNoteType
\i0 \
	Sets the object's noteType to 
\i newNoteType\

\f1\i0 -
\f0  (int )
\b noteTag
\b0 	Returns the object's noteTag\

\f1 -
\f0  
\b setNoteTag:
\b0 (int )
\i newTag
\i0 	Sets the object's noteTag to 
\i newTag\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject() 
\b0 to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
NoteFilter\
\

\b0\li1080 NoteFilter : Instrument : Object\
\

\b \
Creating and Freeing a NoteFilter\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes a new NoteFilter\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a NoteFilter as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\f1 -
\f0  
\b free
\b0 	Frees the object and its contents\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b freeNoteSenders
\b0 	Removes and frees the object's NoteSenders\

\f1 -
\f0  
\b removeNoteSenders
\b0 	Removes all the object's NoteSenders\

\f1 -
\f0  
\b addNoteSender:
\b0\i aNoteSender
\i0 	Adds 
\i aNoteSender
\i0  to the object\

\f1 -
\f0  
\b removeNoteSender:
\b0\i aNoteSender
\i0 	Removes 
\i aNoteSender
\i0  from the object\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b noteSenders
\b0 	Returns a copy of the object's List of NoteSenders\

\f1 -
\f0  (BOOL )
\b isNoteSenderPresent:
\b0\i aNoteSender
\i0 \
	YES if 
\i aNoteSender
\i0  is one of the object's NoteSenders\

\f1 -
\f0  
\b noteSender
\b0 	Returns the object's first NoteSender\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
NoteReceiver\
\

\b0\li1080 NoteReceiver : Object\
\

\b \
Creating and Freeing a NoteReceiver\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes and  returns a new NoteReceiver\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\f1 -
\f0  
\b copy
\b0 	Returns a new NoteReceiver as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b disconnect:
\b0\i aNoteSender
\i0 	Disconnects 
\i aNoteSender
\i0  from the object\

\f1 -
\f0  
\b disconnect
\b0 	Disconnects all the object's NoteSenders\

\f1 -
\f0  
\b connect:
\b0\i aNoteSender
\i0 	Connects 
\i aNoteSender
\i0  to the object\

\f1 -
\f0  
\b squelch
\b0 	Turns off the object's Note-forwarding capability\

\f1 -
\f0  
\b unsquelch
\b0 	Undoes the effect of the 
\b squelch
\b0  method\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b owner
\b0 	The Instrument that owns the object\

\f1 -
\f0  (BOOL )
\b isConnected:
\b0\i aNoteSender
\i0 	YES if 
\i aNoteSender
\i0  is a connection\

\f1 -
\f0  (BOOL )
\b isSquelched
\b0 	YES if the object is squelched\

\f1 -
\f0  (unsigned)
\b connectionCount
\b0 	Returns the number of connected NoteSenders\

\f1 -
\f0  
\b connections
\b0 	Returns a List of the connected NoteSenders\

\pard\b\li1080\fc0\cf0 \
\
Receiving Notes\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b receiveNote:
\b0\i aNote
\i0 	Receives the Note 
\i aNote\

\f1\i0 -
\f0  
\b receiveNote:
\b0\i aNote 
\b\i0 atTime:
\b0 (double )
\i time
\i0 \
	Receives 
\i aNote
\i0  at beat 
\i time
\i0  of the performance\

\f1 -
\f0  
\b receiveNote:
\b0\i aNote 
\b\i0 withDelay:
\b0 (double )
\i delayTime\

\i0 	Receives 
\i aNote
\i0  after 
\i delayTime
\i0  beats\

\f1 -
\f0  
\b receiveAndFreeNote:
\b0\i aNote	
\i0 Receives and frees 
\i aNote
\i0  after 
\i delayTime
\i0  beats\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b withDelay:
\b0 (double )
\i delayTime\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b receiveAndFreeNote:
\b0\i aNote
\i0 	Receives and frees 
\i aNote\

\f1\i0 -
\f0  
\b receiveAndFreeNote:
\b0\i aNote 
\b\i0 atTime:
\b0 (double )
\i time
\i0 \
	Receives and frees 
\i aNote
\i0  at beat 
\i time\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
NoteSender\
\

\b0\li1080 NoteSender : Object\
\

\b \
Creating and Freeing a NoteSender\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes a new NoteSender\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\f1 -
\f0  
\b copy
\b0 	Returns a new NoteSender as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0 , but uses the specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b disconnect:
\b0\i aNoteReceiver
\i0 	Disconnects 
\i aNoteReceiver
\i0  from the object\

\f1 -
\f0  
\b connect:
\b0\i aNoteReceiver
\i0 	Connects 
\i aNoteReceiver
\i0  to the object\

\f1 -
\f0  
\b squelch
\b0 	Turns off the object's Note-sending capability\

\f1 -
\f0  
\b unsquelch
\b0 	Undoes the effect of the 
\b squelch
\b0  method\

\f1 -
\f0  
\b disconnect
\b0 	Disconnects all the object's NoteReceivers\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b owner
\b0 	The Performer (or NoteFilter) that owns the object\

\f1 -
\f0  (BOOL )
\b isConnected:
\b0\i aNoteReceiver
\i0 \
	YES if 
\i aNoteReceiver
\i0  is a connection\

\f1 -
\f0  (BOOL )
\b isSquelched
\b0 	YES if the object is squelched\

\f1 -
\f0  (unsigned)
\b connectionCount
\b0 	Returns the number of connected NoteReceivers\

\f1 -
\f0  
\b connections
\b0 	Returns a List of the connected NoteReceivers\

\pard\b\li1080\fc0\cf0 \
\
Sending Notes\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b sendAndFreeNote:
\b0\i aNote 
\b\i0 atTime:
\b0 (double)
\i time
\i0 \
	Sends and frees 
\i aNote
\i0  at beat 
\i time\

\f1\i0 -
\f0  
\b sendAndFreeNote:
\b0\i aNote	
\i0 Sends and frees 
\i aNote
\i0  after 
\i delayTime
\i0  beats\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b withDelay:
\b0 (double)
\i beats\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b sendAndFreeNote:
\b0\i aNote
\i0 	Immediately sends 
\i aNote
\i0  and then frees it\

\f1 -
\f0  
\b sendNote:
\b0\i aNote 
\b\i0 atTime:
\b0 (double )
\i time
\i0 \
	Sends 
\i aNote
\i0  at beat 
\i time
\i0  of the performance\

\f1 -
\f0  
\b sendNote:
\b0\i aNote 
\b\i0 withDelay:
\b0 (double )
\i delayTime
\i0 \
	Sends 
\i aNote
\i0  after 
\i delayTime
\i0  beats\

\f1 -
\f0  
\b sendNote:
\b0\i aNote
\i0 	Immediately sends 
\i aNote\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
Orchestra\
\

\b0\li1080 Orchestra : Object\
\

\b \
Creating and Freeing an Orchestra\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b new
\b0 	Creates the default Orchestra instance, if necessary\
+ 
\b newOnDSP:
\b0 (unsigned short)
\i index
\i0 	Creates an Orchestra for the DSP with index 
\i index\

\i0 + 
\b newOnAllDSPs
\b0 	Creates all Orchestras
\i \

\i0 + 
\b free
\b0 	Frees all the Orchestras instances\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b setSamplingRate:
\b0 (double )
\i newSRate
\i0 \
	Sets the sampling rate for all closed Orchestras\

\f1 -
\f0  
\b setSamplingRate:
\b0 (double )
\i newSRate
\i0 \
	Sets the object's sampling rate to 
\i newSRate\

\f1\i0 +
\f0  
\b flushTimedMessages
\b0 	Send buffered DSP commands to all DSPs\

\f1 -
\f0  
\b flushTimedMessages
\b0 	Send buffered DSP commands to the DSP\

\f1 -
\f0  
\b sharedObjectFor:
\b0\i aKeyObj
\i0 	Returns the shared object indexed by 
\i aKeyObj\

\f1\i0 -
\f0  
\b trace:
\b0 (int )
\i typeOfInfo 
\b\i0 msg:
\b0 (char *)
\i fmt,...
\i0 \
	Prints debugging information\

\f1 -
\f0  
\b setOnChipMemoryConfigDebug:
\b0 (BOOL)
\i debugIt\
	
\i0 Configures on-chip memory\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b patchPoints:
\b0 (short)
\i count\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setOffChipMemoryConfigXArg:
\b0 (float)
\i xPercentage\

\pard\tx1440\tx5580\tx5760\b\i0\fi-4680\li5760\fc0\cf0 	yArg:
\b0 (float)
\i yPercentage	
\i0 Configures off-chip memory\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (unsigned short)
\b DSPCount
\b0 	Returns the number of DSPs configured on your machine\

\b\fc1\cf1 + 
\b0 (char *)
\b driverParameter:
\b0 (char *)
\i p
\b\i0  forOrchIndex:
\b0 (int)
\i i\
	
\i0 Returns the Intel driver parameter for the specified orchestra index.\

\b +
\b0 (int)
\b getDriverNames:
\b0 (char ***)
\i n
\i0  
\b units:
\b0 (int **)
\i u
\b\i0 \
	
\b0 Returns
\b  
\b0 number of added Intel drivers and (by reference) arrays of their names and units.
\b \

\b0\fc0\cf0 + 
\b nthOrchestra:
\b0 (unsigned short)
\i index
\i0 \
	Returns the Orchestra of the 
\i index
\i0 'th DSP\

\f1 -
\f0  (unsigned)
\b capabilities
\b0 	Returns an int of DSP device capability bits.\

\f1 -
\f0  (double )
\b computeTime
\b0 	Returns estimated time to compute a sample\

\f1 -
\f0  (MKDeviceStatus)
\b deviceStatus
\b0 	Returns the object's status\

\f1 -
\f0  (double)
\b defaultSamplingRate
\b0 	Returns the object's default sampling rate\

\f1 -
\f0  (char *)
\b driverName
\b0 	Returns the Intel driver unit name (not copied.)\

\f1 -
\f0  (char *)
\b driverParameter:
\b0 (char *)
\i s
\i0 	Returns the specified Intel driver parameter.\

\f1 -
\f0  (int)
\b driverUnit
\b0 	Returns the Intel driver unit number.\

\f1 -
\f0  (double)
\b headroom
\b0 	Returns the object's headroom\

\f1 -
\f0  (BOOL )
\b hostSoundOut
\b0 	Returns whether samples are sent to the DAC\

\f1 -
\f0  (unsigned short)
\b index
\b0 	Returns the object's DSP index\

\f1 -
\f0  (double)
\b samplingRate
\b0 	Returns the object's sampling rate\

\f1 -
\f0  (BOOL)
\b supportsSamplingRate:
\b0 (double)
\i sRate\
	
\i0 Returns whether the object's supports the sampling rate\

\f1 -
\f0  (BOOL )
\b isTimed
\b0 	YES if the object is timed\

\f1 -
\f0  (BOOL)
\b fastResponse
\b0 	YES if fast response is enabled\

\f1 -
\f0  (double)
\b localDeltaT
\b0 	Returns the object's local delta time\

\f1 -
\f0  (char *)
\b outputSoundfile
\b0 	Returns the name of the object's output soundfile\

\f1 -
\f0  (char *)
\b outputCommandsFile
\b0 	Returns the name of the object's output commands file \

\f1 -
\f0  (MKOrchMemStruct *)
\b peekMemoryResources:
\b0 (MKOrchMemStruct *)
\i peek\

\i0 	Returns the available resources\

\f1 -
\f0  (char *)
\b segmentName:
\b0 (int )
\i whichSegment
\i0 \
	Returns the specified segment name\

\f1 -
\f0  (char *)
\b simulatorFile
\b0 	Returns the name of the object's DSP log file\

\pard\b\li1080\fc0\cf0 \
\
Adjusting DSP Computation and Timing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b beginAtomicSection
\b0 	Marks the start of an indivisible section of DSP messages\

\f1 -
\f0  
\b endAtomicSection
\b0 	Marks the end of an indivisible section of DSP messages\
+ 
\b setHeadroom:
\b0 (double)
\i headroom
\i0 	Sets the headroom of all Orchestras\

\f1 -
\f0  
\b setHeadroom:
\b0 (double)
\i headroom
\i0 	Sets the object's computation headroom\
+ 
\b setTimed:
\b0 (BOOL )
\i areOrchsTimed
\i0 	Determines whether DSP is timed or untimed\

\f1 -
\f0  
\b setTimed:
\b0 (BOOL )
\i isOrchTimed
\i0 	Sets the manner in which the DSP regards timestamps\
+ 
\b setFastResponse:
\b0 (BOOL)
\i yesOrNo
\i0 	Sets the size of the sound ouput buffer\

\f1 -
\f0  
\b setFastResponse:
\b0 (BOOL)
\i yesOrNo
\i0 	Sets the size of the sound output buffer\
+ 
\b setLocalDeltaT:
\b0 (double)
\i val
\i0 	Sets the local delta time for all Orchestras\

\f1 -
\f0  
\b setLocalDeltaT:
\b0 (double)
\i val
\i0 	Sets the object's local delta time\

\pard\b\li1080\fc0\cf0 \
\
Configuring the DSP Serial Port\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setSerialPortDevice:
\b0\i aDSPSerialPortDevice\
	
\i0 Sets the object that represents the DSP serial port device.\

\f1 -
\f0  
\b sendSCIByte:
\b0 (unsigned char)
\i aByte\
	
\i0 Sends a byte to the low order SCI transmit register
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 \

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b sendSCIByte:
\b0 (unsigned char)
\i aByte 
\b\i0 toRegister:
\b0 (DSPSCITXReg)
\i reg\
	
\i0 Sends a byte to the specified SCI transmit register
\pard\tx7140\tx10180\tx10680\fi-4540\li7140\fc0\cf0 \

\pard\b\li1080\fc0\cf0 \
Setting the DSP Output\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setDefaultSoundOutput
\b0 	Sets sound output to its default state.\

\f1 -
\f0  
\b setHostSoundOut:
\b0 (BOOL)
\i yesOrNo
\i0 	\
	Sets whether the object sends samples to the DAC\

\f1 -
\f0  
\b setSerialSoundOut:
\b0 (BOOL)
\i yesOrNo
\i0 \
	Sets whether the object sends samples to the DSP serial port.\

\f1 -
\f0  
\b setOutputSoundfile:
\b0 (char *)
\i fileName
\i0 \
	Sets the soundfile to which samples are sent\

\f1 -
\f0  
\b setOutputCommandsFile:
\b0 (char *)
\i fileName
\i0 \
	Sets the DSP commands file to which samples are sent\

\pard\b\li1080\fc0\cf0 \
Setting the DSP Input\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setSerialSoundIn:
\b0 (BOOL)
\i yesOrNo
\i0 	\
	Sets whether the object accepts samples from the DSP serial port.\

\pard\b\li1080\fc0\cf0 \
Opening and Running the DSP \
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b open
\b0 	Opens all the Orchestras\

\f1 -
\f0  
\b open
\b0 	Opens the object's DSP\
+ 
\b run
\b0 	Starts all existing Orchestras running\

\f1 -
\f0  
\b run
\b0 	Starts the receiver's DSP\
+ 
\b stop
\b0 	Stops all existing Orchestras\

\f1 -
\f0  
\b stop
\b0 	Stops the object's DSP\
+ 
\b close
\b0 	Closes all existing Orchestras\

\f1 -
\f0  
\b close
\b0 	Closes the object's DSP\
+ 
\b abort
\b0 	Aborts all existing Orchestras\

\f1 -
\f0  
\b abort
\b0 	Closes the DSP ungracefully\

\f1\fc1\cf1 -
\f0\b getMonitorVersion:
\b0 (char *)
\i versionP
\b\i0  release:
\b0 (int *)
\i releaseP
\f1\i0 \
	
\f0 Returns by reference the DSP runtime monitor version and release number.\

\pard\b\li1080\fc0\cf0 \
Allocating Synthesis Objects\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b allocUnitGenerator:
\b0\i classObj
\i0 	Allocates a UnitGenerator of class 
\i classObj\

\i0 + 
\b allocSynthData:
\b0 (MKOrchMemSegment )
\i segment\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (unsigned )
\i size	
\i0 Allocates a SynthData object
\i \

\pard\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 + 
\b allocModulusSynthData:
\b0 (MKOrchMemSegment )
\i segment\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (unsigned )
\i size	
\i0 Allocates a modulus SynthData object
\i \

\pard\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 + 
\b allocPatchpoint:
\b0 (MKOrchMemSegment )
\i segment
\i0 \
	Allocates a patchpoint\
+ 
\b allocSynthPatch:
\b0\i aSynthPatchClass
\i0 	\
	Allocates a SynthPatch with the default PatchTemplate\
+ 
\b allocSynthPatch:
\b0\i aSynthPatchClass	
\i0 \

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b patchTemplate:
\b0\i p
\i0 	Allocates a SynthPatch with the specifiedPatchTemplate\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocSynthPatch:
\b0\i aSynthPatchClass
\i0 	\
	Allocates a SynthPatch with the default template\

\f1 -
\f0  
\b allocSynthPatch:
\b0\i aSynthPatchClass	
\i0 \

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b patchTemplate:
\b0\i p
\i0 	Allocates a SynthPatch with the specified template\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocUnitGenerator:
\b0\i class
\i0 	Allocates a UnitGenerator\

\f1 -
\f0  
\b allocUnitGenerator:
\b0\i class	
\i0 Allocates an ordered UnitGenerator\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b before:
\b0\i aUnitGeneratorInstance\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocUnitGenerator:
\b0\i class	
\i0 Allocates an ordered UnitGenerator\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b after:
\b0\i aUnitGeneratorInstance\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocUnitGenerator:
\b0\i class	
\i0 Allocates an ordered UnitGenerator\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b between:
\b0\i aUnitGeneratorInstance\

\i0 	
\b :
\b0\i anotherUnitGeneratorInstance\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocSynthData:
\b0 (MKOrchMemSegment )
\i segment\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (unsigned )
\i size	
\i0 Allocates a SynthData
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocModulusSynthData:
\b0 (MKOrchMemSegment )
\i segment\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (unsigned )
\i size	
\i0 Allocates a modulus SynthData
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b allocPatchpoint:
\b0 (MKOrchMemSegment )
\i segment
\i0 \
	Returns a new patchpoint\
+ 
\b dealloc:
\b0\i aSynthResource
\i0 	Deallocates a SynthPatch, UnitGenerator or SynthData\

\f1 -
\f0  
\b dealloc:
\b0\i aSynthResource
\i0 	Deallocates 
\i aSynthResource\

\f1\i0 -
\f0  
\b sineROM
\b0 	Returns the SineROM SynthData\

\f1 -
\f0  
\b muLawROM
\b0 	Returns the MuLawROM SynthData\

\f1 -
\f0  
\b segmentZero:
\b0 (MKOrchMemSegment )
\i segment
\i0 \
	Returns the zero Patchpoint on the specified segment\

\f1 -
\f0  
\b segmentSink:
\b0 (MKOrchMemSegment )
\i segment
\i0 \
	Returns the sink patchpoint on the specified segment\

\pard\b\li1080\fc0\cf0 \
\
Accessing the Shared Data Table\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b installSharedObject:
\b0\i aSynthObj 
\b\i0 for:
\b0\i aKeyObj
\i0 \
	Installs a shared object\

\f1 -
\f0  
\b installSharedObject:
\b0\i aSynthObj 
\b\i0 for:
\b0\i aKeyObj
\i0 \

\pard\tx1440\tx5580\tx5760\b\fi-4680\li5760\fc1\cf1 	type:
\b0 (MKOrchSharedType)
\i aType
\i0\fc0\cf0 	Installs a shared object with specified type
\f1 \

\pard\tx5580\tx5760\fi-4680\li5760\fc0\cf0 -
\f0  
\b installSharedSynthDataWithSegment:
\b0\i aSynthDataObj\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b for:
\b0 aKeyObj	Installs a shared SynthData object\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b installSharedSynthDataWithSegment:
\b0\i aSynthDataObj\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b for:
\b0 aKeyObj 
\b type
\b0 :(MKOrchSharedType)
\i aType
\i0 \
		Installs a shared SynthData object with specified type\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b installSharedSynthDataWithSegmentAndLength:
\b0\i aSynthDataObj\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b for:
\b0 aKeyObj	Installs a shared SynthData object\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b installSharedSynthDataWithSegmentAndLength:
\b0\i aSynthDataObj\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b for:
\b0 aKeyObj 
\b type
\b0 :(MKOrchSharedType)
\i aType
\i0 \
		Installs a shared SynthData object with specified type\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b sharedObjectFor:
\b0\i aKeyObj	
\i0 Returns the specified shared object\

\f1 -
\f0  
\b sharedObjectFor:
\b0\i aKeyObj 	
\i0 Returns the specified shared object
\i \

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b\i0 type
\b0 :(MKOrchSharedType)
\i aType	
\i0 \

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 - 
\f0\b sharedObjectFor:
\b0\i aKeyObj	
\i0 Returns the shared object in the specified segment\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b segment:
\b0 (MKOrchMemSegment)
\i whichSegment\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 - 
\f0\b sharedObjectFor:
\b0\i aKeyObj	
\i0 Returns the shared object in the specified segment\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b segment:
\b0 (MKOrchMemSegment)
\i whichSegment\
	
\b\i0 type
\b0 :(MKOrchSharedType)
\i aType	
\i0 \

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b sharedObjectFor:
\b0\i aKeyObj	
\i0 Returns the shared object index by 
\i aKeyObj\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b segment:
\b0 (MKOrchMemSegment)
\i whichSegment\

\i0 	
\b length:
\b0 (int)
\i length\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b sharedObjectFor:
\b0\i aKeyObj	
\i0 Returns the shared object index by 
\i aKeyObj\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b segment:
\b0 (MKOrchMemSegment)
\i whichSegment\

\i0 	
\b length:
\b0 (int)
\i length\
	
\b\i0 type
\b0 :(MKOrchSharedType)
\i aType	
\i0 \

\b\fi0\li1080 \
Accessing Shared Data Types\

\b0\fi-4680\li5760 \
+(char *)
\b nameForSharedType:
\b0 (int)
\i typeInt\
		
\i0 Return the name for the specified shared type.\

\i +
\i0 (int)
\b sharedTypeForName:
\b0 (char *)
\i str\
		
\i0 Return the shared type for the specified name.
\i \
\
\

\pard\b\i0\li720\fc0\cf0 Part\
\

\b0\li1080 Part : Object\
\

\b \
Creating and Freeing a Part\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes the object\

\f1 -
\f0  
\b free
\b0 	Frees the object and its Notes\

\f1 -
\f0  
\b freeSelfOnly
\b0 	Frees the object but not its Notes\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a new Part as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone	
\i0 Same as 
\b copy
\b0 , but uses the specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b addToScore:
\b0\i newScore
\i0 	Adds the object to 
\i newScore\

\f1\i0 -
\f0  
\b removeFromScore
\b0 	Removes the object from its present Score, if any\

\f1 -
\f0  
\b setInfo:
\b0\i aNote
\i0 	Sets the object's info Note to 
\i aNote\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned )
\b noteCount
\b0 	Returns the number of Notes in the object\

\f1 -
\f0  (BOOL )
\b containsNote:
\b0\i aNote
\i0 	YES if the object contains 
\i aNote\

\f1\i0 -
\f0  (BOOL )
\b isEmpty
\b0 	YES if the object contains no Notes\

\f1 -
\f0  
\b score
\b0 	Returns the object's Score\

\f1 -
\f0  
\b info
\b0 	Returns the object's info Note\

\pard\b\li1080\fc0\cf0 \
\
Adding, Moving, and Removing Notes\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b combineNotes
\b0 	Creates and adds a noteDur for each noteOn/noteOff pair in the object\

\f1 -
\f0  
\b splitNotes
\b0 	Splits the object's noteDurs into noteOn/noteOff pairs\

\f1 -
\f0  
\b freeNotes
\b0 	Removes and frees the object's Notes\

\f1 -
\f0  
\b addNote:
\b0\i aNote
\i0 	Adds 
\i aNote
\i0  to the object\

\f1 -
\f0  
\b addNoteCopy:
\b0\i aNote
\i0 	Adds a copy of 
\i aNote
\i0  to the object\

\f1 -
\f0  
\b removeNote:
\b0\i aNote
\i0 	Removes 
\i aNote
\i0  from the object\

\f1 -
\f0  
\b removeNotes:
\b0\i aList
\i0 	Removes, from the object, the Notes in 
\i aList\

\f1\i0 -
\f0  
\b addNoteCopies:
\b0\i aList 
\b\i0 timeShift:
\b0 (double )
\i shift
\i0 \
	Adds timeTag-shifted copies of 
\i aList
\i0 's Notes to the object\

\f1 -
\f0  
\b addNotes:
\b0\i aList 
\b\i0 timeShift:
\b0 (double )
\i shift
\i0 \
	Adds timeTag-shifted Notes from 
\i aList
\i0  to the object\

\f1 -
\f0  
\b empty
\b0 	Removes the object's Notes but doesn't free them\

\f1 -
\f0  
\b shiftTime:
\b0 (double )
\i shift
\i0 	Shifts the object's Notes by 
\i shift
\i0  beats\

\f1 -
\f0  
\b sort
\b0 	Sorts the object's Notes\

\f1 -
\f0  (BOOL)
\b isSorted
\b0 	YES if the object has been sorted\

\pard\b\li1080\fc0\cf0 \
\
Retrieving Notes\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b firstTimeTag:
\b0 (double)
\i firstTimeTag	
\pard\tx1440\tx5580\tx5760\b\i0\fi-4680\li5760\fc0\cf0 lastTimeTag:
\b0 (double)
\i lastTimeTag
\pard\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 \
	
\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 Creates and returns a List of a portion of the object's Notes\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b atTime:
\b0 (double )
\i timeTag
\i0 	Returns the first Note with a timeTag of 
\i timeTag\

\f1\i0 -
\f0  
\b atOrAfterTime:
\b0 (double )
\i timeTag
\i0 	Returns the first Note with a timeTag equal to or greater than 
\i timeTag\

\f1\i0 -
\f0  
\b nth:
\b0 (unsigned )
\i n
\i0 	Returns the 
\i n
\i0 th Note in the object\

\f1 -
\f0  
\b atOrAfterTime:
\b0 (double )
\i timeTag	
\i0 Returns the 
\i n
\i0 th Note with the appropriate timeTag\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b nth:
\b0 (unsigned )
\i n\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b atTime:
\b0 (double )
\i timeTag 
\b\i0 nth:
\b0 (unsigned )
\i n
\i0 \
	Returns the 
\i n
\i0 th Note with a timeTag of 
\i timeTag\

\f1\i0 -
\f0  
\b next:
\b0\i aNote
\i0 	Returns the Note immediately following 
\i aNote\

\f1\i0 -
\f0  
\b notes
\b0 	Creates and returns a List of the object's Notes\

\f1 -
\f0  
\b notesNoCopy
\b0 	Returns a pointer to the receiver's List of Notes\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use
\b  NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically when unarchiving\

\pard\b\li720\fc0\cf0 \
\
\
Partials\
\

\b0\li1080 Partials : WaveTable : Object\
\

\b \
Creating and Freeing a Partials\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a Partials as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone	
\i0 Same as 
\b copy
\b0 , but uses the specified zone\

\f1 -
\f0  
\b free
\b0 	Frees the object and its arrays\

\pard\b\li1080\fc0\cf0 \
\
Defining the Sine Waves\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setPartialCount:
\b0 (int)
\i count	
\i0 Defines the object's sine wave components\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b freqRatios:
\b0 (double *)
\i freqRats\

\i0 	
\b ampRatios:
\b0 (double *)
\i ampRats\

\i0 	
\b phases:
\b0 (double *)
\i phases\

\i0 	
\b orDefaultPhase:
\b0 (double)
\i defaultPhase\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setPartialCount:
\b0 (int)
\i count	
\i0 Simple way to define the object's sine wave components\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b freqRatios
\b0 :(double *)
\i freqRats \

\i0 	
\b ampRatios:
\b0 (double *)
\i ampRats\

\pard\b\i0\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeScorefileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Writes the object in ASCII scorefile format\

\f1 -
\f0  
\b setFreqRangeLow:
\b0 (double)
\i freq1	
\i0 Sets the frequency range\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b high:
\b0 (double)
\i freq2\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (int)
\b partialCount
\b0 	Returns the number of sine wave components\

\f1 -
\f0  (double *)
\b freqRatios
\b0 	Returns a pointer to the object's frequency ratios array\

\f1 -
\f0  (double *)
\b ampRatios
\b0 	Returns a pointer to the object's amplitude ratios array\

\f1 -
\f0  (double)
\b defaultPhase
\b0 	Returns the object's default phase\

\f1 -
\f0  (double *)
\b phases
\b0 	Returns a pointer to the object's phase array\

\f1 -
\f0  (int)
\b getPartial:
\b0 (int)
\i n	
\i0 Returns the information for the 
\i n
\i0 'th sine wave\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b freqRatio:
\b0 (double *)
\i fRatio\

\i0 	
\b ampRatio:
\b0 (double *)
\i aRatio\

\i0 	
\b phase:
\b0 (double *)
\i phase\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double)
\b minFreq
\b0 	Returns the minimum frequency\

\f1 -
\f0  (double)
\b maxFreq
\b0 	Returns the maximum frequency\

\f1 -
\f0  (BOOL)
\b freqWithinRange:
\b0 (double)
\i freq
\i0 \
	Returns whether freq is within range\

\f1 -
\f0  (double)
\b highestFreqRatio
\b0 	Returns the object's highest frequency ratio\

\pard\b\li1080\fc0\cf0 \
\
Retrieving Data in oscTable format\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsOscTableLength:
\b0 (int)
\i aLength 
\i0  
\b scale:
\b0 (double)
\i aScaling\

\f1\i0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsOscTableLength:
\b0 (int)
\i aLength\

\f1\i0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsOscTableScale:
\b0 (double)
\i aScaling\

\f1\i0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsOscTable
\b0\i \
	
\i0 These 4 methods return a pointer to the object's 
\b dataDSP 
\b0 array\

\f1 \
-
\f0  (double *)
\b dataDoubleAsOscTableLength:
\b0 (int)
\i aLength 
\pard\tx1440\tx5580\tx5760\b\i0\fi-4680\li5760\fc0\cf0 scale:
\b0 (double)
\i aScaling\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleAsOscTableS
\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 cale:
\b0 (double)
\i aScaling\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleAsOscTableLength:
\b0 (int)
\i aLength
\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleAsOscTable	
\b0 These 4 methods  return a pointer to the object's 
\b dataDouble
\b0  array
\pard\tx1440\tx5580\tx5760\i\fi-4680\li5760\fc0\cf0 \

\pard\b\i0\li1080\fc0\cf0 \
\
Retrieving Data in waveShaping format\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsWaveshapingTableLength:
\b0 (int)
\i aLength 
\i0  
\b scale:
\b0 (double)
\i aScaling\

\f1\i0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsWaveshapingTableLength:
\b0 (int)
\i aLength\

\f1\i0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsWaveshapingTableScale:
\b0 (double)
\i aScaling\

\f1\i0 -
\f0  (DSPDatum *)
\b dataDSPLengthAsWaveshapingTable
\b0\i \
	
\i0 These 4 methods return a pointer to the object's 
\b dataDSP 
\b0 array\

\f1 -
\f0  (double *)
\b dataDoubleAsWaveshapingTableLength:
\b0 (int)
\i aLength 
\pard\tx1440\tx5580\tx5760\b\i0\fi-4680\li5760\fc0\cf0 scale:
\b0 (double)
\i aScaling\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleAsWaveshapingTableS
\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 cale:
\b0 (double)
\i aScaling\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleAsWaveshapingTableLength:
\b0 (int)
\i aLength
\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleAsWaveshapingTable\
	
\b0 These 4 methods  return a pointer to the object's 
\b dataDouble
\b0  array
\pard\tx1440\tx5580\tx5760\i\fi-4680\li5760\fc0\cf0 \

\pard\b\i0\li1080\fc0\cf0 \
\
Computing the Waveform\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b fillTableLength:
\b0 (int)
\i aLength 
\b\i0 s
\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 cale:
\b0 (double)
\i aScaling
\pard\tx5580\tx5760\fi-4680\li5760\fc0\cf0 \
	
\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 Computes the waveform prior to synthesis in 
\b oscTable
\b0  format\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b fillOscTableLength:
\b0 (int)
\i aLength 
\i0  
\pard\tx1440\tx5580\tx5760\b\fi-4680\li5760\fc0\cf0 scale:
\b0 (double)
\i aScaling
\pard\tx5580\tx5760\fi-4680\li5760\fc0\cf0 \
	
\i0 Computes the waveform prior to synthesis in 
\b oscTable
\b0  format\

\f1 -
\f0  
\b fillWaveshapingTableLength:
\b0 (int)
\i aLength 
\pard\tx1440\tx5580\tx5760\b\i0\fi-4680\li5760\fc0\cf0 scale:
\b0 (double)
\i aScaling
\pard\tx5580\tx5760\fi-4680\li5760\fc0\cf0 \
	
\i0 Computes the waveform prior to synthesis in 
\b waveshaping 
\b0 format\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
PartPerformer\
\

\b0\li1080 PartPerformer : Performer : Object\
\

\b \
Creating a PartPerformer\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Returns a new PartPerformer as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setPart:
\b0\i aPart
\i0 	Associates the object with 
\i aPart\

\f1\i0 -
\f0  
\b setFirstTimeTag:
\b0 (double )
\i aTimeTag
\i0 	\
	Sets the object's smallest considered timeTag\

\f1 -
\f0  
\b setLastTimeTag:
\b0 (double )
\i aTimeTag
\i0 	\
	Sets the object's greatest considered timeTag\

\f1 -
\f0  (double )
\b firstTimeTag
\b0 	Returns the object's smallest considered timeTag\

\f1 -
\f0  (double )
\b lastTimeTag
\b0 	Returns the object's greatest considered timeTag\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  part
\b0 	Returns the object's Part object\

\pard\b\li1080\fc0\cf0 \
\
Performing the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b activateSelf
\b0 	Activation routine; copies the Part's List of Notes\

\f1 -
\f0  
\b deactivateSelf
\b0 	Deactivation routine; frees the object's Note List\

\f1 -
\f0  
\b perform
\b0 	Performs 
\b nextNote\

\pard\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically to prepare unarchived object for use\

\pard\b\li720\fc0\cf0 \
\
\
PartRecorder\
\

\b0\li1080 PartRecorder : Instrument : Object\
\

\b \
Creating and Freeing a PartRecorder\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a PartRecorder as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setPart:
\b0\i aPart
\i0 	Sets 
\i aPart
\i0  as the object's Part\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b part
\b0 	Returns the object's Part object\

\pard\b\li1080\fc0\cf0 \
\
Realizing Notes\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b realizeNote:
\b0\i aNote	
\i0 Adds 
\i aNote
\i0  to the object's Part\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b fromNoteReceiver:
\b0\i aNoteReceiver\

\pard\b\i0\li1080\fc0\cf0 \
\
Interpreting Time\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setTimeUnit:
\b0 (MKTimeUnit)
\i aTimeUnit
\i0  \
	Returns the unit in which the object measures time\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically to prepare unarchived object for use\

\pard\b\li720\fc0\cf0 \
\
\
PatchTemplate\
\

\b0\li1080 PatchTemplate : Object\
\

\b \
Creating a PatchTemplate Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes a new PatchTemplate object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a new PatchTemplate as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Adding and Connecting Synthesis Elements\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned )
\b addUnitGenerator:
\b0\i aUGClass\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b ordered:
\b0 (BOOL )
\i isOrdered
\i0 	
\i 	
\i0 Adds a UnitGenerator specification to the object\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned )
\b addUnitGenerator:
\b0\i aUGClass
\i0 \
	Adds an ordered UnitGenerator specification to the object\

\f1 -
\f0  (unsigned )
\b addSynthData:
\b0 (MKOrchMemSegment )
\i segment\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (unsigned )len	Adds a SynthData specification to the object\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned)
\b addPatchpoint:
\b0 (MKOrchMemSegment)
\i segment\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 		Adds a patchpoint to the object\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b to:
\b0 (unsigned )
\i anObjInt	
\i0 Used to connect added synthesis elements\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b sel:
\b0 (SEL )
\i aSelector\

\i0 	
\b arg:
\b0 (unsigned )
\i anArgInt\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned)
\b synthElementCount
\b0 	Returns the number of UnitGenerator and SynthData specifications\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use
\b  NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically to prepare unarchived object for use\

\pard\b\li720\fc0\cf0 \
\
\
Performer\
\

\b0\li1080 Performer : Object\
\

\b \
Creating and Freeing a Performer\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a new Performer as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b addNoteSender:
\b0\i aNoteSender
\i0 	Adds 
\i aNoteSender
\i0  to the object\

\f1 -
\f0  
\b freeNoteSenders
\b0 	Frees the object's NoteSenders\

\f1 -
\f0  
\b removeNoteSenders
\b0 	Removes the object's NoteSenders\

\f1 -
\f0  
\b removeNoteSender:
\b0\i aNoteSender
\i0 	Removes 
\i aNoteSender
\i0  from the object\

\f1 -
\f0  
\b setDelegate:
\b0\i anOjbect
\i0 	Sets the object's delegate to 
\i anObject\

\f1\i0 -
\f0  
\b setConductor:
\b0\i aConductor
\i0 	Sets the object's Conductor to 
\i aConductor\

\f1\i0 -
\f0  
\b setTimeShift:
\b0 (double )
\i timeShift
\i0 	Delays performance for 
\i shift
\i0  beats\

\f1 -
\f0  
\b setDuration:
\b0 (double )
\i dur
\i0 	Sets maximum performance duration to 
\i dur
\i0  beats\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b conductor
\b0 	Returns the object's Conductor\

\f1 -
\f0  
\b noteSenders
\b0 	Returns a List of the object's NoteSenders\

\f1 -
\f0  
\b noteSender
\b0 	Returns the object's first NoteSender\

\f1 -
\f0  
\b delegate
\b0 	Returns the object's delegate or 
\b nil 
\b0 if none\

\f1 -
\f0  (BOOL )
\b isNoteSenderPresent:
\b0\i aNoteSender
\i0 \
	Returns YES if 
\i aNoteSender
\i0  is present\

\f1 -
\f0  (double )
\b timeShift
\b0 	Returns the object's time shift value\

\f1 -
\f0  (double )
\b duration
\b0 	Returns the object's duration value\

\f1 -
\f0  (int )
\b status
\b0 	Returns the object's status\

\f1 -
\f0  (BOOL )
\b isPerforming	
\b0 Returns YES if status is not 
\b MK_inactive\

\f1\b0 -
\f0  (int )
\b performCount
\b0 	Returns the number of Notes the object has performed\

\f1 -
\f0  (double )
\b time
\b0 	Returns the object's latest performance time\

\pard\b\li1080\fc0\cf0 \
\
Performing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b activateSelf
\b0 	Does nothing; subclass may override for special behavior\

\f1 -
\f0  
\b deactivateSelf
\b0 	Does nothing; subclass may override for special behavior\

\f1 -
\f0  
\b perform
\b0 	Subclass responsibility; sends Notes and sets 
\b nextPerform\

\f1\b0 -
\f0  
\b activate
\b0 	Prepares the object for a performance\

\f1 -
\f0  
\b deactivate
\b0 	Removes the object from the performance\

\f1 -
\f0  
\b pause
\b0 	Suspends the object's performance\

\f1 -
\f0  
\b pauseFor:
\b0 (double)
\i beats
\i0 	Suspends the object's performance for 
\i beats 
\i0 beats\

\f1 -
\f0  
\b resume
\b0 	Resumes the object's performance\

\f1 -
\f0  
\b rescheduleBy:
\b0 	Shifts the time of the next invocation of 
\b perform
\b0  by a relative amount.\

\f1 -
\f0  
\b rescheduleAtTime:
\b0 	Shifts the time of the next invocation of 
\b perform
\b0  to the specified time.\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use
\b  NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake
\b0 	Used by unarchiver to prepare unarchived object for use\

\pard\b\li1080\fc0\cf0 \
\
Implemented by the Delegate\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b performerDidActivate:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it activates\

\f1 - 
\f0\b performerDidPause:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it pauses\

\f1 - 
\f0\b performerDidResume:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it resumes\

\f1 - 
\f0\b performerDidDeactivate:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it deactivates\

\pard\b\li720\fc0\cf0 \
\
\
Samples\
\

\b0\li1080 Samples : WaveTable : Object\
\

\b \
Creating and Freeing a Samples\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes the object\

\f1 -
\f0  
\b free
\b0 	Frees the object. Frees the object and its Sound.\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a Samples object as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setSound:
\b0\i aSound
\i0 	Sets the object's Sound to a copy of 
\i aSound\

\f1\i0 -
\f0  
\b readSoundfile:
\b0 (char *)
\i aSoundfile
\i0 	Sets the object's Sound to the data in 
\i aSoundfile\

\pard\b\i0\li1080\fc0\cf0 \
\
Computing the Waveform\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b fillTableLength:
\b0 (int)
\i aLength	
\i0 Computes the waveform data\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b scale:
\b0 (double)
\i aScaling\

\pard\b\i0\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b sound
\b0 	Returns the object's Sound object\

\f1 -
\f0  (char *)
\b soundfile
\b0 	Returns the name of the object's soundfile, if any\

\pard\b\li1080\fc0\cf0 \
\
Writing the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeScorefileStream:
\b0 (NXStream *)
\i stream
\i0 \
	Write the object in scorefile format to 
\i stream\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
Score\
\

\b0\li1080 Score : Object\
\

\b \
Creating and Freeing a Score\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init	
\b0 Initializes the object\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\f1 -
\f0  
\b freeSelfOnly
\b0 	Frees the object but not its Parts nor their Notes\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a new Score as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b freeParts
\b0 	Removes and frees the object's Parts and Notes\

\f1 -
\f0  
\b freePartsOnly
\b0 	Removes and frees the object's Parts\

\f1 -
\f0  
\b freeNotes
\b0 	Frees the object's Notes\

\f1 -
\f0  
\b empty
\b0 	Removes the object's Parts\

\f1 -
\f0  
\b addPart:
\b0\i aPart
\i0 	Adds 
\i aPart
\i0  to the object\

\f1 -
\f0  
\b removePart:
\b0\i aPart
\i0 	Removes 
\i aPart
\i0  from the object\

\f1 -
\f0  
\b removePart:
\b0\i aPart 
\b\i0 with:
\b0\i bPart
\i0 	Removes 
\i aPart
\i0  from the object and replaces it with 
\i bPart.
\i0 \

\f1 -
\f0  
\b shiftTime:
\b0 (double )
\i shift
\i0 	Shifts the timeTags in the object's Notes by 
\i shift 
\i0 beats\

\f1 -
\f0  
\b setInfo:
\b0\i aNote
\i0 	Sets the object's info Note to 
\i aNote\

\f1\i0 -
\f0  
\b setScorefilePrintStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Sets the stream to which scorefile 
\b print 
\b0 statements are written\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned )
\b noteCount
\b0 	The number of Notes in the object\

\f1 -
\f0  (BOOL )
\b isPartPresent:
\b0\i aPart
\i0 	Retruns YES if the object contains 
\i aPart\

\f1\i0 -
\f0  (unsigned )
\b partCount
\b0 	The number of Parts in the object\

\f1 -
\f0  
\b parts
\b0 	Returns a List of the object's Parts\

\f1 -
\f0  
\b info
\b0 	Returns the object's info Note\

\f1 -
\f0  (NXStream *)
\b scorefilePrintStream
\b0 	\
	Returns the stream to which scorefile 
\b print
\b0  statements are written\

\f1 -
\f0  
\b midiPart:
\b0 (int )
\i aChan
\i0 	Returns the Part object for MIDI Channel 
\i aChan\

\pard\b\i0\li1080\fc0\cf0 \
\
Reading and Writing Files\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -(
\f0\fc1\cf1 BOOL
\f1\fc0\cf0 )
\f0\b m
\fc1\cf1 idifilesEvaluateTempo
\fc0\cf0 	
\b0 Returns how tempo is handled when reading/writing MIDI files\

\f1 -
\f0  
\b readScorefile:
\b0 (char *)
\i fileName
\i0 	Reads a scorefile into the object\

\f1 -
\f0  
\b readScorefileStream:
\b0 (NXStream *)
\i stream
\i0 \
	Reads a scorefile into the object\

\f1 -
\f0  
\b\fc1\cf1 setMidifilesEvaluateTempo
\fc0\cf0 :
\b0 (BOOL)
\i yesOrNo
\i0 \
	Controls how tempo is handled when reading/writing MIDI files\

\f1 -
\f0  
\b writeScorefile:
\b0 (char *)
\i aFileName
\i0 	Writes the object as a scorefile\

\f1 -
\f0  
\b writeScorefileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Writes the object as a scorefile\

\f1 -
\f0  
\b writeOptimizedScorefile:
\b0 (char *)
\i aFileName
\i0 \
	Writes the object as an optimized (.playscore) scorefile\

\f1 -
\f0  
\b writeOptimizedScorefileStream:
\b0 (NXStream *)
\i aStream\

\i0 	Writes the object as an optimized scorefile\

\f1 -
\f0  
\b readScorefile:
\b0 (char *)
\i fileName	
\i0 Reads a portion of a scorefile into the object\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double )
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double )
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b readScorefileStream:
\b0 (NXStream *)
\i stream\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double )
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double )
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift	
\i0 Reads a portion of a scorefile into the object
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeScorefile:
\b0 (char *)
\i aFileName	
\i0 Writes a portion of the object as a scorefile\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double )
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double )
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeScorefileStream:
\b0 (NXStream *)
\i aStream\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double )
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double )
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift	
\i0 Writes a portion of the object as a scorefile
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeOptimizedScorefile:
\b0 (char *)
\i aFileName\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double )
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double )
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift	
\i0 Writes a portion of the object as an optimized scorefile
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeOptimizdScorefileStream:
\b0 (NXStream *)
\i aStream)\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double )
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double )
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift		
\i0 Writes a portion of the object as an optimized scorefile
\i \

\f1\i0 -
\f0  
\b readMidifile:
\b0 (char *)
\i fileName
\i0 	Reads a midifile into the object\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  
\b readMidifileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Reads a midifile into the object\

\f1 -
\f0  
\b readMidifile:
\b0 (char *)
\i aFileName	
\i0 Reads a portion of a midifile into the object\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double)
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double)
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b readMidifileStream:
\b0 (NXStream *)
\i aStream\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double)
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double)
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift	
\i0 Reads a portion of a midifile into the object
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b readMidifileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Reads a midifile into the object\

\f1 -
\f0  
\b writeMidifileStream:
\b0 (NXStream *)
\i aStream
\i0 \
	Writes the object as a midifile\

\f1 -
\f0  
\b writeMidifile:
\b0 (char *)
\i aFileName
\i0 	Writes the object as a midifile\

\f1 -
\f0  
\b writeMidifile:
\b0 (char *)
\i aFileName	
\i0 Writes a portion of the object as a midifile\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double)
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double)
\i lastTimeTag\

\i0 	
\b timeShift:
\b0 (double)
\i timeShift\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b writeMidifileStream:
\b0 (NXStream *)
\i aStream
\i0 \

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b firstTimeTag:
\b0 (double)
\i firstTimeTag\

\i0 	
\b lastTimeTag:
\b0 (double)
\i lastTimeTag\

\i0 	
\b timeShift
\b0 :(double)
\i timeShift	
\i0 Writes a portion of the object as a midifile
\i \

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically when unarchiving\

\pard\b\li720\fc0\cf0 \
\
\
ScorefilePerformer\
\

\b0\li1080 ScorefilePerformer : FilePerformer : Performer : Object\
\

\b \
Creating a ScorefilePerformer\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes the object\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a new ScorefilePerformer as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (char *)
\b fileExtension
\b0 	Returns ªscoreº, the default scorefile extension\
+ (char **)
\b fileExtensions
\b0 	Returns array consisting of  ªscoreº and ªplayscoreº\

\f1 -
\f0  
\b info
\b0 	Returns the object's Score info Note\

\f1 -
\f0  (NXStream *)
\b scorefilePrintStream
\b0 	Returns the stream on which scorefile 
\b print
\b0  statements are written\

\f1 -
\f0  
\b infoForNoteSender:
\b0\i aNoteSender
\i0 	Returns the Part info Note for 
\i aNoteSender\

\pard\b\i0\li1080\fc0\cf0 \
\
Performing the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b initializeFile
\b0 	Sent automatically to initialize the file for performance\

\f1 - 
\f0\b nextNote
\b0 	Sent automatically to retrieve the next Note from the file\

\f1 - 
\f0\b performNote:
\b0\i aNote
\i0 	Sent automatically to forward the Note to the object's NoteSenders\

\f1 - 
\f0\b finishFile
\b0 	Sent automatically to clean up after a performance\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically when unarchiving\

\pard\b\li720\fc0\cf0 \
\
\
ScorefileWriter\
\

\b0\li1080 ScorefileWriter : FileWriter : Instrument : Object\
\

\b \
Creating and Freeing a ScorefileWriter\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes a new object\

\f1 -
\f0  
\b copy
\b0 	Returns a new ScorefileWriter as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setInfo:
\b0\i aNote
\i0 	Sets the Score info Note for the object's scorefile\

\f1 -
\f0  
\b setInfo:
\b0\i aPartInfo 
\b\i0 forNoteReceiver:
\b0\i aNoteReceiver\

\i0 	Sets the Part info Note for the given NoteReceiver\

\f1 -
\f0  
\b setFile:
\b0 (char *)
\i fileName	
\i0 Sets file and specifies ASCII scorefile format\

\f1 -
\f0  
\b setStream:
\b0 (NXStream *)
\i aStream	
\i0 Sets stream and specifies ASCII scorefile format\

\f1 -
\f0  
\b setOptimizedFile:
\b0 (char *)
\i fileName	
\i0 Sets file and specifies optimized scorefile format\

\f1 -
\f0  
\b setOptimizedStream:
\b0 (NXStream *)
\i aStream	
\i0 Sets stream and specifies optimized scorefile format\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (char *)
\b fileExtension
\b0 	Returns ªscoreº, the default file extension\

\f1 - 
\f0 (char *)
\b fileExtension
\b0 	Returns ªscoreº or ªplayscoreº, depending on type of file being written\

\f1 -
\f0  
\b info
\b0 	Returns the Score info Note\

\f1 -
\f0  
\b infoForNoteReceiver:
\b0\i aNoteReceiver
\i0 \
	Returns the Part info Note for the given NoteReceiver\

\pard\b\li1080\fc0\cf0 \
\
Performing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b initializeFile
\b0 	Sent automatically to initialize the scorefile\

\f1 -
\f0  
\b finishFile
\b0 	Sent automatically to finish writing the scorefile\

\f1 -
\f0  
\b realizeNote:
\b0\i aNote	
\i0 Sent automatically to write 
\i aNote
\i0  to the scorefile\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b fromNoteReceiver:
\b0\i aNoteReceiver\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake	
\b0 Sent automatically when unarchiving\

\pard\b\li720\fc0\cf0 \
\
\
ScorePerformer\
\

\b0\li1080 ScorePerformer : Object\
\

\b \
Creating and Freeing a ScorePerformer\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes a new object\

\f1 -
\f0  
\b copy
\b0 	Returns a new ScorePerformer as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\f1 -
\f0  
\b free
\b0 	Frees the object and its PartPerformers\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b freePartPerformers
\b0 	Removes and frees the object's PartPerformers\

\f1 -
\f0  
\b removePartPerformers
\b0 	Removes the object's PartPerformers\

\f1 -
\f0  
\b setScore:
\b0\i aScore
\i0 	Associates the object with the Score 
\i aScore\

\f1\i0 -
\f0  
\b setFirstTimeTag:
\b0 (double )
\i aTimeTag
\i0 	\
	Sets the smallest timeTag value considered for performance\

\f1 -
\f0  
\b setLastTimeTag:
\b0 (double )
\i aTimeTag
\i0 	\
	Sets the greatest timeTag value considered for performance\

\f1 -
\f0  
\b setTimeShift:
\b0 (double )
\i aTimeShift
\i0 	Sets the object's performance time offset in beats\

\f1 -
\f0  
\b setDuration:
\b0 (double )
\i aDuration
\i0 	Sets the object's maximum performance duration in beats\

\f1 -
\f0  
\b setConductor:
\b0\i aConductor
\i0 	Sets the Conductor for the object's PartPerformers\

\f1 - 
\f0\b setPartPerformerClass:
\b0\i aPartPerformerSubclass
\b\i0 \
	
\b0 Sets class of PartPerformers to be used by the object\

\f1 -
\f0  
\b setDelegate:
\b0\i anObjectr
\i0 	Sets the object's delegate\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b score
\b0 	Returns the object's Score\

\f1 -
\f0  (double )
\b firstTimeTag
\b0 	Returns the smallest timeTag value considered for performance\

\f1 -
\f0  (double )
\b lastTimeTag
\b0 	Returns the greatest timeTag value considered for performance\

\f1 -
\f0  (double )
\b timeShift
\b0 	Returns the object's performance time offset in beats\

\f1 -
\f0  (double )
\b duration
\b0 	Returns the object's maximum performance duration in beats\

\f1 -
\f0  
\b partPerformerForPart:
\b0\i aPart
\i0 	Returns the PartPerformer associated with 
\i aPart\

\f1\i0 -
\f0  
\b partPerformers
\b0 	Returns a List of the object's PartPerformers\

\f1 -
\f0  
\b noteSenders
\b0 	Returns a List of the PartPerformer's NoteSender objects\

\f1 -
\f0  (int)
\b status
\b0 	Returns the object's performance status\

\f1 -
\f0\b  partPerformerClass
\b0 	Returns the PartPerformer subclasss used by the object\

\f1 -
\f0\b  delegate
\b0 	Returns the object's delegate\

\pard\b\li1080\fc0\cf0 \
\
Performing the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b activate
\b0 	Activates the object's PartPerformers for a performance\

\f1 -
\f0  
\b activateSelf
\b0 	Object's activation method; default does nothing\

\f1 -
\f0  
\b deactivate
\b0 	Deactivates the object's PartPerformers\

\f1 -
\f0  
\b deactivateSelf
\b0 	Defines the object's deactivation routine\

\f1 -
\f0  
\b pause
\b0 	Suspends the object's performance\

\f1 -
\f0  
\b resume
\b0 	Resumes the object's performance\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\f1 - 
\f0\b awake
\b0 	Used by unarchiver to prepare unarchived object for use\

\pard\b\li1080\fc0\cf0 \
\
Implemented by the Delegate\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b performerDidActivate:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it activates\

\f1 - 
\f0\b performerDidPause:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it pauses\

\f1 - 
\f0\b performerDidResume:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it resumes\

\f1 - 
\f0\b performerDidDeactivate:
\b0\i sender
\i0 	Sent by 
\i sender 
\i0 after it deactivates\

\pard\b\li720\fc0\cf0 \
\
\
ScoreRecorder\
\

\b0\li1080 ScoreRecorder : Object\
\

\b \
Creating and Freeing a ScoreRecorder\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init
\b0 	Initializes a new ScoreRecorder\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a ScoreRecorder as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\f1 -
\f0  
\b free
\b0 	Frees the object and its PartRecorders\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setScore:
\b0\i aScore
\i0 	Sets the object's Score to 
\i aScore\

\f1\i0 -
\f0  
\b freePartRecorders
\b0 	Frees the object's PartRecorders, sets its Score to 
\b nil\

\f1\b0 -
\f0  
\b removePartRecorders
\b0 	Removes the object's PartRecorders; Score to 
\b nil\

\f1\b0 -
\f0  
\b setTimeUnit:
\b0 (MKTimeUnit)
\i aTimeUnit
\i0 \
	Forwards 
\b setTimeUnit:
\b0\i aTimeUnit
\i0  to the object's PartRecorders\

\f1 -
\f0  
\b partRecorders
\b0 	Returns the object's PartRecorders\

\f1 -
\f0  
\b setPartRecorderClass:
\b0\i aPartRecorderSubclass
\b\i0 \
	
\b0 Sets class of PartRecorders to be used by the object\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b score
\b0 	Returns the object's Score\

\f1 -
\f0  (MKTimeUnit)
\b timeUnit
\b0 	Returns the object's time unit, either MK_second or MK_beat\

\f1 -
\f0  
\b noteReceivers
\b0 	Returns a List of the object's NoteReceivers\

\f1 -
\f0\b  partRecorderClass
\b0 	Returns the PartRecorder subclass used by the object\

\f1 -
\f0  
\b partRecorderForPart:
\b0\i aPart
\i0 	Returns the object's PartRecorder for 
\i aPart\

\pard\b\i0\li1080\fc0\cf0 \
\
Performing the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (BOOL )
\b inPerformance
\b0 	YES if the object is in performance\

\f1 -
\f0  
\b firstNote:
\b0\i aNote
\i0 	You never invoke this method\

\f1 -
\f0  
\b afterPerformance
\b0 	You never invoke this method\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
SynthData\
\

\li1080 \

\b0 SynthData : Object\
\

\b \
Overridden Methods \
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b alloc
\b0 	Overridden. The Orchestra creates all SynthData objects.\
+ 
\b allocFromZone:
\b0 (NXZone *)
\i zone
\i0 	Overridden. The Orchestra creates all SynthData objects.\
+ 
\b new
\b0 	Overridden. The Orchestra creates all SynthData objects.\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Overridden. The Orchestra creates all SynthData objects.\

\f1 -
\f0  
\b copy
\b0 	Overridden. The Orchestra creates all SynthData objects.\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b clear
\b0 	Clears the object's memory but doesn't deallocate it\

\f1 -
\f0  
\b setData:
\b0 (DSPDatum *)
\i dataArray	
\i0 Loads the array 
\i dataArray
\i0  into the object's memory\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (int )
\i len\

\i0 	
\b offset:
\b0 (int )
\i off\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setShortData:
\b0 (short *)
\i dataArray	
\i0 Loads short array 
\i dataArray
\i0  into the object's memory\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (int )
\i len\

\i0 	
\b offset:
\b0 (int )
\i off\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setData:
\b0 (DSPDatum *)
\i dataArray
\i0 	Fills the object's memory with the array 
\i dataArray\

\f1\i0 -
\f0  
\b setShortData:
\b0 (short *)
\i dataArray
\i0 	Fills the object's memory with the short array 
\i dataArray\

\f1\i0 -
\f0  
\b setToConstant:
\b0 (DSPDatum )
\i value	
\i0 Loads the constant 
\i value
\i0  into the object's memory\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b length:
\b0 (int )
\i len\

\i0 	
\b offset:
\b0 (int )
\i off\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setToConstant:
\b0 (DSPDatum )
\i value
\i0 	Fills the object's memory with the constant 
\i value\

\f1\i0 -
\f0  
\b dealloc
\b0 	Deallocates the object\

\f1 -
\f0  
\b free
\b0 	Same as 
\b [self dealloc]\

\f1\b0 -
\f0  
\b setReadOnly:
\b0 (BOOL)
\i readOnlyFlag
\i0 	Object is read-only if 
\i readOnlyFlag
\i0  is YES\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (int )
\b length
\b0 	Returns the object's memory block size in words\

\f1 -
\f0  (DSPAddress )
\b address
\b0 	Returns object's DSP memory block address\

\f1 -
\f0  (DSPMemorySpace )
\b memorySpace
\b0 	\
	Returns the DSP space from which the object's memory block is allocated\

\f1 -
\f0  (MKOrchAddrStruct *)
\b orchAddrPtr
\b0 	Returns a pointer to the object's address structure\
+ 
\b orchestraClass
\b0 	Returns the Orchestra class object\

\f1 -
\f0  
\b orchestra
\b0 	Returns the object's Orchestra object\

\f1 -
\f0  (BOOL)
\b isAllocated
\b0 	Always returns YES\

\f1 -
\f0  (BOOL )
\b isFreeable
\b0 	YES if the object may be freed\

\f1 -
\f0  
\b synthPatch
\b0 	Returns the object's SynthPatch\

\f1 -
\f0  (BOOL)
\b readOnly
\b0 	Returns YES if the object is read-only\

\f1 -
\f0  (int)
\b referenceCount
\b0 	Returns the shared object reference count\

\pard\b\li1080\fc0\cf0 \
\
UnitGenerator Compatibility Methods\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b run
\b0 	Does nothing\

\f1 -
\f0  
\b idle
\b0 	Does nothing\

\f1 -
\f0  (double)
\b finish
\b0 	Does nothing\

\pard\b\li720\fc0\cf0 \
\
\
SynthInstrument\
\

\b0\li1080 SynthInstrument : Instrument : Object\
\

\b \
Creating and Freeing a SynthInstrument\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b init
\b0 	Initializes a new object\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\f1 -
\f0  
\b copy
\b0 	Creates and returns a new SynthInstrument as a copy of the object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Like 
\b copy
\b0 , but uses specified zone\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setSynthPatchClass:
\b0\i aSynthPatchClass
\i0 \
	Sets the object's SynthPatch class\

\f1 -
\f0  
\b setSynthPatchClass:
\b0\i aSynthPatchClass
\i0 \

\pard\tx1440\tx5580\tx5760\b\fi-4680\li5760\fc0\cf0 	orchestra:
\b0\i anOrch
\i0 	Sets the object's SynthPatch class and orchestra
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b mute:
\b0\i aMute
\i0 	Sent automatically when 
\i aMute 
\i0 is received\

\f1 -
\f0  
\b clearUpdates
\b0 	Clears any accumulated no-tag noteUpdate state\

\f1 -
\f0  
\b setRetainUpdates:
\b0 (BOOL)
\i yesOrNo
\i0 	\
	Sets whether noteUpdate and controller state is retained from performance to performance\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b synthPatchClass
\b0 	Returns the object's SynthPatch class\

\f1 -
\f0  
\b activeSynthPatches:
\b0\i aTemplate
\i0 	Returns the SynthPatch with the oldest sounding phrase\

\f1 -
\f0  
\b orchestra	
\b0 Returns the object's orchestra or 
\b [Orchestra class]\

\f1\b0 -
\f0  (int)
\b synthPatchCountForPatchTemplate:
\b0\i aTemplate\

\i0 	Returns the number of allocated SynthPatches allocated with 
\i aTemplate\

\f1\i0 -
\f0  (BOOL)
\b doesRetainUpdates
\b0 	Returns whether the object retains updates\

\f1 -
\f0  (int)
\b synthPatchCount
\b0 	Retruns the number of allocated SynthPatches allocated with the default PatchTemplate\

\f1 -
\f0  
\b getUpdates:
\b0 (Note **)
\i aNote	
\i0 Returns the noteUpdate and controller state by reference\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b controllerValues 
\b0 (HashTable **)
\i controllers\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (unsigned short)
\b allocMode
\b0 	Returns the object's allocation mode\

\f1 -
\f0  (int)
\b instanceNumber
\b0 	Returns a unique integer identifying this SynthData.\

\pard\b\li1080\fc0\cf0 \
\
Allocating and Deallocating SynthPatch Objects\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (int)
\b setSynthPatchCount:
\b0 (int)
\i voices	
\i0 Allocates 
\i voices
\i0  SynthPatches with the given template\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b patchTemplate:
\b0\i aTemplate\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (int)
\b setSynthPatchCount:
\b0 (int)
\i voices
\i0 	Allocates 
\i voices
\i0  SynthPatch objects\

\f1 -
\f0  
\b autoAlloc
\b0 	Puts the object in auto allocation mode\

\pard\b\li1080\fc0\cf0 \
\
Performing the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b realizeNote:
\b0\i aNote	
\i0 Sent automatically from 
\i aNoteReceiver
\i0  \

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b fromNoteReceiver:
\b0\i aNoteReceiver\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b preemptSynthPatchFor:
\b0\i aNote 
\b\i0 patches:
\b0\i firstPatch
\i0 \
	You never invoke this method\

\f1 -
\f0  
\b abort
\b0 	Halts the object's synthesis\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use
\b  NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
SynthPatch\
\

\b0\li1080 SynthPatch : Object\
\

\b \
Overridden Methods \
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b alloc
\b0 	Overridden. The Orchestra creates all SynthPatch objects.\
+ 
\b allocFromZone:
\b0 (NXZone *)
\i zone
\i0 	Overridden. The Orchestra creates all SynthPatch objects.\
+ 
\b new
\b0 	Overridden. The Orchestra creates all SynthPatch objects.\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Overridden. The Orchestra creates all SynthPatch objects.\

\f1 -
\f0  
\b copy
\b0 	Overridden. The Orchestra creates all SynthPatch objects.\

\b\fi0\li1080 \
\
Creating and Freeing a SynthPatch\
\

\f1\b0\fi-4680\li5760 -
\f0  
\b init
\b0 	Sent when an instance is created\

\f1 -
\f0  
\b free
\b0 	Same as 
\b [self dealloc]\

\f1\b0 -
\f0  
\b freeSelf
\b0 	Sent before the object is freed\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b dealloc
\b0 	Deallocates the object\

\f1 -
\f0  
\b controllerValues:
\b0\i controllers
\i0 	Sent by the SynthInstrument\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b patchTemplateFor:
\b0\i currentNote
\i0 	Returns the PatchTemplate for the specified note\
+ 
\b orchestraClass
\b0 	Returns the Orchestra class\
+ 
\b defaultPatchTemplate
\b0 	Returns the default PatchTemplate\

\f1 -
\f0  
\b synthInstrument
\b0 	Returns SynthInstrument that owns the object\

\f1 -
\f0  
\b synthElementAt:
\b0 (unsigned)
\i anIndex
\i0 	\
	Returns the UnitGenerator or SynthData at 
\i anIndex\

\f1\i0 -
\f0  (int )
\b status
\b0 	Returns the object's status\

\f1 -
\f0  (BOOL )
\b isEqual:
\b0\i anObject
\i0 	Compares the object's noteTag with that of the 
\i anObject\

\f1\i0 -
\f0  (unsigned )
\b hash
\b0 	Returns a hash value based on the object's noteTag\

\f1 -
\f0  
\b patchTemplate
\b0 	Returns the object's PatchTemplate\

\f1 -
\f0  (int )
\b noteTag
\b0 	Returns the object's current noteTag\

\f1 -
\f0  
\b orchestra
\b0 	Returns the object's Orchestra\

\f1 -
\f0  (BOOL )
\b isFreeable
\b0 	Returns whether the object is freeable\

\f1 -
\f0  
\b next
\b0 	Return next active SynthPatch\

\f1 -
\f0  (MKPhraseStatus)
\b phraseStatus
\b0 	Returns the object's phrase status\

\pard\b\li1080\fc0\cf0 \
\
Performing\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b preemptFor:
\b0\i aNote
\i0 	Sent when the object is preempted\

\f1 -
\f0  
\b noteOn:
\b0\i aNote
\i0 	Starts or rearticulates a note\

\f1 -
\f0  
\b noteUpdate:
\b0\i aNote
\i0 	Update the currently-synthesized note\

\f1 -
\f0  (double )
\b noteOff:
\b0\i aNote
\i0 	Begin release portion of the current note\

\f1 -
\f0  
\b noteEnd
\b0 	Concludes the current note\

\pard\b\li1080\fc0\cf0 \
\
Defining Performance Behavior\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b noteOnSelf:
\b0\i aNote
\i0 	Specifies behavior in response to a noteOn\

\f1 -
\f0  
\b noteUpdateSelf:
\b0\i aNote
\i0 	Specifies behavior in response to a noteUpdate\

\f1 -
\f0  (double )
\b noteOffSelf:
\b0\i aNote
\i0 	Specifies behavior in response to a noteOff\

\f1 -
\f0  
\b noteEndSelf
\b0 	Specifies behavior at the end of a note\

\f1 -
\f0  
\b moved:
\b0\i aUG
\i0 	Sent by the Orchestra during memory compaction\

\pard\b\li720\fc0\cf0 \
\
\
TuningSystem\
\

\b0\li1080 TuningSystem : Object\
\

\b \
Creating and Freeing a TuningSystem\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b init	
\b0 Initializes a new 12-tone equal-tempered TuningSystem\

\f1 -
\f0  
\b initFromInstalledTuningSystem
\b0 	Initializes a TuningSystem tuned to the installed tuning system\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i aZone
\i0 	Same as 
\b copy
\b0 , but uses 
\i aZone\

\f1\i0 -
\f0  
\b copy
\b0 	Creates and returns a new TuningSystem as a copy of the object\

\f1 -
\f0  
\b free
\b0 	Frees the object\

\pard\b\li1080\fc0\cf0 \
\
Tuning the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setTo12ToneTempered
\b0 	Sets the object's tuning to 12-tone equal-tempered\

\f1 -
\f0  
\b install
\b0 	Installs the object's tuning as the installed tuning system\

\f1 -
\f0  
\b setKeyNum:
\b0 (MKKeyNum )
\i aKeyNum\
	
\i0 Tunes the object's 
\i aKeyNum
\i0  key number to 
\i freq\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b toFreq:
\b0 (double)
\i freq\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setKeyNumAndOctaves:
\b0 (MKKeyNum )
\i aKeyNum\
	
\i0 Tunes the object's 
\i aKeyNum
\i0  and its octaves to\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b toFreq:
\b0 (double)
\i freq
\i0 		octaves of 
\i freq\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b transpose:
\b0 (double)
\i semitones
\i0 	Transposes the object by 
\i semitones
\i0  half-steps\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (double)
\b freqForKeyNum:
\b0 (MKKeyNum )
\i aKeyNum\

\i0 	Returns the object's frequency for 
\i aKeyNum\

\pard\b\i0\li1080\fc0\cf0 \
\
Tuning the Installed Tuning System\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b setKeyNum:
\b0 (MKKeyNum )
\i aKeyNum\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b toFreq:
\b0 (double)
\i freq
\i0 	\
		Tunes the installed system's 
\i aKeyNum
\i0  key number \
			to 
\i freq\

\pard\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 + 
\b setKeyNumAndOctaves:
\b0 (MKKeyNum )
\i aKeyNum\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b toFreq:
\b0 (double)freq
\i 	
\i0 Tunes the installed system's 
\i aKeyNum
\i0  and its octaves\

\pard\tx5580\tx5760\fi-4680\li5760\fc0\cf0 + 
\b transpose:
\b0 (double)
\i semitones
\i0 	Transposes the installed tuning system by 
\i semitones
\i0  half-steps\

\pard\b\li1080\fc0\cf0 \
\
Querying the Installed Tuning System\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (double)
\b freqForKeyNum:
\b0 (MKKeyNum )
\i aKeyNum\

\i0 	Returns the installed frequency for 
\i aKeyNum\

\pard\b\i0\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use
\b  NXReadObject()
\b0  to unarchive.\

\pard\b\li720\fc0\cf0 \
\
\
UnitGenerator\
\

\b0\li1080 UnitGenerator : Object\
\

\b \
Overridden Methods \
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + 
\b alloc
\b0 	Overridden. The Orchestra creates all UnitGenerator objects.\
+ 
\b allocFromZone:
\b0 (NXZone *)
\i zone
\i0 	Overridden. The Orchestra creates all UnitGenerator objects.\
+ 
\b new
\b0 	Overridden. The Orchestra creates all UnitGenerator objects.\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Overridden. The Orchestra creates all UnitGenerator objects.\

\f1 -
\f0  
\b copy
\b0 	Overridden. The Orchestra creates all UnitGenerator objects.\

\pard\b\li1080\fc0\cf0 \
\
Modifying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b init	
\b0 Initializes the object\

\f1 -
\f0  
\b freeSelf
\b0 	Sent just before freeing\

\f1 -
\f0  
\b free
\b0 	Same as 
\b [self dealloc]\

\f1\b0 -
\f0  
\b dealloc
\b0 	Deallocates the object\

\f1 -
\f0  
\b setDatumArg:
\b0 (unsigned )
\i argNum	
\i0 Sets datum-valued argument 
\i argNum
\i0  to 
\i val\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b to:
\b0 (DSPDatum )
\i val\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setDatumArg:
\b0 (unsigned)
\i argNum	
\i0 Sets datum-valued argument 
\i argNum
\i0  to 
\i val\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b toLong:
\b0 (DSPLongDatum *)
\i val\

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  
\b setAddressArg:
\b0 (unsigned )
\i argNum 
\b\i0 to:
\b0\i memoryObj
\i0 \
	Sets the address-valued argument 
\i argNum
\i0  to 
\i memoryObj\

\f1\i0 -
\f0  
\b setAddressArg:
\b0 (unsigned )
\i argNum 
\b\i0 toInt:
\b0 (DSPAddress)
\i address\

\i0 	Sets the address-valued argument 
\i argNum
\i0  to 
\i address\

\f1\i0 -
\f0  
\b setAddressArgToSink:
\b0 (unsigned )
\i argNum
\i0 \
	Sets the address-valued argument 
\i argNum
\i0  to the sink patchpoint\

\f1 -
\f0  
\b setAddressArgToZero:
\b0 (unsigned )
\i argNum
\i0 \
	Sets the address-valued argument 
\i argNum
\i0  to the zero patchpoint\
+ 
\b enableErrorChecking:
\b0 (BOOL)
\i yesOrNo
\i0 \
	Sets whether error checking code is invoked\

\pard\b\li1080\fc0\cf0 \
\
Running the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b run
\b0 	Tells the object to start running\

\f1 -
\f0  
\b runSelf
\b0 	Subclass run routine; default does nothing\

\f1 -
\f0  (double )
\b finish
\b0 	Tells the object to finish running\

\f1 -
\f0  (double )
\b finishSelf
\b0 	Subclass finish routine; default does nothing\

\f1 -
\f0  
\b idle
\b0 	Tells the object to become idle\

\f1 -
\f0  
\b idleSelf
\b0 	Subclass idle routine; default does nothing\

\f1 -
\f0  
\b moved
\b0 	Sent if the Orchestra had to move the object during compaction.  Default does nothing.\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\b0\fi-4680\li5760\fc0\cf0 + (MKMasterUGStruct *)
\b masterUGPtr
\b0 \
	Returns the object's master structure\
+ (MKLeafUGStruct *)
\b classInfo
\b0 	Returns the object's leaf structure\
+ (unsigned )
\b argCount
\b0 	Returns the number of memory arguments in the object's DSP code\
+ (BOOL)
\b shouldOptimize:
\b0 (unsigned)
\i arg
\i0 \
	YES if 
\i arg
\i0  should be optimized; default always returns NO\

\f1 -
\f0  (int )
\b status
\b0 	Returns the object's status\

\f1 -
\f0  (MKOrchMemStruct *)
\b relocation
\b0 	Returns a pointer to the object's DSP location structure\

\f1 -
\f0  (BOOL )
\b runsAfter:
\b0\i aUnitGenerator
\i0 	YES if the argument runs after the object\

\f1 -
\f0  (unsigned )
\b argCount
\b0 	Returns the number of memory arguments in the object's DSP code\

\f1 -
\f0  (MKLeafUGStruct *)
\b classInfo
\b0 	Returns a pointer to the object's leaf structure\

\f1 -
\f0  (MKOrchMemStruct *)
\b resources
\b0 	Returns a pointer to object's memory requirements structure\
+ (char *)
\b argName:
\b0 (unsigned )
\i argNum
\i0 	Returns the name of the object's 
\i argNum
\i0 'th DSP code argument\
+ 
\b orchestraClass
\b0 	Returns the Orchestra class object\

\f1 -
\f0  
\b orchestra
\b0 	Returns the object's Orchestra object\

\f1 -
\f0  
\b synthPatch
\b0 	Returns the object's SynthPatch\

\f1 -
\f0  (BOOL )
\b isFreeable
\b0 	YES if the object may be freed (used by Orchestra)\

\f1 -
\f0  (BOOL )
\b isAllocated
\b0 	YES if the object has been allocated (used by Orchestra)\
+ (DSPMemorySpace )
\b argSpace:
\b0 (unsigned )
\i argNum
\i0 \
	Returns the memory space to or from which the argument 
\i argNum
\i0  reads or writes\

\f1 -
\f0  (int)
\b referenceCount
\b0 	Returns the reference count\

\f1 -
\f0  (int)
\b instanceNumber
\b0 	Returns a unique integer identifying this UnitGenerator\

\f1 -
\f0  
\b writeSymbolsToStream:
\b0 (NXStream *)
\i s\

\i0 	Writes object DSP .lod symbols to specifed stream.\

\pard\b\li720\fc0\cf0 \
\
\
WaveTable\
\

\b0\li1080 WaveTable : Object\
\

\b \
Creating a WaveTable Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0\b  init
\b0 	Initializes a new object\

\f1 -
\f0  
\b copyFromZone:
\b0 (NXZone *)
\i zone
\i0 	Same as 
\b copy
\b0  but uses 
\i zone\

\f1\i0 - 
\f0\b copy
\b0 	Creates and returns a new WaveTable as a copy of the object\

\f1 -
\f0  
\b free
\b0 	Frees the object and its data arrays\

\pard\b\li1080\fc0\cf0 \
\
Querying the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (int)
\b length
\b0 	Returns the length, in samples, of the data arrays\

\f1 -
\f0  (double)
\b scaling
\b0 	Returns the amplitude scaling factor\

\pard\b\li1080\fc0\cf0 \
\
Computing the Waveform\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  
\b fillTableLength:
\b0 (int)
\i aLength	
\i0 Computes the object's data; a subclass responsibility\

\pard\tx1440\tx5580\tx5760\fi-4680\li5760\fc0\cf0 	
\b scale:
\b0 (double)
\i aScaling\

\pard\b\i0\li1080\fc0\cf0 \
\
Retrieving Data\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 -
\f0  (DSPDatum *)
\b dataDSPLength:
\b0 (int)
\i aLength\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b scale:
\b0 (double)
\i aScaling	
\i0 Returns a pointer to the object's 
\b dataDSP 
\b0 array
\i \

\pard\tx5580\tx5760\f1\i0\fi-4680\li5760\fc0\cf0 -
\f0  (double *)
\b dataDoubleLength:
\b0 (int)
\i aLength\

\pard\tx1440\tx5580\tx5760\i0\fi-4680\li5760\fc0\cf0 	
\b scale:
\b0 (double)
\i aScaling	
\i0 Returns a pointer to the object's 
\b dataDouble 
\b0 array\

\pard\tx5580\tx5760\f1\fi-4680\li5760\fc0\cf0 -
\f0  (DSPDatum *)
\b dataDSP
\b0 	Returns a pointer to the object's 
\b dataDSP
\b0  array\

\f1 -
\f0  (DSPDatum *)
\b dataDSPLength:
\b0 (int)
\i aLength
\i0 \
	Returns a pointer to the object's 
\b dataDSP
\b0  array\

\f1 -
\f0  (DSPDatum *)
\b dataDSPScale:
\b0 (double)
\i aScaling
\i0 \
	Returns a pointer to the object's 
\b dataDSP
\b0  array\

\f1 -
\f0  (double *)
\b dataDouble
\b0 	Returns a pointer to the object's 
\b dataDouble
\b0  array\

\f1 -
\f0  (double *)
\b dataDoubleLength:
\b0 (int)
\i aLength
\i0 \
	Returns a pointer to the object's 
\b dataDouble
\b0  array\

\f1 -
\f0  (double *)
\b dataDoubleScale:
\b0 (double)
\i aScaling
\i0 \
	Returns a pointer to the object's 
\b dataDouble
\b0  array\

\pard\b\li1080\fc0\cf0 \
\
Archiving the Object\
\

\pard\tx5580\tx5760\f1\b0\fi-4680\li5760\fc0\cf0 - 
\f0\b write:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Archives object.  Use 
\b NXWriteRootObject()
\b0  to archive.\

\f1 - 
\f0\b read:
\b0 (NXTypedStream *)
\i aTypedStream
\i0 \
	Unarchives object.  Use 
\b NXReadObject()
\b0  to unarchive.\
\

\pard\tx2520\tx2880\tx3240\li2160\fc0\cf0 \
\
\
\
\

}
