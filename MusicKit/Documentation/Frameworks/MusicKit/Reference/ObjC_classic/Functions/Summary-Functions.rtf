{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f3\fmodern Courier;}
\paperw12240
\paperh13060
\margl0
\margr0
\pard\tx2520\tx2880\tx3240\f0\b0\i0\ulnone\fs28\li2160\fc0\cf0 \
\
\
\
\

\pard\b\li720\fc0\cf0 \
\
\
Music and DSP Functions\
\

\pard\tx2520\tx2880\tx3240\b0\li2160\fc0\cf0 Listed below are summaries of the functions defined by the Music Kit.   See Documentation/Music for full descriptions of these functions.\
\

\pard\b\li1440\fc0\cf0 \
\
Music Kit Functions\
\

\b0 \
Convert amplitude to and from MIDI values:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 int 
\b 	MKAmpToMidi(
\b0 double 
\i amp
\b\i0 )\

\b0 int 
\b 	MKAmpAttenuationToMidi(
\b0 double 
\i amp
\b\i0 )\

\b0 double 
\b 	MKMidiToAmp(
\b0 int 
\i midiValue
\b\i0 )\

\b0 double 
\b 	MKMidiToAmpAttenuation(
\b0 int 
\i midiValue
\b\i0 )\

\b0 double 
\b 	MKMidiToAmpWithSensitivity(
\b0 int 
\i midiValue
\i0 , double
\b  
\b0\i sensitivity
\b\i0 )\

\b0 double 
\b 	MKMidiToAmpAttenuationWithSensitivity(
\b0 int 
\i midiValue
\i0 , double
\b  
\b0\i sensitivity
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Convert decibels to amplitude:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 double	
\b MKdB(
\b0 double 
\i dB
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Handle Music Kit errors:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 id	
\b MKError(
\b0 char *
\i msg
\b\i0 )\

\b0 void	
\b MKSetErrorProc(
\b0 void 
\i (
\i0 *
\i errProc)(char
\i0  *
\i msg)
\b\i0 )\

\b0 void	
\b MKSetErrorStream(
\b0 NXStream *
\i aStream
\b\i0 )\

\b0 NXStream*	
\b MKErrorStream()\

\pard\b0\li1440\fc0\cf0 \
\
Set and get Music Kit time values:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 double	
\b MKGetTime()\

\b0 double	
\b MKGetDeltaT()\

\b0 void
\b 	MKSetDeltaT(
\b0 double 
\i val
\b\i0 )\

\b0 double	
\b MKGetDeltaTTime()\

\b0 void	
\b MKFinishPerformance()\

\b0 double	
\b MKSetTime(
\b0 double 
\i newTime
\b\i0 )\

\b0 void	
\b MKSetDeltaTMode(
\b0 int 
\i mode
\b\i0 )\

\b0 int	
\b MKGetDeltaTMode()\

\pard\b0\li1440\fc0\cf0 \
\
Test for no 
\b double
\b0  value:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 int 	
\b MKIsNoDVal(
\b0 double 
\i value
\b\i0 )\

\b0 double 
\b 	MKGetNoDVal()\

\pard\b0\li1440\fc0\cf0 \
\
Query for a Note's parameters:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 BOOL 
\b 	MKIsNoteParPresent(
\b0 Note *
\i aNote
\i0 , int 
\i par
\b\i0 )\

\b0 void *	
\b MKInitParameterIteration(
\b0 Note *
\i aNote
\b\i0 )\

\b0 int 
\b 	MKNextParameter(
\b0 Note *
\i aNote
\i0 ,
\b  
\b0 void *
\i iterationState
\b\i0 )\

\b0 int 
\b 	MKHighestPar(
\b0 void
\b )\

\pard\b0\li1440\fc0\cf0 \
\
Convert and adjust frequencies:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 double	
\b MKKeyNumToFreq(
\b0 MKKeyNum 
\i keyNum
\b\i0 )\

\b0 MKKeyNum\
	
\b MKFreqToKeyNum(
\b0 double 
\i freq
\i0 , int *
\i bendPtr
\i0 , double 
\i sensitivity
\b\i0 )\

\b0 double	
\b MKAdjustFreqWithPitchBend(
\b0 double 
\i freq
\i0 , int 
\i pitchBend
\i0 , double 
\i semitones
\b\i0 )\

\b0 double
\b 	MKTranspose(
\b0 double 
\i freq
\i0 , double 
\i semitones
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Identify and return objects by name:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 BOOL	
\b MKNameObject(
\b0 char *
\i name
\i0 , id 
\i object
\b\i0 )\

\b0 const char *	
\b MKGetObjectName(
\b0 id 
\i object
\b\i0 )\

\b0 id	
\b MKRemoveObjectName(
\b0 id 
\i object
\b\i0 )\

\b0 id	
\b MKGetNamedObject(
\b0 char *
\i name
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Create and manipulate Conductor message requests:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 MKMsgStruct *\
	
\b MKNewMsgRequest(
\b0 double
\i  timeOfMsg
\i0 , SEL
\i  whichSelector
\i0 , id
\i  destinationObject
\i0 , int
\i  argCount
\i0 ,
\i  ...
\b\i0 )\

\b0 void
\b  	MKScheduleMsgRequest(
\b0 MKMsgStruct *
\i aMsgStructPtr
\i0 , id
\i  conductor
\b\i0 )\

\b0 MKMsgStruct *\
	
\b MKRepositionMsgRequest(
\b0 MKMsgStruct *
\i aMsgStructPtr
\i0 ,
\b  \

\b0 double 
\i newTimeOfMsg
\b\i0 )\

\b0 MKMsgStruct *\
	
\b MKCancelMsgRequest(
\b0 MKMsgStruct *
\i aMsgStructPtr
\b\i0 )\

\b0 MKMsgStruct *\
	
\b MKRescheduleMsgRequest(
\b0 MKMsgStruct *
\i aMsgStructPtr
\i0 ,
\i  
\i0 id 
\i conductor
\i0 ,
\i  
\i0 double 
\i newTimeOfMsg
\i0 ,
\i  
\i0 SEL 
\i whichSelector
\i0 ,
\i  
\i0 id 
\i destinationObject
\i0 ,
\i  
\i0 int 
\i argCount
\i0 ,
\i  ...
\b\i0 )\

\b0 \

\pard\li1440\fc0\cf0 \
Create note tags:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 unsigned int	
\b MKNoteTag()\

\b0 unsigned int	
\b MKNoteTags(
\b0 unsigned int 
\i n
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Set and retrieve scorefile creation classes:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 BOOL 
\b 	MKSetNoteClass(
\b0 Note *
\i noteSubclass
\b\i0 )\

\b0 BOOL 
\b 	MKSetPartClass(
\b0 Part *
\i partSubclass
\b\i0 )\

\b0 BOOL 
\b 	MKSetEnvelopeClass(
\b0 Envelope *
\i envelopeSubclass
\b\i0 )\

\b0 BOOL 
\b 	MKSetPartialsClass(
\b0 Partials *
\i partialsSubclass
\b\i0 )\

\b0 BOOL 
\b 	MKSetSamplesClass(
\b0 Samples *
\i samplesSubclass
\b\i0 )\

\b0 Note *
\b 	MKGetNoteClass()\

\b0 Part *
\b 	MKGetPartClass()\

\b0 Envelope *
\b 	MKGetEnvelopeClass()\

\b0 Partials *
\b 	MKGetPartialsClass()\

\b0 Samples *
\b 	MKGetSamplesClass()\

\pard\b0\li1440\fc0\cf0 \
\
Set and retrieve a Note's parameters:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 Note *	
\b MKSetNoteParToDouble(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\i0 , double
\b  
\b0\i value
\b\i0 )\

\b0 Note *	
\b MKSetNoteParToInt(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\i0 , int
\b  
\b0\i value
\b\i0 )\

\b0 Note *	
\b MKSetNoteParToString(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\i0 , char *
\i value
\b\i0 )\

\b0 Note *	
\b MKSetNoteParToEnvelope(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\i0 , Envelope *
\i value
\b\i0 )\

\b0 Note *	
\b MKSetNoteParToWaveTable(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\i0 ,WaveTable *
\i value
\b\i0 )\

\b0 Note *	
\b MKSetNoteParToObject(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\i0 , Object *
\i value
\b\i0 )\

\b0 double 
\b 	MKGetNoteParAsDouble(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\b0 int 
\b 	MKGetNoteParAsInt(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\b0 char *	
\b MKGetNoteParAsString(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\b0 char *	
\b MKGetNoteParAsStringNoCopy(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\b0 Envelope *	
\b MKGetNoteParAsEnvelope(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\b0 WaveTable *\
	
\b MKGetNoteParAsWaveTable(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\b0 Object *	
\b MKGetNoteParAsObject(
\b0 Note *
\i aNote
\i0 , int
\b  
\b0\i par
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Set the SynthPatch preemption time:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 void
\b  	MKSetPreemptDuration(
\b0 double 
\i seconds
\b\i0 )\

\b0 double
\b  	MKGetPreemptDuration()\

\pard\b0\li1440\fc0\cf0 \
\
Trouble-shoot the Music Kit:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 unsigned int	
\b MKSetTrace(
\b0 int 
\i traceCode
\b\i0 )\

\b0 unsigned int	
\b MKClearTrace(
\b0 int 
\i traceCode
\b\i0 )\

\b0 BOOL	
\b MKIsTraced(
\b0 int 
\i traceCode
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Apply a DSP-synthesis envelope during a performance:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 int	
\b MKUpdateAsymp(
\b0 int 
\i status
\i0 , id 
\i asymp
\i0 , id 
\i envelope
\i0 , double 
\i val0
\i0 , double 
\i val1
\i0 , double 
\i attDur
\i0 , double 
\i relDur
\i0 , double 
\i portamento
\b\i0 )\

\pard\b0\li1440\fc0\cf0 \
\
Miscellaneous scorefile functions:\

\pard\tx3240\fi-2880\li4680\fc0\cf0 void	
\b MKWritePitchNames(
\b0 BOOL 
\i usePitchNames
\b\i0 )\

\b0 void	
\b MKWriteKeyNumNames(
\b0 BOOL 
\i usePitchNames
\b\i0 )\

\b0 void	
\b MKSetScorefileParseErrorAbort(
\b0 int 
\i count
\b\i0 )\

\pard\li1440\fc0\cf0 \
\
\

}
