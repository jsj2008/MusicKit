{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f2\fmodern Ohlfs;}
\paperw16220
\paperh13060
\margl120
\margr0
\f0\b0\i0\ulnone\ql\fs24\fi0\li0\gray0\fc0\cf0\up0\dn0 Release 2.0  Copyright 
\f1 ã
\f0 1990 by NeXT Computer, Inc.  All Rights Reserved.\
\

\pard\tx2620\tx3120\tx3620\fs16\li2100\fc0\cf0 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\fs56\li2100\fc0\cf0 Appendix A\
Summary of ScoreFile Language Syntax\

\fs16 \
\
\
\
\
\
\
\
\

\pard\tx2620\tx3120\tx3620\fs28\li2100\fc0\cf0 This appendix gives a succinct summary of the syntax of the ScoreFile language.  The file 
\b ScoreFileRef.rtf
\b0  provides a general description and explanation of ScoreFile syntax and ScoreFile program organization.\
\
Also see 
\b ScoreFileUpdate.rtf
\b0  for recent additions to the language.\

\fs16 \

\pard\b\li100\fc0\cf0 \
\
\

\fs36 Program Structure\

\fs16 \

\pard\tx2620\tx3120\tx3620\b0\i\fs28\li2100\fc0\cf0 scorefile
\i0 :\
	[ 
\i header
\i0  ] [ 
\b BEGIN
\b0  
\b ;
\b0  [ 
\i body
\i0  [ 
\b END
\b0  ; ] ] ]\

\fs16 \

\i\fs28 header
\i0 :\
	
\i headerStatement
\i0  
\b ;
\b0  [ 
\i header
\i0  ]\

\fs16 \

\i\fs28 headerStatement
\i0 :\
	
\i scoreInfoStatement\

\i0 	
\i partDeclaration
\i0  \
	
\i partInfoStatement\

\i0 	
\i tagRangeDeclaration
\i0  \
	
\i headerOrBodyStatement
\i0  \

\fs16 \

\i\fs28 body
\i0 :\
	
\i bodyStatement
\i0  
\b ;
\b0  [ 
\i body
\i0  ]\

\fs16 \

\i\fs28 bodyStatement
\i0 :\
	
\i timeStatement
\i0  \
	
\i noteStatement\

\i0 	
\i headerOrBodyStatement
\i0  \

\fs16 \

\i\fs28 headerOrBodyStatement
\i0 :\
	
\i variableDeclaration
\i0  \
	
\i envelopeDeclaration
\i0  \
	
\i waveTableDeclaration
\i0  \
	
\i objectDeclaration
\i0  \
	
\i assignmentStatement
\i0  \
	
\i includeStatement
\i0  \
	
\i printStatement
\i0  \
	
\i tuneStatement
\i0  \
	
\i commentStatement
\i0  \
	
\i endCommentStatement\

\fs16 \

\pard\b\i0\li100\fc0\cf0 \
\

\fs36 Header Statements\

\fs16 \

\pard\tx2620\tx3120\tx3620\b0\i\fs28\li2100\fc0\cf0 scoreInfoStatement
\i0 :\
	
\b info
\b0  [
\b  ,
\b0  
\i parameters
\i0  ]\

\fs16 \

\i\fs28 partDeclaration
\i0 :\
	
\b part
\b0  
\i partList\

\fs16 \

\fs28 partList
\i0 :\
	
\i partName
\i0  [
\b  ,
\b0  
\i partList
\i0  ]\

\fs16 \

\i\fs28 partName
\i0 :\
	
\i identifier\

\fs16 \

\fs28 partInfoStatement
\i0 :\
	
\i partName
\i0  [
\b  ,
\b0  
\i parameters
\i0  ]\

\fs16 \

\i\fs28 tagRangeDeclaration
\i0 :\
	
\b tagRange
\b0  
\i integer
\i0  
\b to
\b0  
\i integer\

\fs16 \

\pard\b\i0\li100\fc0\cf0 \
\

\fs36 Header or Body Statements\

\fs16 \

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100\fc0\cf0 The large, bold brackets, braces, and parentheses in the components of the envelope, waveTable, and object declarations below are to be typed where shown.\

\fs16 \

\i\fs28 variableDeclaration
\i0 :\
	
\i dataType
\i0  
\i initVariableList\

\fs16 \

\fs28 dataType
\i0 :\
	
\b double
\b0  \
	
\b int
\b0  \
	
\b string
\b0  \
	
\b var
\b0  \
	
\b obj
\b0  \
	
\b wave
\b0  \
	
\b env\

\fs16 \

\b0\i\fs28 initVariableList
\i0 :\
	
\i initVariable
\i0  [ 
\b ,
\b0  
\i initVariableList
\i0  ]\

\fs16 \

\i\fs28 initVariable
\i0 :\
	
\i identifier
\i0  [ 
\b =
\b0  
\i expression
\i0  ]\

\fs16 \

\i\fs28 envelopeDeclaration
\i0 :\
	
\b envelope
\b0  
\i envelopeName
\i0  
\b =
\b0  
\i envelopeConstant\

\fs16 \

\fs28 envelopeName
\i0 :\
	
\i identifier\

\fs16 \

\fs28 envelopeConstant
\i0 :\
	
\b\fs36 [
\b0\fs28  
\i envelopePointList
\i0  
\b\fs36 ] \

\fs16 \

\b0\i\fs28 envelopePointList
\i0 :\
	
\i envelopePoint
\i0  [ 
\b ,
\b0  
\i envelopePointList
\i0  ]\

\fs16 \

\i\fs28 envelopePoint
\i0 :\
	
\b\fs36 (
\b0\fs28  
\i xValue
\i0  
\b ,
\b0  
\i yValue
\i0  [ 
\b ,
\b0  
\i smoothingValue
\i0 ] 
\b\fs36 )\

\fs16 \

\b0\i\fs28 waveTableDeclaration
\i0 :\
	
\b waveTable
\b0  
\i waveTableName
\i0  
\b =
\b0  
\i waveTableConstant\

\fs16 \

\fs28 waveTableName
\i0 :\
	
\i identifier\

\fs16 \

\fs28 waveTableConstant
\i0 :\
	
\b\fs36 [
\b0\fs28  
\i partialsList
\i0  
\b\fs36 ]
\b0\fs28  \
	
\b\fs36 [
\b0  
\b \{
\b0\fs28  
\i soundfileName
\i0  
\b\fs36 \}
\b0  
\b ]\

\fs16 \

\b0\i\fs28 partialsList
\i0 :\
	
\i partial
\i0  [ 
\b ,
\b0  
\i partialsList
\i0  ]\

\fs16 \

\i\fs28 partial
\i0 :\
	
\b\fs36 \{
\b0\fs28  
\i frequencyRatio
\i0  
\b ,
\b0  
\i amplitudeRatio
\i0  [ 
\b ,
\b0  
\i phase
\i0  ] 
\b\fs36 \}\

\fs16 \

\b0\i\fs28 soundfileName
\i0 :\
	
\i fileName\

\fs16 \

\fs28 fileName
\i0 :\
	
\b "
\b0\i fileName
\b\i0 "\

\fs16 \

\b0\i\fs28 objectDeclaration
\i0 :\
	
\b object
\b0  
\i objectName
\i0  
\b =
\b0  
\i objectConstant\

\fs16 \

\fs28 objectName
\i0 :\
	
\i identifier\

\fs16 \

\fs28 objectConstant
\i0 :\
	
\b\fs36 [
\b0\fs28  
\i className
\i0  
\i objectDescription
\i0  
\b\fs36 ]\

\fs16 \

\b0\i\fs28 objectDescription
\i0 :\
	defined by 
\i className; 
\i0 can contain anything except 
\b ]\

\fs16 \

\b0\i\fs28 assignmentStatement
\i0 :\
	
\i identifier
\i0  
\b =
\b0  
\i expression\

\fs16 \

\fs28 includeStatement
\i0 :\
	
\b include
\b0  
\i fileName\

\fs16 \

\fs28 printStatement
\i0 :\
	
\b print
\b0  
\i expressionList\

\fs16 \

\fs28 expressionList
\i0 :\
	
\i expression
\i0  [ 
\b ,
\b0  
\i expressionList
\i0  ]\

\fs16 \

\i\fs28 tuneStatement
\i0 :\
	
\b tune
\b0  
\i pitchVariable
\i0  
\b =
\b0  
\i expression\
	
\b\i0 tune
\b0\i  expression\

\fs16 \

\fs28 commentStatement
\i0 :\
	
\b comment\

\fs16 \

\b0\i\fs28 endCommentStatement
\i0 :\
	
\b endComment\

\fs16 \

\pard\li100\fc0\cf0 \
\
\
\

\fs36 Body Statements\

\fs16 \

\pard\tx2620\tx3120\tx3620\b0\i\fs28\li2100\fc0\cf0 timeStatement
\i0 :\
	
\b t
\b0  [ 
\b +
\b0  ] 
\i expression\

\fs16 \

\fs28 noteStatement
\i0 :\
	
\i partName
\i0  
\b ,
\b0  
\b (
\b0  
\i typeAndTag
\i0  
\b )
\b0  [ 
\b ,
\b0  
\i parameters
\i0  ]\

\fs16 \

\i\fs28 typeAndTag
\i0 :\
	
\i duration
\i0  [ 
\b ,
\b0  
\i noteTag
\i0  ] \
	
\b noteOn ,
\b0  
\i noteTag
\i0  \
	
\b noteOff
\b0  
\b ,
\b0  
\i noteTag
\i0  \
	
\b noteUpdate
\b0  [ 
\b ,
\b0  
\i noteTag
\i0  ] \
	
\b mute\

\fs16 \

\b0\i\fs28 duration
\i0 :\
	
\i expression\

\fs16 \

\fs28 noteTag
\i0 :\
	
\i integerExpression\

\fs16 \

\fs28 parameters
\i0 :\
	
\i parameter
\i0  [ 
\b ,
\b0  
\i parameters
\i0  ]\

\fs16 \

\i\fs28 parameter
\i0 :\
	
\i parameterName
\i0  
\b :
\b0  
\i parameterValue\

\fs16 \

\fs28 parameterName
\i0 :\
	
\i identifier\

\fs16 \

\fs28 parameterValue
\i0 :\
	
\i expression\

\fs16 \

\pard\b\i0\li100\fc0\cf0 \
\
\
\

\fs36 Operators\

\fs16 \

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100\fc0\cf0 Operators are shown in descending priority.  Operators on the same line are of equal priority; they're processed in the order that they occur in the scorefile.\

\fs16 \

\i\fs28 operator
\i0 :\
	
\i groupingOperator
\i0  \
	
\i prefixOperator
\i0  
\i postfixOperator
\i0  \
	
\i arithmeticOperator
\i0  \
	
\i envelopeLookupOperator
\i0  
\i stringConcatenationOperator
\i0  \
	
\i assignmentOperator
\i0  \
	
\i sequenceSeparator\

\fs16 \

\fs28 groupingOperator
\i0 :\
	
\b ( )\

\fs16 \

\b0\i\fs28 prefixOperator
\i0 :\
	
\f1 -\

\fs16 \

\f0\i\fs28 postfixOperator
\i0 :\
	
\b dB\

\fs16 \

\b0\i\fs28 arithmeticOperator
\i0 :\

\b 	^ ~ \
	* / % \
	+ 
\f1\b0 -\

\fs16 \

\f0\i\fs28 envelopeLookupOperator
\i0 :\

\b 	@\

\fs16 \

\b0\i\fs28 stringConcatenationOperator
\i0 :\

\b 	&\

\fs16 \

\b0\i\fs28 assignmentOperator
\i0 :\

\b 	=\

\fs16 \

\b0\i\fs28 sequenceSeparator
\i0 :\

\b 	,\

\b0\fs16 \

\fs28 \

\fs16 \

\fs28 \

\fs16 \

\pard\b\fs36\li100\fc0\cf0 Constants, Predeclared Variables, and Special Symbols\

\fs16 \

\pard\tx2620\tx3120\tx3620\b0\i\fs28\li2100\fc0\cf0 midiConstants
\i0 :\
	
\i channelModeConstant
\i0  \
	
\i systemRealTimeConstant\

\fs16 \

\fs28 channelModeConstant
\i0 :\
	
\b resetControllers \
	localControlModeOn \
	localControlModeOff \
	allNotesOff \
	omniModeOff \
	omniModeOn \
	monoMode \
	polyMode\

\fs16 \

\b0\i\fs28 systemRealTimeConstant
\i0 :\
	
\b sysClock \
	sysUndefined0xf9 \
	sysStart \
	sysContinue \
	sysStop \
	sysUndefined0xfd \
	sysActiveSensing \
	sysReset\

\fs16 \

\pard\tx2620\tx3620\b0\i\fs28\li2100\fc0\cf0 otherConstants
\i0 :\
	
\i keyNumber
\i0  \
	
\b NO
\b0 	(equal to 0) \
	
\b YES
\b0 	(equal to 1)\

\fs16 \

\pard\tx2620\tx3120\tx3620\i\fs28\li2100\fc0\cf0 predeclaredVariable
\i0 :\
	
\i pitchVariable\

\fs16 \

\i0\fs28 ScoreFile reserves more than 200 keywords for the representation of pitch names and key numbers.  Rather than list the entire set of these keywords, formulas are given here that describe the form of the 
\i keyNumber
\i0  and 
\i pitchVariable
\i0  names.\

\fs16 \

\i\fs28 keyNumber
\i0 :\
	
\i pitchVariable
\b\i0 k\

\fs16 \

\b0\i\fs28 pitchVariable
\i0 :\
	
\i pitchLetter
\i0  [ 
\i sharpOrFlat
\i0  ] 
\i octave\

\fs16 \

\fs28 pitchLetter
\i0 :\
	
\b c \
	d \
	e \
	f \
	g \
	a \
	b\

\fs16 \

\b0\i\fs28 sharpOrFlat
\i0 :\
	
\b s \
	f\

\fs16 \

\b0\i\fs28 octave
\i0 :\
	
\b 00\
	0\
	1\
	2\
	3\
	4\
	5\
	6\
	7\
	8\
	9\

\fs16 \

\b0\fs28 The ScoreFile special symbols are read-only variables that can manipulate their own value.  Special symbols should never be assigned a value in an assignment statement.\

\fs16 \

\i\fs28 specialSymbols
\i0 :\
	
\b t \
	ran\

\fs16 \

\pard\li100\fc0\cf0 \
\
\
\
\
\
\

}
