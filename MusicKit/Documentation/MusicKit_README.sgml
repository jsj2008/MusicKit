<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!entity mkvers "5.2">
<!entity mkvertuple "5.2.0">
<!entity sndvertuple "1.3.0">
]>

<!--
The MusicKit README file, in the original DocBook SGML source.

Edit this file, not the HTML, RTF or LaTeX output.

$Id$
-->

<!-- The preceding entities in doctype describe the revision tuple and the  -->
<!-- exact version tuple of the source code (as a CVS version tag) -->
<!-- this document refers to. -->

<article>

  <artheader>
    <title>The MusicKit V&mkvers;</title>

<!-- TODO
   Add in the MusicKit icon

   Ok, how do we place a logo for the document in the title?
   <informalfigure>
    <mediaobject>
      <imageobject>
	<imagedata FileRef="MK_icon.eps" format="eps">
      </imageobject>
      <imageobject>
	<imagedata FileRef="MK_icon.png" format="png">
      </imageobject>
      <imageobject>
	<imagedata FileRef=".dir.tiff" format="tiff">
      </imageobject>
    </mediaobject>
  </informalfigure>
-->

    <author>
      <firstname>Leigh</firstname> <othername>M.</othername> <surname>Smith</surname>
      <affiliation>
        <orgname>
<ulink url="http://www.tomandandy.com">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.jpg">
	</imageobject>
	<textobject>
	  <phrase>
tomandandy music inc.
</phrase>
        </textobject>
      </inlinemediaobject>
</ulink>
</orgname>
	<address>
          <street>89 Greene Street</street>
          <city>New York</city>, <state>NY</state>
          <postcode>10012</postcode> <country>USA</country>
          <phone>+1-212-334-0421</phone> 
          <fax>+1-212-431-4115</fax> (Fax)
          <email>leigh@tomandandy.com</email>
        </address>
      </affiliation>
    </author>
    <copyright>
      <year>2000</year>
      <holder>The MusicKit Project</holder>
    </copyright>
    <revhistory>
      <revision>
	<revnumber>$Revision$</revnumber>
	<date>$Date$</date>
      </revision>
    </revhistory>

    <abstract>
      <para>
These are overall comments (incorporating original notes by David
A. Jaffe) and serve as the highest level overview of the MusicKit.
      </para>
    </abstract>
  </artheader>

<sect1 id="description">
  <title>Description</title>

  <indexterm>
    <primary>MusicKit</primary>
  </indexterm>

  <para>
The MusicKit is an object-oriented software system for building
music, sound, signal processing, and MIDI applications.  It has been used
in such diverse commercial applications as music sequencers, computer
games, and document processors.  Professors and students in academia
have used the MusicKit in a host of areas, including music
performance, scientific experiments, computer-aided instruction, and
physical modeling.  The MusicKit was the first to unify the MIDI and
Music V paradigms, thus combining interaction with generality.  (Music
V, written by Max Mathews and others at Bell Labs four decades ago,
was the first widely available "computer music compiler".)
   </para>

   <para>
The NeXT MusicKit was first demonstrated at the 1988
NeXT product introduction and was bundled in NeXT software releases
1.0 and 2.0.  Beginning with NeXT's 3.0 release, the MusicKit was no
longer part of the standard NeXT software release.  Instead, it was
being distributed and supported by the Center for Computer  Research
in Music and Acoustics (CCRMA) of Stanford University. Since 1999 and
version 5.0, the most recent releases run on several more 
<link linkend="platforms">popular operating systems</link>.
These releases have been generously supported by my employer, 
<ulink url="http://www.tomandandy.com">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.jpg">
	</imageobject>
	<textobject>
	  <phrase>
tomandandy music inc.
</phrase>
        </textobject>
      </inlinemediaobject>
</ulink>
as open source to the community.
   </para>

   <para>
The <link linkend="availability">MusicKit Distribution</link> is a
comprehensive package that includes on-line documentation, <link
linkend=examples>programming examples</link>, <link
linkend=applications>utilities, applications</link> and sample score
documents. The MusicKit is dependent on the SndKit distribution,
originally written by Stephen Brandon, and both Framework collections
are available at the same distribution site.
</para>

<para>
Source code is available for everything, with
the exception of the NeXT hardware implementation of the low-level
sound and DSP drivers.  This means researchers and developers may
study the source or even customize the Music Kit and DSP Tools to suit
their needs.  Enhancements can be sent to 
<email>leigh@tomandandy.com</email>
to have them incorporated for future releases. Commercial software
developers may freely incorporate and adapt the software to accelerate
development of software products.
</para>

    <sect2 id=features>
      <title>Feature List</title>
      <para>
The following is a partial list of the highlights of the Music Kit
provided by David Jaffe on his <link linkend=otherlinks>web-page</link>: 
</para>

      <itemizedlist>
	<listitem>
	  <para>
Applicable to composers writing real-time computer music applications.
</para>
	</listitem>
	<listitem>
	  <para>
Applicable to programmers writing cross-platform audio/music applications.
</para>
	</listitem>
	<listitem>
	  <para>
Extensible, high-level object-oriented frameworks that are a super-set
of Music V and MIDI paradigms.
</para>
	</listitem>
	<listitem>
	  <para>
Written in Objective C and C, using Apple's OpenStep/Cocoa API, the
FoundationKit.
</para>
	</listitem>
	<listitem>
	  <para>
Functionally comparable (although architecturally dissimilar) to JMSL
(Java Music Specification Language).
</para>
	</listitem>
	<listitem>
	  <para>
Representation system capable of depicting phrase-level structure such
as legato transitions.
</para>
	</listitem>
	<listitem>
	  <para>
General time management/scheduling mechanism, supporting
synchronization to MIDI time code.
</para>
	</listitem>
	<listitem>
	  <para>
Efficient real-time synthesis and sound processing, including option
for quadraphonic sound.
</para>
	</listitem>
	<listitem>
	  <para>
Fully-dynamic DSP resource allocation system with dynamic linking and
loading, on multiple DSPs.
</para>
	</listitem>
	<listitem>
	  <para>
Complete support for multiple MIDI inputs and outputs.
</para>
	</listitem>
	<listitem>
	  <para>
Digital sound I/O from the DSP port with support for serial port
devices by all popular vendors.
</para>
	</listitem>
	<listitem>
	  <para>
Non-real time mode, where the DSP returns data to the application or
writes a sound file.
</para>
	</listitem>
	<listitem>
	  <para>
Suite of <link linkend=applications>applications</link>, including
<application>Ensemble</application>--an interactive algorithmic
composition and performance environment (including a built-in sampler)
and <application>ScorePlayer</application>.
</para>
	</listitem>
	<listitem>
	  <para>
Library of instruments, including FM, wavetable, physical modeling and
waveshaping synthesis.
</para>
	</listitem>
	<listitem>
	  <para>
Library of unit generators for synthesis and sound processing.
</para>
	</listitem>
	<listitem>
	  <para>
Documentation, programming examples, utilities, including a sound file
mixer, sample rate converter, etc.
</para>
	</listitem>
	<listitem>
	  <para>
ScoreFile, a textual scripting language for music. 
</para>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2 id=otherlinks>
      <title>References at Other Sites</title>

      <itemizedlist>
	<listitem>
	  <para>
             <ulink url="http://ccrma-www.stanford.edu/CCRMA/Overview/hardsoftware.html">
                CCRMA's MusicKit site.
             </ulink>
	   </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.jaffe.com/mk97.html">
                David Jaffe's (the original author) MusicKit site.
            </ulink>
	  </para>
	</listitem>
      </itemizedlist>
    </sect2>
    
    <sect2 id=maillist>
      <title>MusicKit Mail-lists</title>
      <itemizedlist>
	<listitem>
	  <para>
Announcements of new releases are sent to
<email>musickit-announce@lists.sourceforge.net</email>. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-announce">
http://lists.sourceforge.net/mailman/listinfo/musickit-announce</ulink>.
</para>
	</listitem>

	<listitem>
	  <para>
Discussions on development of the MusicKit are sent to
<email>musickit-developer@lists.sourceforge.net</email>. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-developer">
http://lists.sourceforge.net/mailman/listinfo/musickit-developer</ulink>.
</para>
	</listitem>

	<listitem>
	  <para>
Discussions on writing applications using the MusicKit (not developing
it) are sent to
<email>musickit-users@lists.sourceforge.net</email>. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-users">
http://lists.sourceforge.net/mailman/listinfo/musickit-users</ulink>.
</para>
	</listitem>
      </itemizedlist>
      <para>
Don't assume nothing is being done if you don't hear anything for a while!
The maintainers are usually adding fixes/code, but full releases are
less frequent. The <link linkend=fixes>CVS repository</link> can be made available to track all updates.
</para>
    </sect2>

  </sect1>
<sect1 id="furtherdoco">
    <title>Further Documentation</title>

      <itemizedlist>
	<listitem>
	  <para>
Thorough documentation of classes, applications, usage and concepts are found under the directory
<filename class=directory>
./Documentation
</filename>.
</para>
	</listitem>
	<listitem>
	  <para>
Release notes can be found in
<filename class=directory>
./Documentation/Frameworks/MusicKit/ReleaseNotes
</filename>.
</para>
	</listitem>

	<listitem>
	  <para>
The file 
<filename>
./Documentation/ChangeLog
</filename>
lists changes and is generated from the CVS logs.
</para>
</listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="platforms">
    <title>Supported Platforms</title>
    <para>
        The MusicKit currently runs on:
</para>
    <table frame=all><title>MusicKit Supported Platforms</title>
      <tgroup cols=4 colsep=1 rowsep=1>
	<colspec colnum=1 align=left>
	<colspec colnum=2 align=center>
	<colspec colnum=3 align=center>
	<colspec colnum=4 align=center>
	<thead>
	  <row>
	    <entry>Platform</entry>
	    <entry>MIDI</entry>
	    <entry>Sound</entry>
	    <entry>DSP</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>OpenStep 4.2/Intel (with ISA 56k card)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	  </row>
	  <row>
	    <entry>OpenStep 4.2/m68k (NeXT)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	  </row>
	  <row>
	    <entry>Windows 98 (using OpenStep
	    Enterprise, Rhapsody DR2/NT, WebObjects 4.5/NT) (Win2000 untried)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>MacOS X-Server V1.0-1.2</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>MacOS X Public Beta</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="windows">
      <title>Windows support</title>
      <para>
After much fun with the pinnacle of Microsoft development tools, we
have the MusicKit working on Windows9X. The solution was to emulate
the Mach MIDI device driver with the core layer of DirectMusic. There
is a fairly similar match in functionality between these API.
</para>
      <para>
The downloadable sound (DLS) capability of DirectMusic (providing a
MIDI oriented sample playback API to PC soundcards) is also supported
when playing to a DirectMusic software synthesiser. There is minimal
but usable support for downloading new DLS instruments to the software
synthesiser.
</para>
      <para>
While the future
of Apple's OpenStep/YellowBox/Cocoa/WebObjects (!) for Windows support
is far from clear, the combination of Gnu technologies of <ulink
url="http://www.gnustep.org">GnuStep</ulink> and <ulink
url="http://www.cygnus.com/cygwin">cygwin</ulink> would suggest in the
near future that Apple's corporate interests will not dictate whether
applications can be deployed on either platform.
</para>
    </sect2>

    <sect2 id="linux">
      <title>Linux support</title>
      <para>
Intel Linux support is achievable, planned, partially completed and
looking for volunteers. A series of stubs for a performance framework
(<filename>MKPerformSndMIDI.framework</filename>) are in place in
preparation for porting the MusicKit to Linux using the GnuStep
libraries. Further work is needed on this, please help!
</para>
    </sect2>
</sect1>

<sect1 id="history">
    <title>Contributors, History and Acknowledgements</title>
    <subtitle>(As best as LMS has determined from written acknowledgements)</subtitle>
<itemizedlist>
<listitem>
The MusicKit was designed and implemented by David
A. Jaffe <email>david@jaffe.com</email>, and the DSP computer-music
and array-processing software was designed and implemented by Julius
O. Smith III while at NeXT.
The SoundKit (forerunner of the SndKit) was designed and implemented by
Lee Boynton.
Their original design appeared in
<citation>JaffeBoynton89</citation>.
</para></listitem>

<listitem><para>
Michael McNabb brought wave table synthesis to the Music Kit
and designed and built a number of UnitGenerator and SynthPatch
subclasses and contributed the Ensemble application.</para></listitem>

<listitem><para>Douglas Fulton was responsibile
for the documentation and
made substantial design improvements in clarifying general protocol
and the identity and mechanisms of the classes.</para></listitem>

<listitem><para>Gregg Kellogg wrote the DSP, Sound, and
MIDI device drivers for the NeXT which were then maintained by Doug
Mitchell.</para></listitem>

<listitem><para>John Strawn wrote most of the matrix and array processing
macros.</para></listitem>

<listitem><para>Dana Massie contributed speech coding, sampling-rate
conversion, and signal conditioning modules for the Sound Kit.</para></listitem>

<listitem><para>Doug
Keislar helped with testing, developer support, and demos.</para></listitem>

<listitem><para>
Mike Minnick helped finish the DSP array processing tools and
wrote most of the programming examples.</para></listitem>

<listitem><para>Roger Dannenberg influenced
both the MusicKit noteTag design and the design of the performance
mechanism (using a data flow discrete simulation
model).</para></listitem>

<listitem><para>Andy Moorer
helped shape the Envelope strategy, suggested the unit-generator
memory-argument scheme, and provided consultation.</para></listitem>

<listitem><para>The
software of William Schottstaedt and others at CCRMA (Stanford
University) served as a model for some of the mechanisms in the Music
Kit.</para></listitem>

<listitem><para>James A. Moorer, Perry Cook, 
Rob Poor made code and design contributions
also.</para></listitem>

<listitem><para>Following NeXT's release of the source to Stanford in 1994,
David did the port to Intel NeXTStep and the MPU-401 MIDI and DSP
drivers. There were some other bug fix contributors (acknowledged in
code comments).</para></listitem>

<listitem><para>
Stephen Brandon <email>sbrandon@music.gla.ac.uk</email> did the initial
OpenStep port in early 1998 and the majority of the conversion
work.</para></listitem>

<listitem><para>The
MusicKit now uses the SndKit, written by Stephen Brandon, rather than
the SoundKit for its sound processing.</para></listitem>

<listitem><para>Leigh M. Smith <email>leigh@cs.uwa.edu.au</email>, now
<email>leigh@tomandandy.com</email> fixed bugs and ported the MusicKit
and MIDI drivers to Intel and PowerPC Rhapsody in late 1998 and
reorganised the packages and documentation for MacOS X-Server and in
2000, to various developer previews of MacOS X.  The frameworks were
ported to Windows 98/NT using DirectMusic in 1999.</para></listitem>

<listitem><para>DirectSound interface
code was contributed by SKoT McDonald
<email>skot@tomandandy.com</email>.</para></listitem>

<listitem><para>Keith Hamel tested and helped
in bug fixes for the MacOS X-Server version.</para></listitem>
</itemizedlist>
  </sect1>

  <sect1 id="license">
    <title>License</title>

    <para>
The source code as distributed by Stanford (V4.2) included the
following usage message:
</para>

    <blockquote>
      <title>Music Kit Usage</title>
      <para>
The Music Kit software is
distributed free of charge.  Copyright remains with the owner
indicated in each file.   The software may be freely incorporated into
any NeXTstep commercial application, any academic application, or any
musical composition.
</para>
      <para>
We would appreciate your acknowledging the use
of the Music Kit in any academic paper, music program notes and
application documentation that use the Music
Kit.
</para>
    </blockquote>

    <para>
In regard of this version as indicated at the top of this file
(consitituting all changes and modifications, porting efforts and
documentation), I am continuing this usage philosophy. The latest
usage file is found in 
<filename>
./Documentation/Administration/Usage.rtf
</filename>
</para>
  </sect1>

  <sect1 id="VersionNumbering">
    <title>Version numbering of the MusicKit</title>

    <para>
Version numbering of the MusicKit is as follows.
</para>

    <para>
All versions are numbered in the popular standard GNU nomenclature
<replaceable>V.R.P</replaceable>, referred here as a <emphasis>version
tuple</emphasis>, referring to <replaceable>Version</replaceable>,
<replaceable>Revision</replaceable> and
<replaceable>Patch</replaceable>
respectively. <replaceable>Version</replaceable> refers to major
milestones in a project, such as a complete rewrite or major internal
conversion, major functional improvement etc.
<replaceable>Revision</replaceable>, refers to a minor milestone that
can include new functionality that may break external interfacing
software, forcing them to be updated (minimally a recompile).
<replaceable>Patch</replaceable>, refers to a singular bug fix to
correct operation which does not cause an incompatible change or
introduce new behaviour.
</para>

    <para>
Each framework has it's own version tuple. This is encoded in the
framework and is used by the dynamic loader to verify the correct
versions of applications link against the correct versions of
frameworks. However, to allow new framework with patches to be
installed into operational sites without forcing recompiles of the
application, the version tuple encoded in the framework is of the form
<replaceable>V.R</replaceable>.
</para>
  </sect1>

  <sect1 id=availability>
    <title>Availability</title>
    <para>
The MusicKit is listed on the following open source portals:
</para>

    <itemizedlist>
      <listitem>
	<para>
	<ulink url="http://www.freshmeat.net/projects/musickit/">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="freshmeat.eps" width=25 depth=15
			   scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="freshmeat.jpg">
	      </imageobject>
	    </inlinemediaobject>
freshmeat.net
      </ulink>
      </para>
      </listitem>
      <listitem>
	<para>
	<ulink url="http://www.sourceforge.net/projects/musickit">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="sourceforge.eps" width=50 depth=30
			   scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="sourceforge.png">
	      </imageobject>

	    </inlinemediaobject>
sourceforge.net
      </ulink>
</para>
      </listitem>
      <listitem>
	<para>
	<ulink url="http://softrak.stepwise.com/Apps/WebObjects/Softrak.woa/7/wa/displayPackage?package=191&amp;os=10">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="Stepwise.eps" width=50 depth=30 scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="Stepwise.gif">
	      </imageobject>
	    </inlinemediaobject>
SoftTrak on <systemitem class="systemname">stepwise.com</systemitem>
      </ulink>
      </para>
      </listitem>
    </itemizedlist>
    
    <sect2 id=downloads>
      <title>Downloading the Distribution</title>

      <sect3 id=sources>
	<title>Source tarballs</title>
	<para>
The Source files consist of:
</para>
	
	<para>
        <variablelist>
	    <varlistentry>
	      <term>
              <ulink url="http://download.sourceforge.net/musickit/MK_V&mkvertuple;.s.tar.gz">MK_V&mkvertuple;.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
The source to MusicKit, MKDSP, MKPerformSndMIDI,
MKUnitGenerators and MKSynthPatches frameworks and all utilites,
applications, documentation and example code.
              </para>
		<para>
This is the most recent revision and patch. Older revisions are
located at the 
<ulink url="ftp://ftp.tomandandy.com/pub/MusicKit">tomandandy ftp site</ulink>
for regression testing.
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
              <ulink url="http://download.sourceforge.net/musickit/SndKit_V&sndvertuple;.s.tar.gz">SndKit_V&sndvertuple;.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                The version of the SndKit which matches the MusicKit.
              </para>
	    </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
              <ulink url="http://download.sourceforge.net/musickit/ZilogSCCMIDI.s.tar.gz">ZilogSCCMIDI.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                The MacOS X-Server V1.0-1.2 MIDI driver
                source. Probably versions of MacOS X-Server later than
                1.2 will use MacOS X MIDI plugins.
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
               <ulink url="http://www.tomandandy.com/MusicKit/DriverKitHeaders.tar.gz">DriverKitHeaders.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                NS3.3 headers required to compile a driver on MacOS X-Server. 
              </para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
      </para>
      </sect3>

      <sect3 id=support>
	<title>Supporting Libraries</title>
	<para>
The following libraries need to be compiled and installed to compile
the MK source:
</para>
	<variablelist>
	  <varlistentry>
	    <term>
            <ulink url="http://download.sourceforge.net/sox/sox-12.17.tar.gz">sox-12.17.tar.gz</ulink>. 
            </term>
	    <listitem>
	      <para>
              The 
<ulink url="http://www.sourceforge.net/projects/sox">SoX</ulink>
sound tools library provides sound file format conversion.
Newer versions of will probably just work.
              </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 id=binaries>
	<title>Binaries</title>
	<para>
          Binaries for the compiled frameworks for various operating
          systems reside on sourceforge as tar'ed .pkg (Apple/NeXT)
          packages. The files include the version number, choose the
          most recent release:
        </para>

        <para>
	<variablelist>
	    <varlistentry>
	      <term>
            <ulink url="http://download.sourceforge.net/musickit/MK-&mkvertuple;.MOX.pkg.tar">MK-&mkvertuple;.MOX.pkg.tar</ulink>
            </term>
	      <listitem>
		<para>
              The MacOS X frameworks (including the SndKit).
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
            <ulink url="http://download.sourceforge.net/musickit/MK-&mkvertuple;.MOXS.pkg.tar">MK-&mkvertuple;.MOXS.pkg.tar</ulink>
            </term>
	      <listitem>
		<para>
              The MacOS X-Server frameworks (including the SndKit).
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
              <ulink url="http://download.sourceforge.net/musickit/ZilogSCCMIDI.b.tar.gz">ZilogSCCMIDI.b.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                The MacOS X-Server MIDI driver binary for SCC UARTs in 8500/8600/9500/9600/G3/G4 PowerMacs.
              </para>
	      </listitem>
	    </varlistentry>
<!-- TODO
	  <varlistentry>
	    <term>
            <ulink url="http://download.sourceforge.net/musickit/MK-&mkvertuple;.w32.pkg.tar">MK-&mkvertuple;.w32.pkg.tar</ulink>
            </term>
	    <listitem>
	      <para>
              The Windows9X/2000 frameworks (including the SndKit).
              </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
            <ulink url="http://download.sourceforge.net/musickit/MK-&mkvertuple;.linux.rpm">MK-&mkvertuple;.linux.rpm</ulink>
            </term>
	    <listitem>
	      <para>
              The Linux frameworks (including the SndKit).
              </para>
	    </listitem>
	  </varlistentry>
-->
	  </variablelist>
      </para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="appsandexs">
    <title>Included Applications and Example Code</title>

    <sect2 id="applications">
      <title>Applications in the distribution</title>
      <itemizedlist>
	<listitem>    
	  <para><application>ScorePlayer</application> (David Jaffe)</para>
	</listitem>
	<listitem>
	  <para><application>WaveEdit</application> (David Jaffe)</para>
	</listitem>
	<listitem>
	  <para><application>Ensemble</application> (Michael McNabb)</para>
	</listitem>
	<listitem>
	  <para><application>EnvelopeEd</application> (Fernando Lopez Lezcano)</para>
	</listitem>
	<listitem>
	  <para><application>PianoRoll</application> (Jonathan Knudsen)</para>
	</listitem>
	<listitem>
	  <para><application>HosePlayer</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>SlideFlute</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>edsnd</application> (Lee Boynton)</para>
	</listitem>
	<listitem>
	  <para><application>Reich-o-Matic</application> (Brad Garton)</para>
	</listitem>
	<listitem>
	  <para><application>Looching</application> (Brad Garton)</para>
	</listitem>
	<listitem>
	  <para><application>ResoLab</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>ClariNot</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>ResonSound</application> (David Jaffe)</para>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="examples">
      <title>Example code in the distribution</title>
      <itemizedlist>
	<listitem>
	  <para><application>MIDIFilePlayback</application></para>
	</listitem>
	<listitem>
	  <para><application>MidiEcho</application></para>
	</listitem>
	<listitem>
	  <para><application>MidiLoop</application></para>
	</listitem>
	<listitem>
	  <para><application>MidiPlay</application></para>
	</listitem>
	<listitem>
	  <para><application>MidiRecord</application></para>
	</listitem>
	<listitem>
	  <para><application>PerformerExample</application></para>
	</listitem>
	<listitem>
	  <para><application>PlayNote</application></para>
	</listitem>
	<listitem>
	  <para><application>QuintProcessor</application></para>
	</listitem>
	<listitem>
	  <para><application>ResonSound</application></para>
	</listitem>
	<listitem>
	  <para><application>SineGen</application></para>
	</listitem>
	<listitem>
	  <para>playpart</para>
	</listitem>
	<listitem>
	  <para>playscorefile2</para>
	</listitem>
	<listitem>
	  <para>process_soundfiles_dsp</para>
	</listitem>
	<listitem>
	  <para>mixscorefiles</para>
	</listitem>
	<listitem>
	  <para>mixsounds</para>
	</listitem>
	<listitem>
	  <para>playscorefile</para>
	</listitem>
	<listitem>
	  <para>playscorefilemidi</para>
	</listitem>
	<listitem>
	  <para>example1</para>
	</listitem>
	<listitem>
	  <para>example3</para>
	</listitem>
	<listitem>
	  <para>example4</para>
	</listitem>
	<listitem>
	  <para>example5</para>
	</listitem>
	<listitem>
	  <para>exampleSynthPatch</para>
	</listitem>
	<listitem>
	  <para>exampsynthpatch</para>
	</listitem>
	<listitem>
	  <para>exampunitgenerator</para>
	</listitem>
	<listitem>
	  <para>metronome</para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="works">
    <title>What works?</title>
    <para>
The frameworks have been exercised fairly extensively and seem quite
stable. MIDI recording and playback of scores and computed parts works
on all supported platforms. The examples
<application>MIDIFilePlayback</application> and
<command>playscorefilemidi</command> and the utility
<command>playscore</command> demonstrate these capabilities.
</para>

    <sect2 id="installation">
      <title>Installation</title>

      <para>
At the moment, there is no single make operation to build the entire
source tree. The steps are:
</para>

      <orderedlist>
	<listitem>
	  <para>
Compile and install sox into 
<filename class=directory>/usr/local/lib</filename>.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install the appropriate platform specific
<filename>MKPerformSndMIDI</filename> framework.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install <filename>MKDSP_56k</filename> framework if on
OpenStep, Windows or <filename>MKDSP_Native</filename>
framework if on MacOS X-Server or MacOS X Public Beta.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install the <filename>MusicKit</filename> framework.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install <filename>MKUnitGenerators</filename> and
<filename>MKSynthPatches</filename> frameworks if running on
OpenStep. These frameworks won't compile on MacOS X-Server because the
Motorola <command>asm56000</command> and <command>lnk56000</command>
tools are missing. I've asked Apple and Motorola for a MacOS X-Server
port, why don't you also? :-) In theory the 56K assembler runs on
Windows, so it may be possible to run these on Windows, but that is
yet to be tested.
</para>
      <para>
The frameworks will install into <filename
class=directory>/Local/Library/Frameworks</filename> on MacOS
X-Server, <filename
class=directory>/LocalLibrary/Frameworks</filename> on OpenStep and
<filename class=directory>/Library/Frameworks</filename> on MacOS X
Public Beta.
</para>

	</listitem>
	<listitem>
	  <para>
Compile and install applications and examples located in the
directories <filename
class=directory>Applications</filename> and <filename
class=directory>Examples</filename> respectively.
</para>
	</listitem>
      </orderedlist>

      <para>
To compile the MacOS X-Server Zilog SCC MIDI driver, some header files
are missing.  You can get them from the Darwin distribution of the
SoundKit or just copy them from a NeXTStep 3.3/OpenStep 4.2 system.
</para>
    </sect2>

  </sect1>

  <sect1 id="notworking">
    <title>What doesn't work? / What needs doing?</title>

    <itemizedlist>
      <listitem>
	<para>
DSP on non-56K DSP systems. Stephen mentioned he got sound out under
OS4.2. However none of the dsp drivers have been ported from NeXTStep
V3.3 (as they are all ISA bus cards and I don't know of a PCI 56K card
with published interface specs).
</para>
<para>
A more fruitful avenue seems to be to convert the unit generators to
the MPEG Layer 4 structured audio language <ulink
url="http://www.saol.net">SAOL</ulink>
<citation>ScheirerVercoe99</citation> and modify the MKDSP framework
to download to a supporting card or do the emulation using the native
processor.  If emulating with the native processor, it would then be
possible to use Apples AltiVec vector libraries for increased
performance.
</para>
      </listitem>

      <listitem>
	<para>
There are several programs in the <filename
class=directory>Examples</filename> and <filename
class=directory>Applications</filename> directories which have yet to
be fully converted to the OpenStep version. Please feel free to dive in and
upgrade them!
</para>
      </listitem>

      <listitem>
	<para>
Documentation is currently in Rich Text Format (RTF). Beginning with
this README document, the documentation has begun to be converted to
the SGML DocBook DTD used by the Linux Documentation Project and the
class documentation to be incorporated into the sourcefiles with
<application>HeaderDoc</application> tags.
</para>

<para>
Anyone who has access to a commercial RTF to SGML converter can make
a very helpful contribution here!  The documentation is about half
converted and updated to the new naming convention and OpenStep
behaviour and needs to be completed.
</para>
      </listitem>

      <listitem>
	<para>
For this current revision the .nibs have been upgraded to work with
MacOS X and MacOS X-Server and will not load with OpenStep 4.2. The
.nibs which are compatible with OpenStep 4.2 are now named
nibname-openstep.nib. At the moment you will need to manually
symbolically link these to compile for OpenStep 4.2. Eventually Apple's
InterfaceBuilder will produce XML based nibs which should reduce the
compatibility issue.
</para>
      </listitem>

      <listitem>
	<para>
Creating a set of bindings to Java is planned using the Java bridge
and Apple's <application>WrapIt.app</application> utility.
</para>
	</listitem>
      <listitem>
	<para>
Translating the MusicKit framework's
<filename>Localized.strings</filename> file to languages other than
English.
</para>
	</listitem>
    </itemizedlist>
  </sect1>
  
  <sect1 id=fixes>
    <title>Contributing Fixes</title>
    <para>
Please! I am maintaining changes via a closed CVS system (<systemitem
class="systemname">cvs.tomandandy.com</systemitem>) at the moment,
since <systemitem class="systemname">sourceforge</systemitem> does not
provide a CVS which supports -t/-f wrappers necessary for .nib
support. If you send me <email>leigh@tomandandy.com</email> changes I
will incorporate them and check them in. If you are planning to do
major work, I can provide access to the CVS server. The long-term goal
is to make the CVS tree fully available to all interested developers,
please help!
</para>
  </sect1>

  <bibliography>
    <bibliomixed>
    <bibliomset relation=article>
      <authorgroup>
	  <author>
	    <firstname>David</firstname> <othername>A.</othername> <surname>Jaffe</surname>
	  </author>
	  <author>
	    <firstname>Lee</firstname> <othername>R.</othername> <surname>Boynton</surname>
	  </author>
	</authorgroup>
      <title role=article>An Overview of the Sound and Music Kits for the NeXT Computer</title>
Computer Music Journal
      <volumenum>13</volumenum>(<issuenum>2</issuenum>)
      <pubdate>1989</pubdate>
      <pagenums>48-55</pagenums>
      <publishername>MIT Press</publishername>
    </bibliomset>
  </bibliomixed>

    <bibliomixed>
    <bibliomset relation=article>
      <authorgroup>
	  <author>
	    <firstname>Eric</firstname> <othername>D.</othername>
	    <surname>Scheirer</surname>
	  </author>
	  <author>
	    <firstname>Barry</firstname> <othername>L.</othername>
	    <surname>Vercoe</surname>
	  </author>
	</authorgroup>

      <title role=article>SAOL: The MPEG-4 Structured Audio Orchestra Language</title>
Computer Music Journal
      <volumenum>23</volumenum>(<issuenum>2</issuenum>)
      <pubdate>1999</pubdate>
      <pagenums>31-51</pagenums>
      <publishername>MIT Press</publishername>
    </bibliomset>
  </bibliomixed>
  </bibliography>

  <ackno>
   <ulink url="http://sourceforge.net">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="sourceforge.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="sourceforge.png">
<!--
	<imagedata fileref="http://sourceforge.net/sflogo.php?group_id=9881"
	  width="88"
	  depth="31"
	  align=left>
-->
	</imageobject>
	<textobject>
	  <phrase>SourceForge Logo</phrase>
        </textobject>
      </inlinemediaobject>
SourceForge kindly hosts the MusicKit.
   </ulink>
</ackno>
</article>

<!--
Local Variables:
time-stamp-format:"%02d/%02m/%04y"
time-stamp-line-limit:100
time-stamp-start:"<date>"
time-stamp-end:"</date>"
End:
-->

