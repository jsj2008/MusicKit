; This is the first stage of the (rather complicated) DSP load sequence.
;  This file gets loaded through the host port.  All it really knows how
;  to do is set values in X memory (which is the same as P memory for the
;  Turtle Beach card).  Once it gets loaded, it sets X:0 to zero and then
;  waits for the host to set it to 1.  At that point, it jumps to the
;  external code, which the host has loaded.

ft ident   1,0
        page    132,66,2,2
        opt     nomd,loc,mu

   nolist
   include  'platform.equ'
 if DSP56002
   include  '56K2IO.EQU'    ; DSP56002 I/O equates file
 else
   include  '56KIO.EQU'    ; DSP56000 I/O equates file
 endif
 if PINNACLE
   include  'PININIT.EQU'    ; Equates for initializing MultiSound
   include  'PINHARD.EQU'    ; Equates for MultiSound hardware
   include  'PINHDEX.EQU'    ; More equates for MultiSound hardware
 else
   include  'MSNDINIT.EQU'    ; Equates for initializing MultiSound
   include  'MSNDHARD.EQU'    ; Equates for MultiSound hardware
   include  'MSNDHDEX.EQU'    ; More equates for MultiSound hardware
 endif
   include  'LOADER.EQU'      ; Equates for load sequence
   list

; Reset vector.
   ORG   P:$0000
   JMP   START

; Host commands.  The ones that start with EXT are handled in off-chip
;  P memory, so they can't be used until EXTCODE is loaded.


        ORG     P:HDEX_SET_X_ADDR*2
        jsr     <SetXAddr

        ORG     P:HDEX_SET_X_DATA*2
        jsr     <SetXData

        ORG     P:HDEX_SET_P_ADDR*2
        jsr     EXTSetPAddr

        ORG     P:HDEX_SET_P_DATA*2
        jsr     EXTSetPData

        ORG     P:HDEX_GET_X_DATA*2
        jsr     EXTGetXData

;Initialization.  This was largely copied from the MultiSound examples.

   ORG   P:START
        ori     #$03,MR                 ; shutdown interrupts
        clr     a                       ; have a zero handy

      ; setup timing for external bus
      if PINNACLE
        movep   #vBCR0WS,x:BCR          ; 0 wait states
;        movep   #vBCR3WS,x:BCR          ; 3 wait states 
      else
        movep   #vBCR3WS,x:BCR          ; 3 wait states 
      endif

   ORI   #$04,OMR    ; enable data ROMs (for vibrato)

      if DSP56002
	movep #vPCTLInit,x:PCTL
;	movep #$260012,x:PCTL	 
      endif	

;---    host initialization             ---
        movep   #vPBCInit,x:PBC         ; setup port b for host
        movep   #vHCRInit,x:HCR         ; init the Host interface

;---    sci and ssi initialization      ---
        movep   a,x:PCC                 ; zero PCC to cycle it
     if PINNACLE
	; these changes relative to MULTISOUND may not be necessary
        movep   #vSCICRInit,x:SCI_CR    
        movep   #vSCCRInit,x:SCI_CCR   
        movep   #vPCDDRInit,x:PCDDR     ; init port c data direction
        movep   #vPCCInit,x:PCC         ; init port c control register
;vPCCInit is different from PINNACLE, but both old and new seem to work.
        movep   #vCRAInit,x:SSI_CRA     ; init ssi control a
        movep   #vCRBInit,x:SSI_CRB     ; init ssi control b
;vCRBInit is different from PINNACLE, but both old and new seem to work.

     else
        movep   #vSCICRInitNOInt,x:SCI_CR       ; sci register
        movep   #vMIDI40mhz,x:SCI_CCR   ; clk divider for MIDI baud rate
        movep   #vPCDDRInit,x:PCDDR     ; init port c data direction
        movep   #vCRAInit,x:SSI_CRA     ; init ssi control a
        movep   #vCRBInitNOInt,x:SSI_CRB        ; init ssi control b
        movep   #vPCCInit,x:PCC         ; init port c control register
     endif

;---    Init the interrupts             ---
        movep   #vIPRInitHost,x:IPR     ; init the interrupt priority register

        bset    #bRAMWRITEen,y:yrRAMWRITELOW    ; set write enable on intern

;---    Inint the external perphs       ---
      if PINNACLE
		move #>0,y0		; daj
		move y0,X:INTCNT ; daj
        move    #>vSRSEL22K,y0		; set srate
		move 	y0,y:yrSRSEL
        MOVEP #>vMIDSET,y:yrMIDICNTL    ; route MIDI -- FIXME?
    	MOVE    #>vDPMute,y0
;		MOVE	#>0,y0
	    MOVE	y0,y:yrExtReg
	; need to set initial volumes
      else
        movep   #>vFREQ22k,y:yrFREQO    ; set output d/a to 22.05KHz stereo
        movep   #>vFREQ22k,y:yrFREQI    ; set input a/d to 22.05KHz stereo
        movep   #>$000011,y:yrRESETIO   ; reset da/ad
        movep   #>$0000,y:yrRESETIO     ; let run da/ad
        movep   #>vAmpOn,y:yrExtReg     ; turn on the amps

        MOVEP #>vMIDSET,y:yrDIPIMID   ; set up MIDI input patches
      endif

        MOVEP   a,X:SSI_TX              ; zip the tx ssi reg

        MOVE    a,SR                   ; allow interrupts

; Now set X:0 to zero and wait for the host to set it to one.  At that point,
;  jump to the external loader.
   MOVE  A,X:0
   JCLR  #0,X:0,*
   JMP   EXTWAIT

; Interrupt handlers for host commands.  Note that since we aren't really
;  doing anything, we don't worry about saving registers.  As a matter of
;  fact, we just dedicate R0 for the current X transfer address!

; Set the X-address for data transfers.
SetXAddr
        JCLR    #HRDF,X:HSR,*    ; get address into R0
   MOVE  X:HRX,R0
   RTI

; Set one word in X memory
SetXData
   JCLR  #HRDF,X:HSR,*     ; get data
   MOVE  X:HRX,X0
   MOVE  X0,X:(R0)+     ; save it
   RTI
