/* This is a sample .score file for Simplicity. Simplicity is so primitive, 
	that there's not much we can do. We make a 'pyramid' of the harmonic
	series, but using only odd harmonics. */

part p;                /* Declare a part. */
p synthPatchCount:29 synthPatch:"Simplicity"; /* Allocate 29 Simplicities */
var bFreq = a0;        /* Base frequency. Very low. */
var bAmp = .0025;      /* Base amplitude. Quite quiet. */
var tInc1 = .2;        /* Time between adjacent notes when ascending. */
var tInc2 = .05;       /* Time between adjacent notes when descending. */
noteTagRange = 1 to 29;/* This statement helps the scorefile parser. */
BEGIN;
int i = 1;           /* Counter variable */
p (noteOn i) freq:bFreq amp:(30-i)*bAmp; 
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp; 
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;
t +tInc1;  i = i + 1;
p (noteOn i) freq:bFreq*(i*2-1) amp:(30-i)*bAmp;

/* Here come the noteOffs. */ 
t +tInc2; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ; 
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
t +tInc2;  i = i - 1; p (noteOff i) ;
END;