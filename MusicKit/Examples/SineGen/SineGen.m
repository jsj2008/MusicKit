
/* Generated by Interface Builder */

/*
   SineGen.m
   11/16/89 Mike Minnick
   Based on Lee Boynton's "ugen" example.
   Interpolating oscillator version.
   Sweeping frequency version.
   (8/90 D. Jaffe - updated it.)
   
*/

/* SineGen is an example of an interactive Music Kit performance that uses
   no Conductor. It uses the Orchestra in untimed mode, because it wants all
   DSP updates to happen "now". Compare this example with the other examples
   exampunitgenerator (which uses a timed Orchestra and no Conductor) and
   PlayNote (which uses a timed Orchestra and a Conductor).  
*/

#import <objc/NXStringTable.h>
#import <appkit/Application.h>
#import <appkit/Panel.h>
#import "SineGen.h"
#import <sound/sound.h>
#import <appkit/Slider.h>
#import <appkit/TextField.h>
#import <musickit/musickit.h>
#import <musickit/unitgenerators/OscgafiUGxxyy.h>
#import <musickit/unitgenerators/Out1aUGx.h>
#import <musickit/unitgenerators/Out1bUGx.h>
#import "RampUGx.h"
#import "RampUGy.h"
#import <math.h>
#import "Animator.h"
#define	DEFAULT_AMP	0.9
#define	DEFAULT_INC	0.3
#define	SRATE		44100.0

@implementation SineGen

#define STRINGVAL(_x) [stringTable valueForStringKey:_x]

static void handleMKErrors(char *msg)
{
    if (!NXRunAlertPanel("SineGen",msg,"OK","Quit",NULL,NULL))
	[NXApp terminate:NXApp];
}

- setUp
{
    id xpatch, ypatch;
    
    MKSetErrorProc(handleMKErrors);       /* Intercept Music Kit errors */
    running = NO;
    
    orch = [Orchestra new];
    [orch setTimed:NO];
    [orch setFastResponse:YES];
    [orch setSamplingRate:SRATE];
    while (![orch open]) {               
	if (NXRunAlertPanel("SineGen",
			    STRINGVAL("DSPUnavailable"),
			    STRINGVAL("Quit"),
			    STRINGVAL("TryAgain"),
			    NULL) == NX_ALERTDEFAULT)
	    [NXApp terminate:NXApp];
    }
    amp = [orch allocUnitGenerator:[RampUGx class]]; 
    inc = [orch allocUnitGenerator:[RampUGy class]]; 
    osc = [orch allocUnitGenerator:[OscgafiUGxxyy class]]; 
    outl = [orch allocUnitGenerator:[Out1aUGx class]]; 
    outr = [orch allocUnitGenerator:[Out1bUGx class]]; 
    xpatch = [orch allocPatchpoint:MK_xPatch]; 
    ypatch = [orch allocPatchpoint:MK_yPatch]; 
    [amp setOutput:xpatch];
    [inc setOutput:ypatch];
    [osc setAmpInput:xpatch];
    [osc setIncInput:ypatch];
    [osc setOutput:xpatch];
    [outl setInput:xpatch];
    [outr setInput:xpatch];

    [amp setConstant:0.0];
    [osc setTableToSineROM];
    
    [amp run];
    [inc run];
    [osc run];
    [outl run];
    [outr run];

    [orch run];
    myAnimator = [[Animator  alloc] initChronon: 0.0
		  adaptation: 0.0				
		  target: self
		  action: @selector(sweep:)
		  autoStart: NO
  		  eventMask: NX_ALLEVENTS];
    return self;
}

- initiateSweep:(double)when
{
    if (running) 
        [[myAnimator setIncrement:when] startEntry];
    return self;
}

- sweep: sender {
    double fCenter = [centerTextField doubleValue], 
    fWidth = [widthTextField doubleValue],
    fLow = fCenter - fWidth*0.5, 
    fHigh = fLow + fWidth, amplitude;
    int duration = [durationTextField doubleValue]+0.5;
    int volume;

    if (fLow<0) 
	fLow = 0; 
    if (fHigh>20000.0) 
	fHigh = 20000.0;
    fWidth = fHigh - fLow;
    if(duration<1) 
	duration = 1; 
    else if(duration>100) 
	duration = 100;
    if (fHigh != fLow) {
	[inc setSlope:(([osc incAtFreq:fHigh] -
			[osc incAtFreq:fLow]) / ((double)duration * SRATE))];
	[inc setCurVal:[osc incAtFreq:fLow]];
	[self initiateSweep:duration];
    } else {
	[inc setConstant:[osc incAtFreq:fLow]];
	[myAnimator stopEntry];
    }
#if 0
    /* This is how SineGen works. */

    amplitude = [attenuationSlider doubleValue];
    amplitude = exp(-amplitude*log(10.0)/20.0);
    [amp setConstant: (float)amplitude];
#endif

    /* Force speaker on and take volume from attenuation slider. */
    SNDSetFilter(0);
    SNDSetMute(1);
    /* slider must run from 0 to 84 */
    amplitude = [attenuationSlider doubleValue];
    volume = (int)(43 - (amplitude/2.0));
//    printf("a=%f, v=%d\n", amplitude, volume);
    SNDSetVolume(volume, volume);
    [amp setConstant: 1.0];
    [orch flushTimedMessages];
    return self;
}

- start:sender
{
    if (running) {
        running = NO;
        [amp setConstant:0.0];
        [orch flushTimedMessages];
        [myAnimator stopEntry];
    } else {
	if (!orch)
	    [self setUp];
        running = YES;
	[self sweep:self];
    }
    return self;
}

- updateCenter:sender
{
    double theValue = [sender doubleValue];
    if (theValue<0) 
	theValue = 0;
    else 
	if (theValue>20000.0) 
	    theValue = 20000;
    [centerSlider setDoubleValue:theValue];
    [centerTextField setDoubleValue:theValue];
    [self initiateSweep:DEFAULT_INC];
    return self;
}

- updateWidth:sender
{
    double theValue = [sender doubleValue];
    if (theValue<0) 
	theValue = 0;
    else 
	if (theValue>20000.0) 
	    theValue = 20000;
    [widthTextField setDoubleValue:theValue];
    [widthSlider setDoubleValue:theValue];
    [self initiateSweep:DEFAULT_INC];
    return self;
}

- updateDuration:sender
{
    double theValue = [sender doubleValue];
    if (theValue<1) 
	theValue = 1.0;
    else 
	if (theValue>100) 
	    theValue = 100.0;
    [durationTextField setDoubleValue:theValue];
    [durationSlider setDoubleValue:theValue];
    [self initiateSweep:DEFAULT_INC];
    return self;
}

- updateAttenuation:sender
{
    double theValue = [sender doubleValue];
    if (theValue<0) 
	theValue = 0.0;
    else if (theValue>84.0) 
	theValue = 84.0;
    theValue = 2*((int)(theValue*0.5));
    [attenuationTextField setDoubleValue:theValue];
    [attenuationSlider setDoubleValue:theValue];
    [self initiateSweep:DEFAULT_INC];
    return self;
}

- showInfoPanel:sender
{
    [NXApp loadNibSection:"Info.nib" owner:self];
    [infoPanel orderFront:sender];
    return self;
}

@end

