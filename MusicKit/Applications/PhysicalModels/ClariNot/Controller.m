
/* Generated by Interface Builder */

#import "Controller.h"
#import <appkit/appkit.h>
#import <soundkit/soundkit.h>
#import <musickit/musickit.h>
#import "ClarIns.h"
#import <math.h>
#import	<mach/time_stamp.h>

#define REGGAIN 0.2
#define MINOCTLENGTH 9
#define MAXOCTLENGTH 31
#define MIN12LENGTH 4
#define MAX12LENGTH 20
#define MINLENGTH 34
#define MAXLENGTH 78

static Note *theNote,*theNoteOff,*theNoteUpdate;
static Orchestra *theOrch;
static SynthInstrument *theIns;
static id midiIn;

@implementation Controller

- play:sender
{
    int		MY_outAmp = [[Note class] parName: "MY_outAmp"];
    int		MY_dLineLength = [[Note class] parName: "MY_dLineLength"];
    int		MY_noiseVolume = [[Note class] parName: "MY_noiseVolume"];
    double xAmpArray[] = {0.0,0.2,1.0,2.0}; 
    double yAmpArray[] = {0.0,0.0,1.0,0.0};
    id ampEnvelope;

    if ([sender state] == 1)	{

//        if (! theNote) 	{
  	    theNote = [Note new];			
	    theNoteUpdate = [Note new];
	    theNoteOff = [Note new];
            theIns = [SynthInstrument new];
            theOrch = [Orchestra new];          
	    [theOrch setSamplingRate: 22050.0];
	    ampEnvelope = [Envelope new];
	    [ampEnvelope setPointCount:4 xArray:xAmpArray yArray:yAmpArray];
	    [ampEnvelope setStickPoint:2];
	
    	    midiIn = [Midi new];
//	    [myMidiHandler init];
	    [[midiIn channelNoteSender:1] connect:[myMidiHandler noteReceiver]];
//	    [[myMidiFilter noteSender] connect:[synthIns noteReceiver]];
	    [midiIn openInputOnly];

	    [theNote setNoteType:MK_noteOn]; 	
	    [theNote setNoteTag:MKNoteTag()];      
	    [theNoteUpdate setNoteType:MK_noteUpdate]; 
	    [theNoteUpdate setNoteTag:[theNote noteTag]]; 
	    [theNoteOff setNoteType:MK_noteOff]; 
	    [theNoteOff setNoteTag:[theNote noteTag]]; 
	    MKSetDeltaT(.01) ;           
	    [Orchestra setFastResponse:YES]; 
	    [Orchestra setTimed:NO]; 
	     if (![theOrch open]) {               
	    fprintf(stderr,"Can't open DSP. Perhaps some other process has it.\n");
		exit(1);
	    }
	    [theIns setSynthPatchClass:[ClarIns class]];   
	    [theIns setSynthPatchCount:1];	
	    [Conductor setFinishWhenEmpty:NO];
//	[Conductor useSeparateThread:YES];
//	[Conductor setThreadPriority:1.0];     /* Boost priority of performance */
	    [theOrch run];				
             [midiIn run];
	    [Conductor startPerformance];    
	    [Conductor lockPerformance];	     /* Prepare to send MK message */
	    [theNote setPar:MK_portamento toDouble: 0.5];   
	    [theNote setPar:MK_ampEnv toEnvelope:ampEnvelope];
    	    [theNoteUpdate setPar:MK_amp1 toDouble: 0.5];  

	    [theNote setPar:MY_outAmp toDouble: 0.2];
	    [theNote setPar:MY_dLineLength toDouble: MINLENGTH];

            [theNote setPar:MY_noiseVolume toDouble: 0.02];  

	    [[theIns noteReceiver] receiveNote:theNote];
	    [Conductor unlockPerformance];
	    [self changeSlide: slide];
	    [self changeAmps: ampPots];
//       }	
    }
    else	{
        [Conductor lockPerformance];
        [[theIns noteReceiver] receiveNote:theNoteOff];
        [theNote free];
        [theNoteUpdate free];
        [theNoteOff free];
        [midiIn free];
        [Conductor finishPerformance];       
        [Conductor unlockPerformance];
        [theOrch free];
        [theIns free];
    }
    return self;
}

- changeVelocity: (double) velocity;
{
    int		MY_envelopeSlew = [[Note class] parName: "MY_envelopeSlew"];
    double temp;
    [Conductor lockPerformance];
    temp = (velocity - 128.0) / 128.0;
    [theNoteUpdate setPar:MY_envelopeSlew toDouble: temp];  
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

- changeAmps:sender
{
    int		MY_outAmp = [[Note class] parName: "MY_outAmp"];
    double temp;
    
    [Conductor lockPerformance];
    temp = [[sender cellAt: 0 : 0] doubleValue];
    [[ampPots cellAt: 0 : 0] setDoubleValue: temp];
    [theNoteUpdate setPar:MK_amp1 toDouble: temp];  
    temp = [[sender cellAt: 1 : 0] doubleValue];
    [[ampPots cellAt: 1 : 0] setDoubleValue: temp];
    [theNoteUpdate setPar:MY_outAmp toDouble: temp];  
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

- changeAmpsQuick: (double) inValue : (double) outValue
{
    int		MY_outAmp = [[Note class] parName: "MY_outAmp"];
        
    [Conductor lockPerformance];
    [theNoteUpdate setPar:MK_amp1 toDouble: inValue];  
    [theNoteUpdate setPar:MY_outAmp toDouble: outValue];  
    [[ampFields cellAt: 0 : 0] setDoubleValue: inValue];
    [[ampFields cellAt: 1 : 0] setDoubleValue: outValue];
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

- changeSlide:sender
{
    int		MY_dLineLength = [[Note class] parName: "MY_dLineLength"];
    int		MY_dLineLength2 = [[Note class] parName: "MY_dLineLength2"];
    int		MY_dLine2Gain = [[Note class] parName: "MY_dLine2Gain"];
    double temp,temp2;
    
    [Conductor lockPerformance];
    temp = [slide doubleValue];
//    printf("Slide length is: %f\n",temp);
    temp2 = MINLENGTH + (MAXLENGTH - MINLENGTH) * temp;
    [theNoteUpdate setPar:MY_dLineLength toDouble: temp2];  
    if ([[regMode cellAt: 0 : 0] state]==1)
        temp2 = MINOCTLENGTH + (MAXOCTLENGTH - MINOCTLENGTH) * temp;
    else
        temp2 = MIN12LENGTH + (MAX12LENGTH - MIN12LENGTH) * temp;
    [theNoteUpdate setPar:MY_dLineLength2 toDouble: temp2];  
    [theNoteUpdate setPar:MY_dLine2Gain toDouble: [regHole doubleValue]];
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

- changeSlideQuick: (double) value registerMode: (int) mode registerHole: (double) regValue
{
    int		MY_dLineLength = [[Note class] parName: "MY_dLineLength"];
    int		MY_dLineLength2 = [[Note class] parName: "MY_dLineLength2"];
    int		MY_dLine2Gain = [[Note class] parName: "MY_dLine2Gain"];
    double temp,temp2;
    
    [Conductor lockPerformance];
    temp = value;
    temp2 = MINLENGTH + (MAXLENGTH - MINLENGTH) * temp;
    [theNoteUpdate setPar:MY_dLineLength toDouble: temp2];  
    if (mode==0)
        temp2 = MINOCTLENGTH + (MAXOCTLENGTH - MINOCTLENGTH) * temp;
    else
        temp2 = MIN12LENGTH + (MAX12LENGTH - MIN12LENGTH) * temp;
    [theNoteUpdate setPar:MY_dLineLength2 toDouble: temp2];  
    [theNoteUpdate setPar:MY_dLine2Gain toDouble: regValue];
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

- changeEmbouchure:sender
{
//    double temp;
    
//    [Conductor lockPerformance];
//    temp = [sender doubleValue];
//    printf("Embouchure is: %f\n",temp);
//    temp = 1.0 - temp;
//    [theNoteUpdate setPar:MY_delay2Length toDouble: temp * MAXD2LENGTH];  
//    [[theIns noteReceiver] receiveNote:theNoteUpdate];
//    [Conductor unlockPerformance];
    return self;
}

- changeEmbouchureQuick:(double) value;
{
//    double temp;

//    [Conductor lockPerformance];
//    temp = value;
//    [theNoteUpdate setPar:MY_delay2Length toDouble: temp * MAXD2LENGTH];  
//    [[theIns noteReceiver] receiveNote:theNoteUpdate];
//    [Conductor unlockPerformance];
    return self;
}

- changeNoiseVolume:sender
{
    int		MY_noiseVolume = [[Note class] parName: "MY_noiseVolume"];
    double temp;
    
    [Conductor lockPerformance];
    temp = [sender doubleValue];
    [[ampPots cellAt: 2 : 0] setDoubleValue: temp];
    [theNoteUpdate setPar:MY_noiseVolume toDouble: temp];  
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

- changeNoiseVolumeQuick:(double) value;
{
    int		MY_noiseVolume = [[Note class] parName: "MY_noiseVolume"];
    double temp;
    
    [Conductor lockPerformance];
    temp = value;
    [[ampPots cellAt: 2 : 0] setDoubleValue: temp];
    [theNoteUpdate setPar:MY_noiseVolume toDouble: temp];  
    [[theIns noteReceiver] receiveNote:theNoteUpdate];
    [Conductor unlockPerformance];
    return self;
}

@end
