
/* Generated by Interface Builder */

#import <AppKit/AppKit.h>
#import <stdlib.h>
#import <ctype.h>
#import <math.h>
#import "Controller.h"
#import "EnvelopeView.h"

@implementation Controller

- (void)applicationDidFinishLaunching:(NSNotification *)notification
{
//    NSApplication *theApplication = [notification object];

    lastDeleted = nil;
    theEnvelope = nil;
    [NSApp setServicesProvider: self];
    [theWindow makeKeyAndOrderFront:self];
    [self addEnvelope:self];
}

- (void)infoPanel:sender
{
    if(!infoPanel) {
        [NSBundle loadNibNamed:@"Info.nib" owner:self];
    }
    [infoPanel makeKeyAndOrderFront:sender];
//    return self;
}

- (void)helpPanel:sender
{
    if(!helpPanel) {
        [NSBundle loadNibNamed:@"Info.nib" owner:self];
    }
    [helpPanel makeKeyAndOrderFront:sender];
//    return self;
}

//===================================================================
// Operations on Envelopes
//===================================================================

- (void)addEnvelope:sender
{
	id old;
	
	NSRect * theFrame;
	theFrame = malloc (sizeof (NSRect));
	*theFrame = [theSplitView frame];
	old=theEnvelope;
	if (old!=nil)
	     [old dim];
	theEnvelope=[[EnvelopeView alloc] initWithFrame:*theFrame];
	[theEnvelope controllerIs:self];
	[theSplitView addSubview: theEnvelope];
	[theSplitView adjustSubviews];
	[theSplitView display];
	[theWindow makeFirstResponder:theEnvelope];
	if (old!=nil && [theLinkX state]==1) 
		[self broadcastXLimitsOf:old];
	free (theFrame);
//    return self;
}

- (void)removeEnvelope:sender
{
	NSArray *views;
	unsigned int lastIndex;
	
	if (theEnvelope!=nil) {
		lastIndex=[[theSplitView subviews] 
			indexOfObject: theEnvelope];				// where is on the subview list?
		lastDeleted=[theEnvelope copy];			// remember last envelope...
		[theEnvelope removeFromSuperview];		// ...but delete it from the window!
		views = [theSplitView subviews];
		if ([views count]==0)					// define pointer to new envelope
			theEnvelope=nil;
		else {
			if ((theEnvelope=[views objectAtIndex:lastIndex])==nil)
				theEnvelope=[views objectAtIndex:0];
		}
		if (theEnvelope!=nil)
			[theWindow makeFirstResponder:theEnvelope];
		
		[theSplitView adjustSubviews];			// display new split view
		[theSplitView display];
	}
//	return self; 
}

- (void)unRemoveEnvelope:sender
{
	id old;
	
	if (lastDeleted!=nil) {					// only if previous delete
		[theSplitView addSubview: lastDeleted];
		old=theEnvelope;
		if (old!=nil) [old dim];
		theEnvelope=lastDeleted;				// set new current envelope
		lastDeleted=nil;
		[theWindow makeFirstResponder:theEnvelope];
		if (old!=nil && [theLinkX state]==1) 
			[self broadcastXLimitsOf:old];
		[theSplitView adjustSubviews];
		[theSplitView display];
	}
//    return self;
}

- (void) update: sender
{
	int point;
	
	if (theEnvelope!=nil && theEnvelope!=sender)
		[theEnvelope dim];
	if (theEnvelope!=sender) {
		theEnvelope=sender;
		[theEnvelope highlight];
		[theWindow makeFirstResponder:theEnvelope];
	}
	point=[sender getPoint];
	[thePoint setIntValue:point];
	[theXCoord setFloatValue:[sender getX: point]];
	[theYCoord setFloatValue:[sender getY: point]];
	[theYrCoord setFloatValue:[sender getYr: point]];
	[theSmoothing setFloatValue:[sender getSmoothing: point]];
	[theSmoothSlider setFloatValue:[sender getSmoothing: point]];
	[theXMinCoord setFloatValue:[sender getXMin]];
	[theXMaxCoord setFloatValue:[sender getXMax]];
	[theYMinCoord setFloatValue:[sender getYMin]];
	[theYMaxCoord setFloatValue:[sender getYMax]];
	[theXSnapCoord setFloatValue:[sender getXSnap]];
	[theYSnapCoord setFloatValue:[sender getYSnap]];
	[theStickyPoint setState:[sender getSticky: point]];
	[theGraphType setState:[sender getShowSmooth]];
}

- updateCoords: sender at: (int)point
{
	[theXCoord setFloatValue:[sender getX: point]];
	[theYCoord setFloatValue:[sender getY: point]];
	[theYrCoord setFloatValue:[sender getYr: point]];
	return self;	
}

//===================================================================
// Pasteboard interface methods
//===================================================================

- (void) copy: (id) sender
{
    if (theEnvelope != nil) 
        [theEnvelope copy:sender];
}

- (void) paste: (id) sender
{
    if (theEnvelope != nil) 
        [theEnvelope paste:sender];
}

//===================================================================
// Messages received from panel buttons and fields to update parameters
//===================================================================

- (void)nextPoint:sender
{
	if (theEnvelope!=nil) [theEnvelope nextPoint]; 
}

- (void)previousPoint:sender
{
	if (theEnvelope!=nil) [theEnvelope previousPoint]; 
}

- (void)setPoint:sender
{
	if (theEnvelope!=nil) [theEnvelope setPointTo:[sender intValue]]; 
}

- (void)setXValue:sender
{
	if (theEnvelope!=nil) 
		[theEnvelope setXAt: [thePoint intValue] to: [sender floatValue]]; 
}

- (void)setYValue:sender
{
	if (theEnvelope!=nil) 
		[theEnvelope setYAt: [thePoint intValue] to: [sender floatValue]]; 
}

- (void)setYrValue:sender
{
	if (theEnvelope!=nil) 
		[theEnvelope setYrAt: [thePoint intValue] to: [sender floatValue]]; 
}

- (void)setSmoothValue:sender
{
	float smooth;

	smooth=[sender floatValue];
	smooth=floor(smooth*1000)/1000;

	[theSmoothSlider setFloatValue:smooth];
	if (theEnvelope!=nil) 
		[theEnvelope setSmoothAt: [thePoint intValue] to: smooth]; 
}

- (void)setSmoothFromSlider:sender
{
	float smooth;
	
	smooth=[sender floatValue];
	smooth=floor(smooth*1000)/1000; // LMS used to be rint()
	[theSmoothing setFloatValue:smooth];
	if (theEnvelope!=nil) 
		[theEnvelope setSmoothAt: [thePoint intValue] to: smooth]; 
}

- (void)broadcastXLimitsOf:envelope
{
	unsigned int i;
	NSArray *envelopes;
	double max, min;
	
	min=[envelope getXMin];
	max=[envelope getXMax];
	envelopes = [theSplitView subviews];
	for (i=0; i<[envelopes count]; i++)
		[[envelopes objectAtIndex:i] setXLimitsTo:min :max]; 
}

- (void)setXMinValue:sender
{
	if (theEnvelope!=nil) {
		[theEnvelope setXMinTo:[sender floatValue]];
		if ([theLinkX state]==1) 
			[self broadcastXLimitsOf:theEnvelope];
	} 
}

- (void)setXMaxValue:sender
{
	if (theEnvelope!=nil) {
		[theEnvelope setXMaxTo:[sender floatValue]];
		if ([theLinkX state]==1) 
			[self broadcastXLimitsOf:theEnvelope];
	} 
}

- (void)setYMinValue:sender
{
	if (theEnvelope!=nil) {
		[theEnvelope setYMinTo:[sender floatValue]];
	} 
}

- (void)setYMaxValue:sender
{
	if (theEnvelope!=nil) {
		[theEnvelope setYMaxTo:[sender floatValue]];
	} 
}

- (void)setXSnapValue:sender
{
	if (theEnvelope!=nil) {
		[theEnvelope setXSnapTo:[sender floatValue]];
	} 
}

- (void)setYSnapValue:sender
{
	if (theEnvelope!=nil) {
		[theEnvelope setYSnapTo:[sender floatValue]];
	} 
}

- (void)setStickyPoint:sender
{
	if (theEnvelope!=nil) 
		[theEnvelope setStickyAt:[thePoint intValue] To:[sender state]]; 
}

- (void) setGraphType: sender
{
	if (theEnvelope != nil) 
		[theEnvelope setShowSmooth: [sender state]]; 
}

- (void)setDrawSegmentsState:sender
{
	if (theEnvelope != nil) {
	    if ([theEnvelope getDrawSegments] == YES)
		[theEnvelope setDrawSegments: NO];
	    else
	    	[theEnvelope setDrawSegments: YES];
	} 
}

- (void)setLinkX:sender
{
	if (theEnvelope != nil && [sender state]==1) 
		[self broadcastXLimitsOf:theEnvelope]; 
}

- (void) reScaleLimits: (id) sender;
{
	if (theEnvelope != nil) {
		[theEnvelope scaleLimits];
		if ([theLinkX state]==1) 
			[self broadcastXLimitsOf:theEnvelope];
	}
}

//===================================================================
// Messages received from the envelope to query for parameters
//===================================================================

- (NSString *) getStyle
{
	return [theOutputTypes titleOfSelectedItem];
}

@end
