<!--
The MusicKit README file, in the original DocBook SGML source.

Edit this file, not the HTML, RTF or LaTeX output.

$Id$

(Author attribution below)

The following entities in DOCTYPE describe the revision tuple and the
exact version tuple of the source code (as a Subversion version tag)
this document refers to. Change accordingly to match the source
and binary distributions. Likewise if the distribution web site changes.
-->

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!entity bibliography        SYSTEM "Publications/PublishedDocumentation.sgml">
<!entity readinglist         SYSTEM "Publications/SuggestedReadingList.sgml">
<!entity maintaineremail "leigh@leighsmith.com_nospam">
<!entity mkvertuple "5.6.1">
<!entity mkurl "http://www.musickit.org">
<!entity mkdownload "http://sourceforge.net/projects/musickit/files/musickit">
<!entity mksvnweb "http://sourceforge.net/svn/?group_id=9881">
<!entity mksfweb "http://www.sourceforge.net/projects/musickit">
<!-- Disable mklists to stop spam -->
<!entity mklists "@lists.sourceforge.net_nospam">
<!-- GNUstep Libraries used -->
<!entity gnustepdownload "http://www.gnustep.org">
<!entity gsmakevertuple "2.2.0">
<!entity gsbasevertuple "1.18.0">
<!entity gsguivertuple "0.16.0">
<!-- Libraries used -->
<!entity libsndfileweb "http://www.mega-nerd.com/libsndfile">
<!entity libsndfilevertuple "1.0.20">
<!entity libsndfiledownload "http://www.mega-nerd.com/libsndfile/libsndfile-1.0.20.tar.gz">
<!entity hipvertuple "0.4pre1">
<!entity hipdownload "http://www.sourceforge.net/projects/lame/files/lame/libmp3hip-0.4pre1.tar.gz">
<!entity lameweb "http://www.sourceforge.net/projects/lame">
<!entity lamevertuple "3.98.2">
<!entity lamedownload "http://sourceforge.net/projects/lame/files/lame/lame-398-2.tar.gz">
<!entity oggvorbisweb "http://www.xiph.org/ogg/vorbis">
<!entity oggvertuple "1.1.4">
<!entity oggdownload "http://downloads.xiph.org/releases/ogg/libogg-1.1.4.tar.gz">
<!entity vorbisvertuple "1.2.2">
<!entity vorbisdownload "http://downloads.xiph.org/releases/vorbis/libvorbis-1.2.2.tar.gz">
<!entity libshoutweb "http://www.icecast.org">
<!entity libshoutvertuple "2.3.2">
<!entity libshoutdownload "http://downloads.xiph.org/releases/icecast/icecast-2.3.2.tar.gz">
<!entity portaudioweb "http://www.portaudio.com/">
<!entity portaudiovertuple "19">
<!entity portaudiodownload "http://www.portaudio.com/archives/pa_snapshot_v19.tar.gz">
]>

<article id="README">
  <articleinfo>
    <title>The MusicKit V&mkvertuple;</title>

<!-- TODO
   Add in the MusicKit icon

   Ok, how do we place a logo for the document in the title, since
   this is legal DocBook, but is ignored?
    <mediaobject>
      <imageobject>
	<imagedata FileRef="Images/MK_icon.eps" format="eps">
      </imageobject>
      <imageobject>
	<imagedata FileRef="Images/MK_icon.png" format="png">
      </imageobject>
      <imageobject>
	<imagedata FileRef="Images/.dir.tiff" format="tiff">
      </imageobject>
    </mediaobject>
-->

    <author>
      <firstname>Leigh</firstname>
      <othername role=mi>M.</othername>
      <surname>Smith</surname>
      <affiliation>
        <orgname>
          <ulink url="http://www.ozmusiccode.com">Oz Music Code LLC.</ulink>
        </orgname>
        <address>
          <email>&maintaineremail;</email>
        </address>
      </affiliation>
    </author>
    <copyright>
      <year>2000-2009</year>
      <holder>The MusicKit Project</holder>
    </copyright>
    <revhistory>
      <revision>
	<revnumber>$Revision$</revnumber>
	<date>$Date$</date>
      </revision>
    </revhistory>

    <abstract>
      <para>
These are overall comments (incorporating original notes by David
A. Jaffe) and serve as the highest level overview of the
MusicKit version &mkvertuple; &mdash; the &ldquo;README&rdquo;.
      </para>
    </abstract>
  </articleinfo>

  <sect1 id="description">
    <title>Description</title>

    <indexterm>
      <primary>MusicKit</primary>
    </indexterm>

    <para>
The <productname>MusicKit</productname> is an object-oriented software
system for building music, sound, signal processing, and
<acronym>MIDI</acronym> applications.  It has been used in such
diverse commercial applications as music sequencers, computer games,
and document processors.  Professors and students in academia have
used the <productname>MusicKit</productname> in a host of areas,
including music performance, scientific experiments, computer-aided
instruction, and physical modeling.  The
<productname>MusicKit</productname> was the first to unify the
<acronym>MIDI</acronym> and <productname>Music V</productname>
paradigms, thus combining interaction with generality
(<productname>Music V</productname>, written by Max Mathews and others
at Bell Labs four decades ago, was the first widely available
&ldquo;computer music compiler&rdquo;).
   </para>

    <para>
The <productname>NeXT</productname>
<productname>MusicKit</productname> was first demonstrated at the 1988
<productname>NeXT</productname> product introduction and was bundled in
<productname>NeXT</productname> software releases 1.0 and 2.0.
Beginning with <productname>NeXT</productname>'s 3.0 release, the
<productname>MusicKit</productname> was no longer part of the standard
<productname>NeXT</productname> software release.  Instead, it was
being distributed and supported as Version 4.0 by the Center for
Computer Research in Music and Acoustics (<acronym>CCRMA</acronym>) of
Stanford University. Versions 5.0 to 5.4.1 were then supported by
<productname>tomandandy music</productname>,
porting to several more <link linkend="platforms">popular operating
systems</link>.
</para>

    <para>
The <link linkend="downloads"><productname>MusicKit</productname>
Distribution</link> is a comprehensive package that includes <link
linkend=onlinedoco>on-line documentation</link>, <link
linkend=examples>programming examples</link>, <link
linkend=applications>utilities, applications</link> and sample score
documents. The <productname>MusicKit</productname> is dependent on the
<productname>SndKit</productname> distribution, originally written by
Stephen Brandon, and both Framework collections are available at the
same distribution site. The <productname>SndKit</productname> was
written to be a complete open source implementation of <productname>NeXT</productname>s
<productname>SoundKit</productname>. The re-write started and almost
finished before the <productname>SoundKit</productname> itself was
released in source code form.
</para>

    <para>
Source code is available for everything, with the exception of the
<productname>NeXT</productname> hardware implementation of the
low-level sound and <acronym>DSP</acronym> drivers.  This means
researchers and developers may study the source or even customize the
Music Kit and <acronym>DSP</acronym> tools to suit their needs.
Enhancements can be committed to the <link linkend=fixes><productname>Subversion</productname>
repository</link> to have them incorporated for future
releases. Commercial software developers may freely incorporate and
adapt the software to accelerate development of software products.
</para>

    <sect2 id=features>
      <title>Feature List</title>
      <para>
The following is a partial list of the highlights of the
<productname>MusicKit</productname> provided by David Jaffe on his
<link linkend=otherlinks>web-page</link>:
</para>

      <itemizedlist>
	<listitem>
	  <para>
Applicable to composers writing real-time computer music applications.
</para>
	</listitem>
	<listitem>
	  <para>
Applicable to programmers writing cross-platform audio/music applications.
</para>
	</listitem>
	<listitem>
	  <para>
Extensible, high-level object-oriented frameworks that are a super-set
of Music V and <acronym>MIDI</acronym> paradigms.
</para>
	</listitem>
	<listitem>
	  <para>
Written in Objective C and C, using <productname>Apple</productname>'s
<productname>OpenStep/Cocoa</productname> <acronym>API</acronym>, the
<productname>FoundationKit</productname>.
</para>
	</listitem>
        <listitem>
           <para>
Using the Python to Objective C bridge 
<ulink url="http://www.sourceforge.net/projects/pyobjc">PyObjC</ulink>
enables applications and utilities to be written in 
<ulink url="http://www.python.org">Python</ulink>, an interpreted
object-oriented language.
           </para>
        </listitem>
	<listitem>
	  <para>
Functionally comparable (although architecturally dissimilar) to
<acronym>JMSL</acronym> (Java Music Specification Language).
</para>
	</listitem>
	<listitem>
	  <para>
Representation system capable of depicting phrase-level structure such
as legato transitions.
</para>
	</listitem>
	<listitem>
	  <para>
General time management/scheduling mechanism, supporting
synchronization to <acronym>MIDI</acronym> time code.
</para>
	</listitem>
	<listitem>
	  <para>
Efficient real-time synthesis and sound processing, including option
for quadraphonic sound.
</para>
	</listitem>
	<listitem>
	  <para>
Complete support for multiple <acronym>MIDI</acronym> inputs and outputs.
</para>
	</listitem>
	<listitem>
	  <para>
On NeXT machines, digital sound I/O from the DSP port with support for NeXT serial port
devices.
</para>
	</listitem>
	<listitem>
	  <para>
Fully-dynamic DSP resource allocation system with dynamic linking and
loading, on multiple DSPs.
</para>
	</listitem>
	<listitem>
	  <para>
Non-real time mode, where the DSP returns data to the application or
writes a sound file.
</para>
	</listitem>
	<listitem>
	  <para>
Suite of <link linkend=applications>applications</link>, including
<application>Ensemble</application> &mdash; an interactive algorithmic
composition and performance environment (including a built-in sampler),
and <application>ScorePlayer</application> &mdash; a Scorefile and standard
 <acronym>MIDI</acronym> file player.
</para>
	</listitem>
	<listitem>
	  <para>
Library of instruments, including <acronym>FM</acronym>, wavetable,
physical modeling and waveshaping synthesis.
</para>
	</listitem>
	<listitem>
	  <para>
Library of unit generators for synthesis and sound processing.
</para>
	</listitem>
	<listitem>
	  <para>
Documentation, programming examples, utilities, including a sound file
mixer, sample rate converter, etc.
</para>
	</listitem>
	<listitem>
	  <para>
ScoreFile, a textual scripting language for music. 
</para>
	</listitem>
        <listitem>
          <para>
Connectable audio processing modules (&ldquo;plugins&rdquo) including standard audio
effects such as reverb. Support for <productname>Apple</productname>
<productname>AudioUnits</productname>.
</para>
        </listitem>
	<listitem>
	  <para>
Sound data held in a specifiable variety of formats, i.e 8, 16, 24 bit or
floating point. Allows trading off sample data size vs. processing
time.
</para>
	</listitem>
	<listitem>
	  <para>
<acronym>MP3</acronym> file reading and writing. Decoding of
<acronym>MP3</acronym> can be done in a background thread after
reading, or on-the-fly during playback, allowing selection of memory
consumption versus processor load.
</para>
	</listitem>
        <listitem>
          <para>
<acronym>MP3</acronym> and <productname>Ogg/Vorbis</productname>
streaming of audio output to web servers using the <ulink
url="&libshoutweb;"><productname>libshout</productname></ulink>
library. The <productname>libshout</productname> library license is
<acronym>LGPL</acronym>, not <acronym>GPL</acronym> and so do not
compromise the <productname>MusicKit</productname> <link
linkend="license">license</link>
</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id=otherlinks>
      <title>References at Other Sites</title>
      <para>
The <productname>MusicKit</productname> is listed on the following web
sites and open source portals:
</para>

      <itemizedlist>
	<listitem>
	  <para>
	    <ulink url="&mksfweb;">
	      <inlinemediaobject>
	        <imageobject>
		  <imagedata fileref="Images/sourceforge.eps"
		    format="EPS" width=50 depth=30
		    scalefit=1>
	        </imageobject>
	        <imageobject>
		  <imagedata fileref="Images/sourceforge.png">
	        </imageobject>
	      </inlinemediaobject>
sourceforge.net
            </ulink>
hosts the <productname>Subversion</productname> repository, news, mail lists and web site.
          </para>
        </listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.freshmeat.net/projects/musickit/">
	      <inlinemediaobject>
	        <imageobject>
		  <imagedata fileref="Images/freshmeat.eps" width=25 depth=15
			     scalefit=1>
	        </imageobject>
	        <imageobject>
		  <imagedata fileref="Images/freshmeat.png">
	        </imageobject>
	      </inlinemediaobject>
freshmeat.net
            </ulink>
          </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.advogato.org/proj/MusicKit%20and%20SndKit/">
	      <inlinemediaobject>
	        <imageobject>
		  <imagedata fileref="Images/advogato.eps" width=25 depth=15
			     scalefit=1>
	        </imageobject>
	        <imageobject>
	  	  <imagedata fileref="Images/advogato.png">
	        </imageobject>
	      </inlinemediaobject>
advogato.org
            </ulink>
          </para>
	</listitem>
	<listitem>
	  <para>
             <ulink url="http://ccrma-www.stanford.edu/CCRMA/Overview/hardsoftware.html">
                <acronym>CCRMA</acronym>'s <productname>MusicKit</productname> site.
             </ulink>
	   </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.jaffe.com/mk97.html">
                David Jaffe's (the original author) <productname>MusicKit</productname> site.
            </ulink>
	  </para>
	</listitem>
      </itemizedlist>
    </sect2>
    
    <sect2 id=maillist>
      <title><productname>MusicKit</productname> Mail-lists</title>
      <itemizedlist>
	<listitem>
	  <para>
Announcements of new releases are sent to the
<email>musickit-announce&mklists;</email> mail list. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-announce">
http://lists.sourceforge.net/mailman/listinfo/musickit-announce</ulink>.
</para>
	</listitem>

	<listitem>
	  <para>
Discussions on development of the <productname>MusicKit</productname>
and notices of updates committed to the <productname>Subversion</productname> source repository are sent
to <email>musickit-developer&mklists;</email> mail list.  Subscribe to
the list by visiting
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-developer">
http://lists.sourceforge.net/mailman/listinfo/musickit-developer</ulink>.
</para>
	</listitem>

	<listitem>
	  <para>
Discussions on writing applications using the
<productname>MusicKit</productname> (not developing it) are sent to
<email>musickit-users&mklists;</email> mail list.  Subscribe to the
list by visiting
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-users">
http://lists.sourceforge.net/mailman/listinfo/musickit-users</ulink>.
</para>
	</listitem>
      </itemizedlist>
      <para>
Don't assume nothing is being done if you don't hear anything for a
while!  The maintainers are usually adding fixes/code, but full
releases are less frequent. The <link linkend=fixes><productname>Subversion</productname>
repository</link> can be used to track all updates and obtain them as
they are committed by developers.
</para>
    </sect2>

  </sect1>

  <sect1 id="furtherdoco">
    <title>Further Documentation</title>

      <itemizedlist>
	<listitem>
	  <para>
Thorough documentation of classes, applications, usage and concepts
are found under the directory
<filename class=directory>
Documentation
</filename> in the source distribution.
</para>
	</listitem>

	<listitem>
	  <para>
The file 
<ulink url="&mkurl;/MusicKit_ChangeLog.txt">
<filename>
Documentation/MusicKit_ChangeLog.txt
</filename>
</ulink>
lists changes for V&mkvertuple; and is generated from the <productname>Subversion</productname> logs.
</para>
      </listitem>
    </itemizedlist>

    <sect2 id="onlinedoco">
      <title>Online Documentation</title>
      <itemizedlist>
	<listitem>
	  <para>
<ulink url="&mkurl;/MusicKit_README.pdf">
README in <acronym>PDF</acronym>
</ulink>
&mdash; 
This README document in the 
<productname>Adobe Portable Document Format</productname>
(e.g <productname>Acrobat</productname>).
</para>
	</listitem>
	<listitem>
	  <para>
<ulink url="&mkurl;/Concepts">
<productname>MusicKit</productname> and <productname>SndKit</productname> Concepts
</ulink>
<ulink url="&mkurl;/MusicKitConcepts.pdf">
(<acronym>PDF</acronym> version)
</ulink>
&mdash; Thorough documentation of the <productname>MusicKit</productname> and <productname>SndKit</productname> in operation.
</para>
	</listitem>
	<listitem>
	  <para>
<ulink url="&mkurl;/TutorialClasses">
<productname>MusicKit</productname> Tutorials
</ulink>
<ulink url="&mkurl;/MusicKitTutorials.pdf">
(<acronym>PDF</acronym> version)
</ulink>
&mdash; Tutorial exercises by David A. Jaffe, used in his lecture series.
</para>
	</listitem>
	<listitem>
	  <para>
<ulink url="&mkurl;/Frameworks">
Class Documentation
</ulink>
&mdash; Documentation for each module, <productname>C</productname>
function and <productname>Objective-C</productname> class.
</para>
	</listitem>
      </itemizedlist>

      <sect3 id="PublishedPapers">
	<title>Published Papers</title>
	<para>
Conference papers and lecture slides in <acronym>PDF</acronym> or
<acronym>HTML</acronym> are listed in the <link
linkend=bibliography>bibliography</link>.
</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="history">
    <title>Contributors, History and Acknowledgements</title>
    <subtitle>(As best as LMS has determined from written acknowledgements)</subtitle>
    <itemizedlist>
      <listitem>
	<para>
The <productname>MusicKit</productname> was designed and implemented
by David A. Jaffe, and the <acronym>DSP</acronym> computer-music and
array-processing software was designed and implemented by Julius
O. Smith III while at <productname>NeXT</productname>.  The
<productname>SoundKit</productname> (forerunner of the
<productname>SndKit</productname>) was designed and implemented by Lee
Boynton.  Their original design appeared in
<citation>JaffeBoynton89</citation>.
</para>
      </listitem>

      <listitem>
        <para>
Michael McNabb brought wave table synthesis to the
<productname>MusicKit</productname> and designed and built a number of
<classname>UnitGenerator</classname> and
<classname>SynthPatch</classname> subclasses and contributed the
<application>Ensemble</application> application.
</para>
      </listitem>

      <listitem>
        <para>
Douglas Fulton was responsibile for the
documentation and made substantial design improvements in clarifying
general protocol and the identity and mechanisms of the
classes.
</para>
      </listitem>

      <listitem>
        <para>
Gregg Kellogg wrote the <acronym>DSP</acronym>, Sound, and
<acronym>MIDI</acronym> device drivers for the <productname>NeXT</productname> which were then maintained by Doug
Mitchell.
</para>
      </listitem>

      <listitem>
        <para>
John Strawn wrote most of the matrix and array processing
macros.
</para>
      </listitem>

      <listitem>
        <para>
Dana Massie contributed speech coding, sampling-rate
conversion, and signal conditioning modules for the Sound Kit.
</para>
      </listitem>

      <listitem>
	<para>
Doug Keislar helped with testing, developer support, and demos.
</para>
      </listitem>

      <listitem>
        <para>
Mike Minnick helped finish the <acronym>DSP</acronym> array processing
tools and wrote most of the programming examples.
</para>
      </listitem>

      <listitem>
	<para>
Roger Dannenberg influenced both the
<productname>MusicKit</productname> noteTag design and the design of
the performance mechanism (using a data flow discrete simulation
model).
</para>
      </listitem>

      <listitem>
        <para>
Andy Moorer helped shape the <classname>Envelope</classname> strategy,
suggested the unit-generator memory-argument scheme, and provided
consultation.
</para>
      </listitem>

      <listitem>
        <para>
The software of William Schottstaedt and others at
<acronym>CCRMA</acronym> (Stanford University) served as a model for
some of the mechanisms in the <productname>MusicKit</productname>.
</para>
      </listitem>

      <listitem>
        <para>
James A. Moorer, Perry Cook, Rob Poor made code and design
contributions also.
        </para>
      </listitem>

      <listitem>
        <para>
Following <productname>NeXT</productname>'s release of the source to
Stanford in 1994, David did the port to Intel
<productname>NeXTStep</productname> and the
<productname>MPU-401</productname> <acronym>MIDI</acronym> and
<acronym>DSP</acronym> drivers. There were some other bug fix
contributors (acknowledged in code comments).
        </para>
      </listitem>

      <listitem>
	<para>
Stephen Brandon did the initial OpenStep port in early 1998 and the
majority of the conversion work. The
<productname>MusicKit</productname> now uses the
<productname>SndKit</productname>, written by Stephen, rather
than the SoundKit for its sound processing.
</para>
      </listitem>

      <listitem>
	<para>
Leigh M. Smith, <email>&maintaineremail;</email> fixed bugs and ported
the <productname>MusicKit</productname> and <acronym>MIDI</acronym>
drivers to <productname>Intel</productname> and
<productname>PowerPC</productname> <productname>Rhapsody</productname>
in late 1998 and reorganised the packages and documentation for
<productname>MacOS X-Server V1.2</productname> and in 2000, to various
developer previews of <productname>MacOS X</productname>.  The
frameworks were ported to <productname>Windows 98/NT</productname>
using <productname>DirectMusic</productname> in 1999. A <ulink
url="&mksfweb;">sourceforge project</ulink> was created in 2000.
</para>
      </listitem>

      <listitem>
        <para>
<productname>DirectSound</productname> interface code for
<productname>Windows</productname>, <acronym>MP3</acronym> encoding,
much of the initial sound stream design and <acronym>FX</acronym>
architecture was contributed by SKoT McDonald.
</para>
      </listitem>

      <listitem>
	<para>
Keith Hamel tested and helped in bug fixes for the <productname>MacOS
X</productname> version.
</para>
      </listitem>

      <listitem>
        <para>
Matt Rice and Denis Crowdy both made valuable contributions to the
<productname>Linux</productname>/<productname>portaudio</productname>
port.
       </para>
      </listitem>
      <listitem>
        <para>
Kim Shrier added <productname>FreeBSD</productname> support.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="platforms">
    <title>Supported Platforms</title>
    <para>
        The <productname>MusicKit</productname> currently runs on the
        platforms described in <xref linkend=supportedplatforms>:
</para>
    <table id=supportedplatforms frame=all><title><productname>MusicKit</productname> Supported Platforms</title>
      <tgroup cols=4 colsep=1 rowsep=1>
	<colspec colnum=1 align=left>
	<colspec colnum=2 align=center>
	<colspec colnum=3 align=center>
	<colspec colnum=4 align=center>
	<thead>
	  <row>
	    <entry>Platform</entry>
	    <entry><acronym>MIDI</acronym></entry>
	    <entry>Sound</entry>
	    <entry><acronym>DSP</acronym></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>OpenStep 4.2/m68k (<productname>NeXT</productname>)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	  </row>
	  <row>
	    <entry>OpenStep 4.2/Intel (with ISA 56k card)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	  </row>
	  <row>
	    <entry>Windows XP (using <productname>GNUstep</productname>)</entry>
	    <entry>Partial</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>MacOS X-Server V1.0-1.2</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>MacOS X</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>Linux/Unix (Using
 <productname>GNUstep</productname>,
 <productname>portaudio</productname>/<productname>portmusic</productname>)</entry>
	    <entry>Partial</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="portability">
      <title>Portability</title>

      <para>
All the platform specific stuff is located in the
<filename>MKPerformSndMIDI</filename> framework.  The
<productname>MusicKit</productname> and
<productname>SndKit</productname> interface to
<filename>MKPerformSndMIDI</filename> using a C
<acronym>API</acronym> which was originally modelled after
some <productname>NeXT</productname> <acronym>API</acronym>
(although that is now history, particularly for streaming
audio).  There are several versions of
<filename>MKPerformSndMIDI</filename> underneath <filename
class=directory>MusicKit/Frameworks/PlatformSpecific</filename>.
You only compile one, all the versions are intended to produce
one framework named
<filename>MKPerformSndMIDI.framework</filename> which the
<productname>MusicKit</productname> and
<productname>SndKit</productname> link to.
      </para>

      <para>
The two versions under most active development are
<filename>MKPerformSndMIDI_MacOSX</filename> and
<filename>MKPerformSndMIDI_portaudio</filename>. The latter uses the
multiplatform <ulink
url="http://www.portaudio.com"><productname>portaudio</productname></ulink>
and <ulink url="http://portmedia.sourceforge.net/"><productname>portmidi</productname></ulink> library to map
to the platform specific <acronym>API</acronym> and this is the
means to interface with <productname>Linux</productname> and
<productname>Windows</productname> platforms.
      </para>
    </sect2>

    <sect2 id="macosx">
      <title><productname>MacOS X</productname> support</title>

      <para>
While there is now <productname>MacOS X</productname> support
in <productname>portaudio</productname>, historically
<filename>MKPerformSndMIDI_MacOSX</filename> existed before it and
I've personally continued to use it to ensure <productname>MacOS
X</productname> support is first class.  All <acronym>MIDI</acronym>
access is done using <productname>CoreMIDI</productname>
<acronym>API</acronym> calls and all sound I/O is done using
<productname>CoreAudio</productname>.
      </para>

      <para>
<productname>AudioUnits</productname> are
supported. <classname>SndAudioUnitProcessor</classname> allows loading and using existing
<productname>AudioUnits</productname> as a <classname>SndAudioProcessor</classname>, so
you will be able to plug other developers <productname>AudioUnits</productname> into your
<productname>SndKit</productname> sound processing stream. The source for AudioUnit
processing is located in <filename class=directory>MusicKit/Frameworks/PlatformSpecific/AudioUnits</filename>.
      </para>

      <para>
One <productname>AudioUnit</productname> issue is whether a
<productname>SndKit</productname> program can function as an
<productname>AudioUnit</productname>. In theory this should be
possible once <productname>Cocoa</productname> apps can draw their own
<productname>AudioUnit</productname> <acronym>GUI</acronym>, however
this depends on <productname>Apple</productname>.
      </para>

    </sect2>

    <sect2 id="linux">
      <title>Linux support</title>

      <para>
<productname>Linux</productname>/<productname>Unix</productname> support using the <ulink
url="http://www.gnustep.org">GNUstep</ulink> library is partially completed and looking
for more volunteers. A performance framework
(<filename>MKPerformSndMIDI_portaudio.framework</filename>) using the <ulink
url="http://www.portaudio.com">portaudio</ulink> library has been completed, porting the
<productname>MusicKit</productname> to <productname>Intel</productname>
<productname>Linux</productname>. Streaming sound I/O and <acronym>MIDI</acronym> output
works, but <acronym>MIDI</acronym> input needs further work, please help! Potentially
other <productname>Unix</productname> platforms will work (<productname>SGI</productname>,
<productname>Solaris</productname>, <productname>FreeBSD</productname>,
<productname>AIX</productname> etc) if they are supported in the
<productname>portaudio</productname> library and <productname>GNUstep</productname>.
</para>

      <sect3 id=installinggnustep>
	<title>Installing <productname>GNUStep</productname></title>
	<para>
Install <productname>GNUStep</productname> on your system in the usual fashion, according
to the <ulink url="http://wiki.gnustep.org/index.php/User_Guides">build guide</ulink>. You
may find binary packages are available on some <productname>Linux</productname>
distributions such as <ulink
url="http://www.debian.org"><productname>Debian</productname></ulink>. The following
versions of <productname>GNUStep</productname> packages are known to work:
</para>
     
	<variablelist>
	  <varlistentry id=gnustep-make>
	    <term>
            <ulink url="&gnustepdownload;/gnustep-make-&gsmakevertuple;.tar.gz">gnustep-make-&gsmakevertuple;.tar.gz</ulink>. 
            </term>
	    <listitem>
              <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf gnustep-make-&gsmakevertuple;.tar.gz
cd gnustep-make-&gsmakevertuple;
sh ./configure --enable-import
sudo make install
</screen>
                </informalexample>
              </para>
              <note>
                <para>
We continue to use <literal>#import</literal> since it has
been reinstated according to <ulink
url="http://gcc.gnu.org/ml/gcc/2003-03/msg00269.html">this email
exchange</ulink>. Older <command>gcc</command> versions may produce
spurious warnings.
                </para>
              </note>
	    </listitem>
	  </varlistentry>
	  <varlistentry id=gnustep-base>
	    <term>
            <ulink url="&gnustepdownload;/gnustep-base-&gsbasevertuple;.tar.gz">gnustep-base-&gsbasevertuple;.tar.gz</ulink>. 
            </term>
	    <listitem>
              <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf gnustep-base-&gsbasevertuple;.tar.gz
cd gnustep-base-&gsbasevertuple;
sh ./configure
sudo make install
</screen>
                </informalexample>
              </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry id=gnustep-gui>
	    <term>
            <ulink url="&gnustepdownload;/gnustep-gui-&gsguivertuple;.tar.gz">gnustep-gui-&gsguivertuple;.tar.gz</ulink>. 
            </term>
	    <listitem>
              <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf gnustep-gui-&gsguivertuple;.tar.gz
cd gnustep-gui-&gsguivertuple;
sh ./configure --disable-gsnd
sudo make install
</screen>
                </informalexample>
              </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>
    </sect2>

    <sect2 id="windows">
      <title><productname>Windows</productname> support</title>

      <para>
While other means of using the <productname>MusicKit</productname> on
<productname>Windows</productname> is possible, the current
recommended approach is using <ulink
url="http://www.mingw.org">MinGW</ulink>, the &ldquo;Minimal Gnu for
Windows&rdquo;, together with <ulink
url="http://www.gnustep.org">GNUstep</ulink> and the
<filename>MKPerformSndMIDI_portaudio</filename> framework.
</para>

      <para>
Currently the <productname>GNUstep</productname>
<productname>AppKit</productname> support on
<productname>Windows</productname> is incomplete, so your success
running <acronym>GUI</acronym> applications will vary. However the
<productname>MusicKit</productname> and
<productname>SndKit</productname> run fine.
</para>

      <para>
These instructions document the success I have had in getting
<productname>MinGW</productname>, <productname>GNUstep</productname>,
<productname>SndKit</productname> and
<productname>MusicKit</productname> and all the supporting libraries
compiled and running on a <productname>Windows XP</productname>
system. Instead of repeating instructions for installation of each
package that is better described by the package's documentation, I
have listed the order and version number of each package that needs
installing and the location of the documentation file. Please report
problems you may encounter in getting things to build.
</para>
      <sect3>
	<title>Install <productname>MinGW</productname> and friends</title>

	<itemizedlist>
	  <listitem>
	    <para>
Install the minimal command line <acronym>GNU</acronym> system by
running <filename>MSYS-1.0.10.exe</filename>.
</para>
	  </listitem>
	  <listitem>
	    <para>
Install complier, libraries and headers by running
<filename>MinGW-3.2.0-rc-3.exe</filename>. Install into the <filename
class=directory>C:/msys/mingw</filename> location.
</para>
	    <para>
When installing MSYS, ensure that the user name or at least the home
directory is a single name without a space, as this tends to break
<command>configure</command>. This is further described in GNUstep's
<filename>gnustep/core/make/Documentation/README.MinGW</filename>
</para>
	  </listitem>
	  <listitem>
	    <para>
Install the <ulink
url="http://subversion.tigris.org"><productname>Subversion</productname> version control
system</ulink> and other development tools with the MSYS developer tool kit
<filename>msysDTK-1.0.1.exe</filename>.
<!--
 Install the most up to date C
compiler from <filename>gcc-core-3.4.2-20040916-1.tar.gz</filename>
and the Objective C compiler from
<filename>gcc-objc-3.4.2-20040916-1.tar.gz</filename>.
-->
</para>
	  </listitem>
	</itemizedlist>
      </sect3>
      <sect3>
	<title>Install libraries supporting GNUstep</title>
	<itemizedlist>
	  <listitem>
	    <para>
<ulink url="http://www.gzip.org/zlib">zlib-1.2.2.tar.gz</ulink>
</para>
	  </listitem>
	  <listitem>
	    <para>
<ulink url="ftp://ftp.remotesensing.org/pub/libtiff/tiff-3.7.2.tar.gz">
libtiff V3.7.2.tar.gz</ulink>
./configure --disable-cxx CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib
</para>
	  </listitem>
	  <listitem>
	    <para>
You need at least
<ulink url="http://ftp.gnu.org/gnu/libiconv/libiconv-1.9.2.tar.gz">
libiconv V1.9.2</ulink> in order to compile (with gcc-3.4.2) on MinGW.
</para>
	  </listitem>
	  <listitem>
	    <para>
<ulink url="ftp://xmlsoft.org/libxml2-2.6.19.tar.gz">
libxml2 V2.6.19</ulink>.
</para>
	    <informalexample>
	      <screen>
./configure --with-iconv=/usr/local --with-zlib=/usr/local
</screen>
	    </informalexample>
	  </listitem>
	  <listitem>
	    <para>
<ulink url="ftp://xmlsoft.org/libxslt-1.1.14.tar.gz">
libxslt V1.1.14
</ulink>
</para>
	  </listitem>
	  <listitem>
	    <para>
<ulink url="ftp://ftp.gnustep.org/pub/gnustep/libs/ffcall-1.10.tar.gz">ffcall V1.10</ulink>
</para>
	    <informalexample>
	      <screen>
./configure --prefix=$GNUSTEP_SYSTEM_ROOT
make
make install
</screen>
	    </informalexample>
	  </listitem>

<!--
jpeg-6b-4-{bin,dep,lib}.zip
libpng-1.2.8
-->
	</itemizedlist>
      </sect3>
      <sect3>
	<title>Install <productname>GNUstep</productname></title>
	<para>
Read the instructions in
<filename>gnustep/core/make/Documentation/README.MinGW</filename>. I
installed <productname>GNUstep</productname> from the head of the
<productname>Subversion</productname> tree. If you are working from the head of the
<productname>Subversion</productname> tree also use:
</para>
	<informalexample>
	  <screen>
. /usr/GNUstep/System/Library/Makefiles/GNUstep.sh
</screen>
	</informalexample>
	<para>
instead of
</para>
	<informalexample>
	  <screen>
. /usr/GNUstep/System/Makefiles/GNUstep.sh
</screen>
	</informalexample>

	<para>
Configure <filename>gnustep-base</filename> 
</para>
	<informalexample>
	  <screen>
./configure CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib
</screen>
	</informalexample>
	<para>
Configure the <filename>gnustep-gui</filename> (until
<filename>libtiff</filename> can install into the
<productname>GNUstep</productname> tree):
</para>
	<informalexample>
	  <screen>
./configure --with-tiff-library=/usr/local/lib --with-tiff-include=/usr/local/include
</screen>
	</informalexample>
      </sect3>
      <sect3>
	<title>Installation of Libraries Supporting <productname>SndKit</productname></title>

	<para>
In addition to <link linkend="support">installing the common
support libraries</link>, the following steps need to be performed:
</para>

	<itemizedlist>
	  <listitem>
	    <para>
The Microsoft <ulink url="http://www.microsoft.com/downloads/details.aspx?displaylang=en&amp;familyid=bc7ddedd-af62-493d-8055-5e57bab71e1a">DirectX 9.0b
<acronym>SDK</acronym></ulink> (free) needs to be installed for
<productname>DirectSound</productname> operation.
</para>
	  </listitem>
	  <listitem>
	    <para>
The <productname>lame</productname> project needs 
<ulink url="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=809315&amp;group_id=290&amp;atid=300290">
patches</ulink> to compile under
<productname>MinGW</productname>. These patches may soon be
incorporated into a <productname>lame</productname> distribution
newer than &lamevertuple;.
</para>
	  </listitem>
	  <listitem>
	    <para>
The <productname>libshout</productname> project needs <ulink
url="http://www.xiph.org/archives/icecast-dev/0660.html">patches</ulink>
to compile under <productname>MinGW</productname>. These patches may
soon be incorporated into a <productname>libshout</productname>
distribution newer than &libshoutvertuple;.
</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title><acronym>MIDI</acronym> on <productname>Windows</productname></title>
	<para>
The <filename>MKPerformSndMIDI_portaudio</filename> framework supports <acronym>MIDI</acronym>.
The downloadable
sound (<acronym>DLS</acronym>) capability of
<productname>DirectMusic</productname> (providing a
<acronym>MIDI</acronym> oriented sample playback
<acronym>API</acronym> to <acronym>PC</acronym> soundcards) is also
supported when playing to a <productname>DirectMusic</productname>
software synthesiser. There is minimal but usable support for
downloading new <acronym>DLS</acronym> instruments to the software
synthesiser. Eventually this functionality will be managed by <ulink
url="http://www-2.cs.cmu.edu/~music/portmusic/">portmusic</ulink>
cross platform in
<filename>MKPerformSndMIDI_portaudio.framework</filename>
</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="SupportedLanguages">
    <title>Supported Programming Languages</title>
    <para>
While the <productname>MusicKit</productname> and
<productname>SndKit</productname> have been written in
<productname>Objective C</productname>, this does not limit the
system's use to that language. In particular, the dynamic binding of
<productname>Objective C</productname> enables quite straightforward
bridging to interpreters. This enables a relatively slow but
&ldquo;friendly&rdquo; (i.e interactive) interpreter to benefit from
the speed, multi-threading and feature set of the
<productname>MusicKit</productname> and
<productname>SndKit</productname> architectures.
</para>

    <para>
Examples included in the distribution which are written in other languages
include:
    </para>

    <variablelist>
      <varlistentry>
	<term><command>scoreinfo</command></term>
	<listitem>
	  <para>
A command-line tool written in Python to list MIDI channels
(<constant>MK_midiChan</constant>) used by each part in MIDI or
Scorefiles. This requires <ulink
url="http://www.python.org">Python</ulink> and <ulink
url="http://www.sourceforge.net/projects/pyobjc">PyObjC</ulink> to be
installed.
</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1 id="VersionNumbering">
    <title>Version numbering of the <productname>MusicKit</productname></title>

    <para>
Version numbering of the <productname>MusicKit</productname> is as follows.
</para>

    <para>
All versions are numbered in the popular standard GNU nomenclature
<replaceable>V.R.P</replaceable>, referred here as a <emphasis>version
tuple</emphasis>, referring to <replaceable>Version</replaceable>,
<replaceable>Revision</replaceable> and
<replaceable>Patch</replaceable>
respectively. <replaceable>Version</replaceable> refers to major
milestones in a project, such as a complete rewrite or major internal
conversion, major functional improvement etc.
<replaceable>Revision</replaceable>, refers to a minor milestone that
can include new functionality that may break external interfacing
software, forcing them to be updated (minimally a recompile).
<replaceable>Patch</replaceable>, refers to a singular bug fix to
correct operation which does not cause an incompatible change or
introduce new behaviour.
</para>

    <para>
Each framework has it's own version tuple. This is encoded in the
framework and is used by the dynamic loader to verify the correct
versions of applications link against the correct versions of
frameworks. However, to allow new framework with patches to be
installed into operational sites without forcing recompiles of the
application, the version tuple encoded in the framework is of the form
<replaceable>V.R</replaceable>. Therefore a new patched framework can
be installed over the top of the old same numbered framework with the
knowledge it will continue to work.
</para>

    <sect2>
      <title><productname>Subversion</productname> Branch Structure</title>

      <para>
Different software projects adopt different procedures for dealing with
<emphasis>branching</emphasis> of the code base. The MusicKit project currently has few
branches, however this description is an attempt to define a policy for developers to
conform to and to therefore be able to use when retrieving from the
<productname>Subversion</productname> tree.  For example, some projects use branches for
the &ldquo;bleeding-edge&rdquo; or experimental development, with the &ldquo;head&rdquo;
or &ldquo;trunk&rdquo; of the code tree being stable. Successful experiments are then merged
back into the head of the main branch of the tree.
</para>
      <para>
The head of the MusicKit can be considered unstable, but should be
considered to represent a concensus of development strategies. As
explained above, any diverging approaches or experiments will be
handled in sub-branch. Likewise, any patches to an existing release
other than next impending release will be found in a sub-branch.
</para>
      <para>
This can be counter intuitive. For example, when 5.4.1 is the most
recent patch, it is found at the head of the tree. If however,
eventually 5.5.0 was released, and then a patch needed to be made to
5.4.1, to be named 5.4.2, this would need to be made in a sub-branch
at 5.4.1. In practice, the amount of branching has proven to be nearly
zero. If indeed it starts to become necessary to simultaneously
support an existing release and an developmental release, this will
probably be at the release of a new version (i.e 5.5.0) and we can
properly branch there. Comments are welcome!
</para>
    </sect2>

  </sect1>

  <sect1 id="license">
    <title>License</title>

    <sect2 id="OriginalMKLicense">
      <title>Original <productname>MusicKit</productname> License</title>
      <para>
The source code as distributed by Stanford (V4.2) included the
following usage message:
</para>

    <blockquote>
      <title>Music Kit Usage</title>
      <para>
The Music Kit software is distributed free of charge.  Copyright
remains with the owner indicated in each file.  The software may be
freely incorporated into any <productname>NeXTStep</productname>
commercial application, any academic application, or any musical
composition.
</para>
      <para>
We would appreciate your acknowledging the use
of the Music Kit in any academic paper, music program notes and
application documentation that use the Music
Kit.
</para>
    </blockquote>

    </sect2>
    <sect2 id="CurrentMKLicense">
      <title>License for <productname>MusicKit</productname> Post-4.2 Code</title>
    <para>
In regard of version V&mkvertuple;
(consitituting all changes and modifications, porting efforts and
documentation beyond V4.2), the current license follows.
</para>

      <para>
The <productname>MusicKit</productname> software is distributed free
of charge.  Copyright remains with the owner indicated in each file
and copyright of the modifications to each file remains with the
contributor of the changes. The software in this distribution may be
freely incorporated into any commercial application, any academic
application, and public domain application or any musical composition
so long as the attribution of authorship of the software is retained
in the original source and documentation files.
</para>

      <para>
By sharing your contributions back to the public domain, this helps
others as well as yourself. It is not intended that your changes be
enforced to be returned to the public domain, but it is hoped that
common sense will prevail and that everyone will realise that reward
does not mean avoiding openness.
</para>

      <para>
We (the contributors to the <productname>MusicKit</productname>) would
appreciate you acknowledging the use of the
<productname>MusicKit</productname> in any academic paper, music
program notes and application documentation that use the
<productname>MusicKit</productname> or
<productname>SndKit</productname>. 
</para>
    </sect2>
  </sect1>

  <sect1 id="downloads">
    <title>Downloading and Installing the Distribution</title>

    <para>
The MusicKit can be installed from a binary distribution package or compiled
from the source code distribution tarball. In either case, certain
libraries must be preinstalled for the MusicKit to operate.
</para>

    <sect2 id=support>
      <title>Installing Supporting Libraries</title>
      <para>
The following libraries need to be installed prior to
compiling the MusicKit source or before attempting to link against the
MusicKit frameworks. These supporting libraries may be installable using <ulink
url="http://www.sourceforge.net/projects/fink">fink</ulink>, or they
can be individually downloaded and compiled as described
below. Certain libraries may be optionally omitted (reducing
functionality of the MusicKit) if necessary. These are noted below.
</para>

      <note>
	<para>
If installing on <productname>GNUstep</productname>, be sure that
<constant>PKG_CONFIG_PATH</constant> is set to point to whereever you
install the libraries listed below. For example, if you do install
these in <filename class=directory>/usr/local/lib</filename>,
<constant>PKG_CONFIG_PATH</constant> should be set to <filename
class=directory>/usr/local/lib/pkgconfig</filename>. See
<command>pkg-config</command> for details.
        </para>
      </note>

      <variablelist>
	<varlistentry id=oggvorbis>
	  <term>
            <ulink
            url="&oggdownload;">libogg-&oggvertuple;.tar.gz</ulink>. Status:
            optional - disables
            <classname>SndAudioProcessorMP3Encoder</classname> if omitted.
          </term>
	  <term>
            <ulink
            url="&vorbisdownload;">libvorbis-&vorbisvertuple;.tar.gz</ulink>. Status:
            optional - disables
            <classname>SndAudioProcessorMP3Encoder</classname> if omitted.
          </term>
	  <listitem>
	    <para>
The <ulink url="&oggvorbisweb;">Ogg/Vorbis</ulink> libraries
provide patent-free <productname>Vorbis</productname>
encoding/decoding of <acronym>PCM</acronym> audio
to and from <productname>Ogg</productname> format bitstreams for use by
<link linkend=libshout>libshout</link>.  Newer versions than
&oggvertuple; for <productname>Ogg</productname> and &vorbisvertuple;
for <productname>Vorbis</productname> will probably just work.
              </para>
	    <para>
Install the library using:
                <informalexample>
		<screen>
tar xzvf libogg-&oggvertuple;.tar.gz
cd libogg-&oggvertuple;
sh ./configure
sudo make install
cd ..
tar xzvf libvorbis-&vorbisvertuple;.tar.gz
cd libvorbis-&vorbisvertuple;
sh ./configure
sudo make install
</screen>
	      </informalexample>
              </para>
	  </listitem>
	</varlistentry>
	<varlistentry id=libsndfile>
	  <term>
            <ulink
            url="&libsndfiledownload;">libsndfile-&libsndfilevertuple;.tar.gz</ulink>.
            Status: optional - disables
            <classname>Snd</classname> file I/O and 
            <classname>SndAudioProcessorRecorder</classname> if omitted.
            </term>
	  <listitem>
	    <para>
The <ulink url="&libsndfileweb">libsndfile</ulink> sound file I/O
library provides sound file format conversion.  Newer versions than
&libsndfilevertuple; will probably just work.
              </para>
	    <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf libsndfile-&libsndfilevertuple;.tar.gz
cd libsndfile-&libsndfilevertuple;
sh ./configure
sudo make install
</screen>
	      </informalexample>
              </para>
	  </listitem>
	</varlistentry>
	<varlistentry id=lame>
	  <term>
            <ulink
            url="&lamedownload">lame-&lamevertuple;.tar.gz</ulink>. Status:
            optional - disables
            <classname>SndAudioProcessorMP3Encoder</classname> if omitted.
            </term>
	  <listitem>
	    <para>
The <ulink url="&lameweb;">LAME</ulink> library provides
<acronym>MP3</acronym> encoding/decoding capability.  Newer versions
than &lamevertuple; will probably just work.
</para>
	    <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf lame-&lamevertuple;.tar.gz
cd lame-&lamevertuple;
sh ./configure
sudo make install
</screen>
	      </informalexample>
              </para>
	  </listitem>
	</varlistentry>

	<varlistentry id=libshout>
	  <term>
            <ulink url="&libshoutdownload;">icecast-&libshoutvertuple;.tar.gz</ulink>. Status:
            optional - disables
            <classname>SndAudioProcessorMP3Encoder</classname> if omitted.
          </term>
	  <listitem>
	    <para>
The libshout library (part of the <productname>IceS</productname>
distribution) of the <ulink url="&libshoutweb;">icecast</ulink>
project provides the capability to stream <acronym>MP3</acronym> or
<productname>Ogg/Vorbis</productname> encoded audio to a broadcast
server.
</para>
	    <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf icecast-&libshoutvertuple;.tar.gz
cd icecast-&libshoutvertuple;
sh ./configure --without-python --disable-dependency-tracking
make
sudo make install
</screen>
	      </informalexample>
              </para>
	  </listitem>
	</varlistentry>
	<varlistentry id=portaudio>
	  <term>
<ulink
url="&portaudiodownload;">pa_snapshot_v&portaudiovertuple;.tar.gz</ulink>.
Status: Needs to be installed on <productname>Windows</productname>,
<productname>Linux</productname> and other Unixen except for
<productname>MacOS X</productname>,
<productname>OpenStep</productname>/<productname>NeXTStep</productname>
systems.
          </term>
	  <listitem>
	    <para>
At the moment, the portaudio <productname>Subversion</productname> repository version is the
only version that works on <productname>MinGW</productname> and so
<filename>MKPerformSndMIDI_portaudio</filename> uses the upcoming
V&portaudiovertuple; release.  Either fetch the <productname>Subversion</productname>
snapshot, or using <productname>Subversion</productname>, checkout
the portaudio version &portaudiovertuple; development branch. On
<productname>Linux</productname>/<productname><acronym>BSD</acronym></productname>/<productname><acronym>SGI</acronym></productname>
etc do:
</para>
	    <para>
	      <informalexample>
		  <screen>
cvs -d:pserver:anonymous@www.portaudio.com:/home/cvs co -r v19-devel portaudio
cd portaudio
./configure --without-oss --libdir=$GNUSTEP_SYSTEM_ROOT/Libraries
 --includedir=$GNUSTEP_SYSTEM_ROOT/Local/Libraries/Headers
sudo make install
</screen>
		</informalexample>
</para>

	    <para>
On <productname>Windows XP</productname> do:

	      <informalexample>
		  <screen>
cvs -d:pserver:anonymous@www.portaudio.com:/home/cvs co -r v19-devel portaudio
cd portaudio
./configure --libdir=$GNUSTEP_SYSTEM_ROOT/Libraries
 --includedir=$GNUSTEP_SYSTEM_ROOT/Local/Libraries/Headers
--with-winapi=directx
--with-dxdir=/c/DXSDK
sudo make install
</screen>
	      </informalexample>
</para>

	  </listitem>
	</varlistentry>
	<varlistentry id=libmp3hip>
	  <term>
            <ulink url="&hipdownload;/libmp3hip-&hipvertuple;.tar.gz">libmp3hip-&hipvertuple;.tar.gz</ulink>. Status:
            optional - disables
            <classname>SndMP3</classname> if omitted.
            </term>
	  <listitem>
	    <para>
The libmp3hip library of the <ulink url="&libshoutweb;">LAME</ulink>
project provides the <acronym>MP3</acronym> decoding
</para>
	    <para>
Install the library using:
                <informalexample>
                  <screen>
tar xzvf libmp3hip-&hipvertuple;.tar.gz
cd libmp3hip-&hipvertuple;
sh ./configure
make
sudo make install
</screen>
	      </informalexample>
              </para>
	  </listitem>
	</varlistentry>

      </variablelist>
    </sect2>

    <sect2 id=binaries>
      <title>Installing MusicKit Binaries</title>
      <para>
Binaries for the compiled frameworks for various operating systems
reside on sourceforge as <filename>.dmg</filename>
(<productname>Apple</productname>), or
<filename>.rpm</filename> (<productname>Linux</productname>)
packages. The files include the version number, choose the most recent
release:
      </para>

      <para>
	<variablelist>
	  <varlistentry>
	    <term>
            <ulink url="&mkdownload;/MK-&mkvertuple;.b.MOX.dmg">MK-&mkvertuple;.b.MOX.dmg</ulink>
            </term>
	    <listitem>
	      <para>
The MacOS X frameworks (including the
<productname>SndKit</productname>), applications, command line tools
and documentation.
</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
              <ulink url="&mkdownload;/ZilogSCCMIDI.b.tar.gz">ZilogSCCMIDI.b.tar.gz</ulink>
              </term>
	    <listitem>
	      <para>
The <productname>MacOS X-Server V1.2</productname>
<acronym>MIDI</acronym> driver binary for <acronym>SCC</acronym>
<acronym>UART</acronym>s in <hardware>8500/8600/9500/9600/G3/G4
PowerMacs</hardware>.
</para>
	      <note>
		<para>
This driver is not needed and will not work on <productname>MacOS
X</productname>, only <productname>MacOS X-Server V1.2</productname>.
</para>
	      </note>
	    </listitem>
	  </varlistentry>
<!-- TODO
	    <varlistentry>
	      <term>
            <ulink url="&mkdownload;/MK-&mkvertuple;.b.linux-i386.rpm">MK-&mkvertuple;.b.linux-i386.rpm</ulink>
            </term>
	    <listitem>
	      <para>
              The Intel <productname>Linux</variablelist> frameworks (including the
              <productname>SndKit</productname>).
              </para>
	    </listitem>
	  </varlistentry>
-->
<!-- TODO
	  <varlistentry>
	    <term>
            <ulink url="&mkdownload;/MK-&mkvertuple;.b.w32.pkg.tar">MK-&mkvertuple;.b.w32.pkg.tar</ulink>
            </term>
	    <listitem>
	      <para>
              The <productname>Windows9X/2000</productname> frameworks (including the <productname>SndKit</productname>).
              </para>
	    </listitem>
	  </varlistentry>
-->
	</variablelist>
      </para>

      <sect3 id="installation">
	<title>Installation Locations</title>

	<para>
The <application>Installer</application> program will let you choose a
directory in which to place the binaries.  If you are on a
stand-alone machine, you should be logged in (or running
<application>Installer</application>) as root and choose
&ldquo;<filename class=directory>/</filename>&rdquo; for the
installation directory (the default).
</para>

	<para>
The frameworks and applications are installed into the appropriate
platform locations given in <xref linkend=installlocations>.
</para>

	<table id=installlocations frame=all><title><productname>MusicKit</productname> Install locations</title>
	  <tgroup cols=3 colsep=1 rowsep=1>
	    <colspec colnum=1 align=left>
	    <colspec colnum=2 align=center>
	    <colspec colnum=3 align=center>
	    <thead>
	      <row>
		<entry>Platform</entry>
		<entry>Frameworks install location</entry>
		<entry>Applications install location</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><productname>OpenStep 4.2 (m68k,ix86)</productname></entry>
		<entry><filename class=directory>/LocalLibrary/Frameworks</filename></entry>
		<entry><filename class=directory>/LocalApps</filename></entry>
	      </row>
	      <row>
		<entry><productname>MacOS X-Server V1.0-1.2</productname></entry>
		<entry><filename class=directory>/Local/Library/Frameworks</filename></entry>
		<entry><filename class=directory>/Local/Apps</filename></entry>
	      </row>
	      <row>
		<entry><productname>MacOS X</productname></entry>
		<entry><filename class=directory>/Library/Frameworks</filename></entry>
		<entry><filename class=directory>/Applications</filename></entry>
	      </row>
	      <row>
		<entry><productname>GNUStep</productname> (on <productname>Unix</productname>en)</entry>
		<entry><filename class=directory>/usr/GNUstep/Local/Library/Frameworks</filename></entry>
		<entry><filename class=directory>/usr/GNUstep/Local/Applications</filename></entry>
	      </row>
	      <row>
		<entry><productname>GNUStep</productname> (on <productname>Windows</productname>)</entry>
		<entry><filename class=directory>C:\GNUstep\Local\Library\Frameworks</filename></entry>
		<entry><filename class=directory>C:\GNUstep\Local\Applications</filename></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	
	<para>
Command line tools and manual pages will install into the <filename
class=directory>/usr/local</filename> hierarchy on
<productname>Unix</productname> type machines, specifically <filename
class=directory>/usr/local/bin</filename>. Locations for command line
Windows tools have yet to be determined.
</para>

	<para>
If you are the system administrator for a NFS shared network, you
probably want to choose a local directory which can be exported and
create symbolic links into that directory on the networked machines.
Alternatively, if you have a single server that exports <filename
class=directory>/Local*</filename> and <filename
class=directory>/usr/local</filename>, simply install the package
there and you're done.
</para>

      </sect3>
    </sect2>

    <sect2 id=sources>
      <title>Installing From The Source Tarball</title>
      <para>
The source distribution is located at:
</para>
	
      <para>
        <variablelist>
	    <varlistentry>
	      <term>
              <ulink url="&mkdownload;/MK-&mkvertuple;.s.tar.gz">MK-&mkvertuple;.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
The source to <filename>MusicKit</filename>,
<filename>SndKit</filename>,
<filename>MKDSP</filename>, <filename>MKPerformSndMIDI</filename>,
<filename>MKUnitGenerators</filename> and
<filename>MKSynthPatches</filename> frameworks and all utilites,
applications, documentation and example code.
              </para>
		<para>
This is the most recent revision and patch. Some older revisions are
located at the <ulink url="&mkdownload;">sourceforge site</ulink>
for regression testing.
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry id=ZilogDriverSource>
	      <term>
              <ulink url="&mkdownload;/ZilogSCCMIDI.s.tar.gz">ZilogSCCMIDI.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                  The <productname>MacOS X-Server V1.0-1.2</productname>
                  <acronym>MIDI</acronym> driver source.
                </para>
                <note>
                  <para>
                    This is not needed for <productname>MacOS
                    X</productname>.
                  </para>
                </note>
	      </listitem>
	    </varlistentry>
	    <varlistentry id=DriverKitHeaders>
	      <term>
               <ulink url="&mkdownload;/DriverKitHeadersForMOXS_V1.2.tar.gz">DriverKitHeadersForMOXS_V1.2.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                  <productname>NeXTStep V3.3</productname> headers
                  required to compile the <link
                  linkend=ZilogDriverSource>driver</link> on
                  <productname>MacOS X-Server V1.2</productname>.
                </para>
                <note>
                  <para>
                    This is not needed for <productname>MacOS X</productname>.
                  </para>
                </note>
	      </listitem>
	    </varlistentry>
	  </variablelist>
      </para>
    </sect2>

    <sect2 id="RetrieveSubversion">
      <title>Retrieving Sources From The <productname>Subversion</productname> Repository</title>
      <para>
The bleeding edge source is obtainable from the <ulink
url="http://subversion.tigris.org"><productname>Subversion</productname></ulink>
repository on <ulink url="http://www.sourceforge.net">sourceforge</ulink> and is described
in detail by <ulink url="&mksvnweb;">this sourceforge page</ulink>.
</para>
    </sect2>

    <sect2 id="compilation">
      <title>Compiling The Sources</title>

      <para>
The MusicKit installation process is now practically the same as most <ulink
url="http://www.gnu.org/software/autoconf/"><command>autoconf</command></ulink>
configured software. Trivially, the following commands will compile and install the
MusicKit.
</para>

	<informalexample id=mkbuild>
	  <screen>
./configure
make
sudo make install
</screen>
	</informalexample>

      <para>
If you are installing dependent libraries into a non-standard place such as <filename
class=directory>/sw</filename> if using <ulink
url="http://www.finkproject.org/"><productname>fink</productname></ulink> on
<productname>MacOS X</productname>, you can use the standard <command>configure</command>
method to specify the compilation and linking flags:
</para>

	<informalexample id=mkbuildflags>
	  <screen>
./configure CPPFLAGS=-I/sw/include LDFLAGS=-L/sw/lib
make
sudo make install
</screen>
	</informalexample>

      <para>
There are a couple of subtle variations to this, explained below. 
</para>

      <sect3 id="buildingongnustep">
	<title>Building on <productname>GNUstep</productname></title>
	<para>
On <productname>GNUstep</productname> systems, <command>make</command> is responsible for
building the MusicKit sources. From the top level of the source tree, executing <command>make</command>
should build <filename class="directory">Frameworks</filename>, <filename
class="directory">Examples</filename> and <filename
class="directory">Applications</filename>. Note that the applications and tools built may
differ from the <productname>MacOS X</productname> set due to missing
<filename>GNUmakefile</filename> definitions, but we aim to produce the
same files on all platforms.
</para>
	<para>
At the time of writing, <productname>GNUstep</productname> isn't able to build
frameworks which depend on earlier built frameworks automatically. This requires
installing each MusicKit framework individually, in order, in a similar fashion to the frameworks
of <productname>GNUstep</productname> themselves. Also, the environment variables required by
<productname>GNUstep</productname> for building must be defined while having root
permissions in order to install. This is achieved with the following commands:
</para>
	
	<informalexample id=gnustepmkbuild>
	  <screen>
% ./configure
% sudo sh
# . /usr/GNUstep/System/Library/Makefiles/GNUstep.sh
# cd Frameworks/PlatformDependent/MKPerformSndMIDI_portaudio
# make install
# cd ../../SndKit
# make install
# cd ../MKDSP_Native
# make install
# cd ../MusicKit
# make install
# cd ../..
# make install
</screen>
	</informalexample>
      </sect3>

      <sect3 id="buildingonmacosx">
	<title>Building on <productname>MacOS X</productname></title>
	<para>
On <productname>MacOS X</productname>, to benefit from the
<productname>Xcode</productname> <acronym>IDE</acronym> (the <acronym>IDE</acronym>, plus
zero-linking), <command>make</command> will just run the <command>xcodebuild</command>
command line tool which does the actual building using the
<filename>MusicKit.xcodeproj</filename> project. If <command>configure</command>
determined some libraries were unavailable, they will be omitted from the
<envar>CONFIGURED_LIBS</envar> variable passed on the command line when
<command>xcodebuild</command> is run by <command>make</command>. Since <command>xcodebuild
install</command> builds and then installs, the <command>sudo make install</command>
suffices, typing a preceding <command>make</command> is not actually necessary.
</para>

	<para>
The MusicKit project can also be built within the
<productname>Xcode</productname> <acronym>IDE</acronym>
<acronym>GUI</acronym>. However <command>configure</command> must be
run before building with Xcode, in order to configure headers to
selectively compile sources based on library availability. In
addition, the default configuration is to assume if the
<productname>Xcode</productname> <acronym>GUI</acronym> is being used,
then the MusicKit is being developed, not just installed and that all
libraries have been installed. If all of the libraries are not
available, the build setting <envar>CONFIGURED_LIBS</envar> must be changed for the
SndKit to remove those libraries which are not installed. In practice,
the user must manually modify <envar>CONFIGURED_LIBS</envar> build setting in the
SndKit target to match the setting in <filename>Makefile</filename>.
</para>

	<para>
To build on MacOS 10.6, currently the MusicKit and SndKit frameworks must be built for the
i386 32 bit architecture. This requires the supporting libraries to also be built as i386
binaries. Assuming the support libraries are built with an i386 architecture binary,
<command>configure</command> needs to be instructed to test the library linking with the
i386 architecture, using the -arch flag:

	<informalexample id=mkbuildflags>
	  <screen>
./configure CFLAGS="-arch i386"
make
</screen>
	</informalexample>

      <note>
      <para>
The <filename>MKUnitGenerators</filename> and
<filename>MKSynthPatches</filename> frameworks won't compile on
platforms other than <productname>OpenStep</productname> or
<productname>NeXTStep</productname> because the Motorola
<command>asm56000</command> and <command>lnk56000</command> tools are
missing.
</para>
      </note>
      </sect3>

      <sect3 id="mididriver">
	<title>Installing a MIDI driver</title>

	<para>
If necessary, compile and install an appropriate
<acronym>MIDI</acronym> driver.</para>

	<para>
To compile the <productname>MacOS X-Server V1.2</productname> Zilog
<acronym>SCC</acronym> <acronym>MIDI</acronym> driver, some header
files are missing.  You can get them from the
<productname>Darwin</productname> distribution of the
<productname>SoundKit</productname>, copy them from a
<productname>NeXTStep 3.3</productname>/<productname>OpenStep
4.2</productname> system, or as a convience, they are made available
for <link linkend=DriverKitHeaders>download</link>.
</para>

	<para>
MacOS X Developer release includes source for a generic
<acronym>USB</acronym> <acronym>MIDI</acronym> driver at
<filename>/Developer/Examples/CoreAudio/MIDI/SampleUSBDriver</filename>.
There is also a driver binary for the <productname
class="Registered">MIDIMan</productname>
<trademark>MIDISPORT</trademark> <acronym>USB</acronym> interfaces for
MacOS X available for download from <ulink
url="http://www.midiman.com">MIDIMan's web page</ulink> and other
vendors may well have drivers available for their hardware.
</para>
      </sect3>

    </sect2>

    <sect2 id="buildingdoco">
      <title>Building the Documentation</title>
      <para>
The documentation for the MusicKit and SndKit are now authored in <ulink
url="http://www.docbook.org">DocBook</ulink> <acronym>SGML</acronym> format. This is then
rendered to <acronym>HTML</acronym>, <acronym>PDF</acronym>,
<productname>Apple</productname> <application>HelpViewer</application> and potentially
other formats. In order to convert the documentation to these usual output formats, tools
such as <ulink
url="http://openjade.sourceforge.net"><application>openjade</application></ulink>, <ulink
url="http://www.tug.org/"><application>TeX</application></ulink>, <ulink
url="http://doxygen.sourceforge.net"><application>doxygen</application></ulink> need to be
installed in addition to DocBook itself. The <command>configure</command> command will
check for these tools. The <command>make</command> command will attempt to build and
install as much of the documentation as possible based on which tools have been
installed. This is invoked by:
</para>

	<informalexample id=mkbuilddocs>
	  <screen>
make documentation
sudo make installdocs
</screen>
	</informalexample>

    </sect2>

  </sect1>

  <sect1 id="appsandexs">
    <title>Included Applications and Example Code</title>

    <sect2 id="applications">
      <title>Applications in the distribution</title>
      <itemizedlist>
	<listitem>    
	  <para>
<application>ScorePlayer</application> (David Jaffe)
</para>
	</listitem>
	<listitem>
	  <para><application>WaveEdit</application> (David Jaffe)</para>
          <para>
<application>WaveEdit</application> is an application that makes it
possible to display, edit and listen to wave tables.
</para>
	</listitem>
	<listitem>
	  <para><application>Ensemble</application> (Michael McNabb)</para>
          <para>
<application>Ensemble</application> combines elements of a sequencer,
a voicing application and an algorithmic composition application.
</para>
	</listitem>
	<listitem>
	  <para><application>EnvelopeEd</application> (Fernando Lopez Lezcano)</para>
	</listitem>
	<listitem>
	  <para><application>PianoRoll</application> (Jonathan Knudsen)</para>
	</listitem>
	<listitem>
	  <para><application>HosePlayer</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>SlideFlute</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>edsnd</application> (Lee Boynton)</para>
	</listitem>
	<listitem>
	  <para><application>Reich-o-Matic</application> (Brad Garton)</para>
	</listitem>
	<listitem>
	  <para><application>Looching</application> (Brad Garton)</para>
	</listitem>
	<listitem>
	  <para><application>ResoLab</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>ClariNot</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>ResonSound</application> (David Jaffe)</para>
	  <para>
Real time processing of sound from the
<acronym>DSP</acronym> serial port.
          </para>
	</listitem>
        <listitem>
          <para><application>PatchCord</application> (Leigh Smith)</para>
	  <para>
A system exclusive librarian and patch editor.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="examples">
      <title>Example code in the distribution</title>
      <para>
There are two kinds of programming examples.  Programs with names
entirely in lowercase, such as <command>playscorefile</command>, are
command-line programs.  Programs with names beginning with an
uppercase letter, such as <application>PlayNote</application>, are
applications (i.e. graphic-interface programs).
</para>

      <para>
The complete set of programs is listed below.  For further information
on a given programming example, see the README file in its directory.
      </para>

      <variablelist>
	<title>Simple command-line programming examples</title>

	<varlistentry>
	  <term><command>playpart</command></term>
	  <listitem>
	    <para>
Create notes algorithmically and play them.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>playscorefile</command></term>
	  <listitem>
	    <para>
Read a scorefile into a <classname>MKScore</classname> and play it on
the <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>playscorefile2</command></term>
	  <listitem>
	    <para>
Read a scorefile and play it on the <acronym>DSP</acronym> as it is read.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>playscorefilemidi</command></term>
	  <listitem>
	    <para>
Play scorefile through <acronym>MIDI</acronym> out.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>mixscorefiles</command></term>
	  <listitem>
	    <para>
Mix any number of scorefiles and write the result out.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>process_soundfiles_dsp</command></term>
	  <listitem>
	    <para>
Process a sound file through the <acronym>DSP</acronym>
(non-real-time).  Includes <classname>MKSynthPatch</classname>es for
resonating and enveloping sounds.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>mixsounds</command></term>
	  <listitem>
	    <para>
Soundfile mixer that shows how to make your own
<classname>MKInstrument</classname> (non-real-time).
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>exampleSynthPatch</command></term>
	  <listitem>
	    <para>
Demonstrates how to build a <classname>MKSynthPatch</classname> and play it.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>exampleUnitGenerator</command></term>
	  <listitem>
	    <para>
Demonstrates how to build a <classname>MKUnitGenerator</classname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example1</command></term>
	  <listitem>
	    <para>
Simple <classname>MKNote</classname> and
<classname>MKScore</classname> generation.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example2</command></term>
	  <listitem>
	    <para>
Demonstration of playing <classname>MKNote</classname>s.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example3</command></term>
	  <listitem>
	    <para>
Simple algorithmic melody generation.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example4</command></term>
	  <listitem>
	    <para>
Simple algorithmic melody generation using <classname>MKPart</classname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example5</command></term>
	  <listitem>
	    <para>
Demonstration of <classname>MKUnitGenerator</classname>s.
</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <variablelist>
	<title>Simple application programming examples</title>
	<varlistentry>
	  <term><application>Metronome</application></term>
	  <listitem>
	    <para>
Simple note playing.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiFilePlayback</application></term>
	  <listitem>
	    <para>
Play MIDI files with samples using <classname>MKSamplePlayerInstrument</classname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiEcho</application></term>
	  <listitem>
	    <para>
Take <acronym>MIDI</acronym> in, generate echoes, and send to
<acronym>MIDI</acronym> output.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiLoop</application></term>
	  <listitem>
	    <para>
Take <acronym>MIDI</acronym> input and send it right out
<acronym>MIDI</acronym> again.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiPlay</application></term>
	  <listitem>
	    <para>
Take <acronym>MIDI</acronym> input and play the <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiRecord</application></term>
	  <listitem>
	    <para>
Read <acronym>MIDI</acronym> input into a
<classname>MKScore</classname> obj, write a scorefile.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>PerformerExample</application></term>
	  <listitem>
	    <para>
Adjust algorithmically-generated music playing on <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>PlayNote</application></term>
	  <listitem>
	    <para>
Click a button to play and adjust notes on the <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>QuintProcessor</application></term>
	  <listitem>
	    <para>
Interactive application for the <productname>Ariel</productname>
<productname>QuintProcessor</productname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>SineGen</application></term>
	  <listitem>
	    <para>
Interactively adjust the frequency of a sine wave.
</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="works">
    <title>What works?</title>
    <para>
The frameworks (SndKit, MusicKit) have been exercised fairly
extensively and are quite stable.
</para>
    <para>
<acronym>MIDI</acronym> recording
and playback of scores and computed parts works on all supported
platforms. The application <application>ScorePlayer</application>, the
examples <application>MidiFilePlayback</application> and
<command>playscorefilemidi</command>, and the utility
<command>playscore</command> demonstrate these capabilities.
</para>

    <para>
Sound recording and playback is also
stable. The applications <application>Spectro</application> and 
<application>TwoWaves</application>, and the commands
<command>playsnd</command>, <command>recsnd</command> demonstrate
Sound recording/performance.
</para>

  </sect1>

  <sect1 id="notworking">
    <title>What doesn't work? / What needs doing?</title>
    <itemizedlist>
      <listitem>
	<para>
The current tasks to be done (tickets) are listed on the 
<systemitem class="systemname">sourceforge</systemitem> MusicKit
<ulink url="http://www.sourceforge.net/apps/trac/musickit">Trac Manager</ulink>.
</para>
      </listitem>
      <listitem>
	<para>
<acronym>DSP</acronym> on non-56K <acronym>DSP</acronym>
systems. Stephen mentioned he got sound out under OS4.2. However none
of the <acronym>DSP</acronym> drivers have been ported from
<productname>NeXTStep</productname> V3.3 (as they are all
<acronym>ISA</acronym> bus cards and I don't know of a
<acronym>PCI</acronym> <hardware>56K</hardware> card with published
interface specs).
</para>
	<para>
A more fruitful avenue seems to be to convert the unit generators to
the <acronym>MPEG</acronym> Layer 4 structured audio language <ulink
url="http://www.saol.net"><acronym>SAOL</acronym></ulink>
<citation>ScheirerVercoe99</citation> and modify the MKDSP framework
to download to a supporting card or do the emulation using the native
processor.  If emulating with the native processor, it would then be
possible to use <productname>Apple</productname>s
<productname>AltiVec</productname> vector libraries for increased
performance.
</para>
      </listitem>

      <listitem>
	<para>
For this current revision the <filename>.nib</filename>s have been
upgraded to work with <productname>MacOS X</productname> and
<productname>MacOS X-Server</productname> and will not load with
<productname>OpenStep</productname> 4.2. The
<filename>.nib</filename>s which are compatible with
<productname>OpenStep</productname> 4.2 are now named
<filename><replaceable>nibname</replaceable>-openstep.nib</filename>. At
the moment you will need to manually symbolically link these to
compile for <productname>OpenStep</productname> 4.2. Eventually
<productname>Apple</productname>'s
<application>InterfaceBuilder</application> will produce
<acronym>XML</acronym> based nibs which should reduce the
compatibility issue.
</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="mkV5changes">
    <title><acronym>API</acronym> Changes in
    <productname>MusicKit</productname> V5.X frameworks</title>

    <para>
The changes from Version 4 to Version 5 of the
<productname>MusicKit</productname> mostly consists of conversion to
the <productname>OpenStep</productname> specification from the older
<productname>NeXTStep</productname> <acronym>API</acronym>.
</para>

    <sect2>
      <title>Frameworks replace libraries</title>
      <para>
Libraries have now been replaced as the following frameworks:</para>
      <itemizedlist>
	<listitem>
	  <para>MusicKit.framework</para>
	</listitem>
	<listitem>
	  <para>MKDSP.framework</para>
	</listitem>
	<listitem>
	  <para>MKPerformSndMIDI.framework</para>
	</listitem>
	<listitem>
	  <para>MKSynthPatches.framework</para>
	</listitem>
	<listitem>
	  <para>MKUnitGenerators.framework</para>
	</listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Include Files</title>
      <para>
The root hierarchical include file
is now <literal>#import</literal>ed as
<literal>&lt;MusicKit/MusicKit.h&gt;</literal> replacing
<literal>&lt;musickit/musickit.h&gt;</literal>.
</para>

      <para>
Unit generator headers are included from
<filename>MKUnitGenerators.framework</filename>, not
<filename>musickit/unitgenerators</filename>.
</para>
    </sect2>

    <sect2>
      <title>Class naming conventions</title>
      <para>
All the public <productname>MusicKit</productname> classes are now
prefixed with <literal>MK</literal> to match the Foundation/AppKit
model, ie <classname>MKNote</classname>,
<classname>MKOrchestra</classname> replaces
<classname>Note</classname> and <classname>Orchestra</classname>. In a
similar manner to the changes in other frameworks when
<productname>OpenStep</productname>-ified, as well as method name
changes, there are object allocation changes, generally
<methodname>+new</methodname> is now an appropriate name returning an
autoreleased instance, i.e <methodname>+score</methodname> for
<classname>MKScore</classname>, <methodname>+note</methodname> for
<classname>MKNote</classname> etc.  <classname>NSString</classname>s
replace <literal>char *</literal> where ever possible.
</para>

    </sect2>
    <sect2>
      <title>Class Specific Changes</title>

      <sect3>
	<title><classname>MKMidi</classname></title>
	<itemizedlist>
	  <listitem>
	    <para>
<methodname>+new</methodname> has been renamed
<methodname>+midi</methodname> in keeping with
<productname>OpenStep</productname> conventions.
</para>
	  </listitem>
	  <listitem>
	    <para>
<methodname>allocFromZone:onDevice:</methodname> and
<methodname>allocFromZone:onDevice:hostName</methodname> have been replaced
with corresponding <methodname>-initOnDevice:</methodname> and
<methodname>-initOnDevice:hostName:</methodname> instance methods and
<methodname>+midiOnDevice:</methodname>,
<methodname>+midiOnDevice:hostName:</methodname> class methods to support
<productname>OpenStep</productname> allocation conventions.
</para>
	  </listitem>
	  <listitem>
	    <para>
The methods <methodname>-noteSenders</methodname> and
<methodname>-noteReceivers</methodname> don't return a copy of the
array. The parent object is expected to copy it.
</para>
	  </listitem>
	</itemizedlist>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="fixes">
    <title>Contributing Fixes</title>
    <para>
Please! Changes are maintained via an <ulink url="&mksvnweb;">open
<productname>Subversion</productname> system</ulink>.  If you send me
<email>&maintaineremail;</email> changes I will incorporate them and check them in. If you
are planning to do major work, I can register you as a developer to provide write access
to the <productname>Subversion</productname> server.
</para>

    <para>
If you make a <productname>MusicKit</productname> program that you'd
like us to consider for distribution as part of the
<productname>MusicKit</productname>, <acronym>DSP</acronym> and
<productname>SndKit</productname> Distribution, please send it to the
following address: <email>&maintaineremail;</email>.  We are
interested in applications, unit generators, synth patches, etc.  If
you do not have e-mail access, you can send media to the address of
the author at the start of this document.
</para>

    <para>
If you have discovered a bug, please report it via the
<productname>sourceforge</productname> bug tracker.
</para>
  </sect1>

  <sect1 id=Donations>
    <title>Supporting The MusicKit Project by Donations</title>

    <para>
The MusicKit project is run by volunteers who donate their development
time, equipment and personal money instead of working on paying
jobs. While we prefer contributions of development time and of
code, monetary donations allow us in a very real sense to continue to
develop the MusicKit for the benefit of all your projects, including
commercial projects.
</para>

    <para>
Please consider donating to the MusicKit project to keep releases and
bug fixes regularly delivered. You can make online donations via
<ulink
url="http://sourceforge.net/project/project_donations.php?group_id=9881">the
sourceforge donations system</ulink>.
</para>

    <para>
The MusicKit Project developers are also available for contracting
work to add substantial features to the MusicKit, to consult on
integration of MusicKit technologies into other projects and to work
on other complimentary projects. Please direct questions to the project
administrator <email>&maintaineremail;</email>.
</para>
  </sect1>

  <!-- all citations of documentation directly related to the MusicKit -->
  &bibliography;
  <!-- citations of related computer music, DSP publications -->
  &readinglist;

  <ackno>
   <ulink url="http://sourceforge.net">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="Images/sourceforge.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="Images/sourceforge.png">
<!--
	<imagedata fileref="http://sourceforge.net/sflogo.php?group_id=9881"
	  width="88"
	  depth="31"
	  align=left>
-->
	</imageobject>
	<textobject>
	  <phrase>SourceForge Logo</phrase>
        </textobject>
      </inlinemediaobject>
SourceForge kindly hosts the <productname>MusicKit</productname>.
   </ulink>
</ackno>
</article>

<!--
Local Variables:
time-stamp-format:"%02d/%02m/%04y"
time-stamp-line-limit:100
time-stamp-start:"<date>"
time-stamp-end:"</date>"
End:
-->

