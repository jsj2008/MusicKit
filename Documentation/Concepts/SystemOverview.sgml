<!-- $Id$ -->
  <chapter id="SystemOverview">

    <title><productname>MusicKit</productname> and
      <productname>SndKit</productname> System Overview
    </title>

    <para><productname>MusicKit</productname> application programs are
written in the Objective-C language, an extension to C that adds
object-oriented concepts to the language.  The software kits define a
number of <emphasis>classes</emphasis>, or object templates, that you
can use in your own applications.  The software kits currently
provided by the MusicKit Project are:</para>

    <itemizedlist>
      <listitem><para>The <productname>SndKit</productname>
	  <!-- trademark -->
	  for adding sounds to your application.</para>
      </listitem>

      <listitem><para>The <productname>MusicKit</productname>
	  <!-- trademark --> for music composition, synthesis, and performance.</para>
      </listitem>
    </itemizedlist>

    <para>
      The <productname>MusicKit</productname> currently uses the
      <hardware>MC56001</hardware> digital signal processor (the
      <acronym>DSP</acronym>) as a sound synthesizer.  Objects in this kit
      communicates with the <acronym>DSP</acronym> by calling functions in
      the <acronym>DSP</acronym> system library.  In addition to
      establishing and managing a channel of communication between your
      application and the <acronym>DSP</acronym>, the functions in the
      <acronym>DSP</acronym> system library also provide diagnostic
      capabilities and data conversion routines.</para>

    <tip>
      <para>
	Work is underway to remove the requirement of specific DSP
	hardware to do synthesis, instead using the MPEG-4 Structured
	Audio language <acronym>SAOL</acronym> and any MPEG-4
	compatible hardware, or the <productname>sfront</productname>
	<acronym>SAOL</acronym> interpreter running on the native processor.
      </para>
    </tip>

    <sect1 id="SoundAndMusicOverview">
      <title>Sound and Music Overview</title>

      <para>The <productname>MusicKit</productname> and
	<productname>SndKit</productname> provide a useful system for creating
	and manipulating sound and music.  The software for this system is
	divided into two kits, the kit that you need depends on the demands of
	your application:</para>

      <itemizedlist>
	<listitem><para>The <productname>SndKit</productname> lets you
	    incorporate prerecorded sound effects into your application and
	    provides easy access to the microphone input so you can record your
	    own sounds.  The objects in the <productname>SndKit</productname> let
	    you examine and manipulate sound data with microscopic
	    precision.</para>
	</listitem>

	<listitem><para>The <productname>MusicKit</productname> provides
	    tools for composing, storing, and performing music.  It lets you
	    communicate with external synthesizers as well as create your own
	    software instruments.  Like the <productname>SndKit</productname>, the
	    <productname>MusicKit</productname> provides objects that create and
	    manipulate sounds with exquisite detail; but more important, the Music
	    Kit helps you organize and arrange groups of sounds so you can design
	    a performance.</para>
	</listitem>
      </itemizedlist>

      <sect2 id="TheSndKitOverview">
	<title>The <productname>SndKit</productname></title>

	<!-- This sucks --> <para>Many sound recordings, stored in files on
	  the disk (called <emphasis>soundfiles</emphasis>), are now available.
	  Through the <productname>SndKit</productname>, you can access these
	  files and incorporate the sounds into your application.  It's also
	  straightforward to record new sounds into a computer.  With a single
	  message to the <productname>SndKit</productname>'s
	  <classname>Snd</classname> object, you can record your own sound
	  through a microphone.  Sound playback is just as simple: Another
	  message and the sound is played to the stereo output jacks on your
	  computer or sound-card.</para>

	<para>When you record a sound using the <classname>Snd</classname>
	  object, a series of audio &ldquo;snapshots&rdquo; or
	  <emphasis>samples</emphasis> is created.  By storing sound as samples,
	  you can analyze and manipulate your sound data with an almost
	  unlimited degree of precision.  The <classname>SndView</classname>
	  class lets you see your sounds by displaying the samples in a
	  window.</para>

	<para>While the <productname>SndKit</productname> is designed
	  primarily for use on sampled data, you can also use it to send
	  instructions to the <acronym>DSP</acronym>.  The speed of the
	  <acronym>DSP</acronym> makes it an ideal sound synthesizer and, in
	  general, <acronym>DSP</acronym> instructions take up much less space
	  than sampled data.  The <classname>Snd</classname> object manages
	  the details of playing sounds for you, so you needn't be aware of
	  whether a particular <classname>Snd</classname> contains samples or
	  <acronym>DSP</acronym> instructions.</para>
      </sect2>

      <sect2 id="TheMusicKit">
	<title>The <productname>MusicKit</productname></title>

	<para>The <productname>MusicKit</productname> provides a number of
	  ways to compose and perform music.  By attaching an external
	  synthesizer keyboard to a serial port, you can play a computer as
	  a musical instrument.  Alternatively, you can compose music to be
	  played by the computer by creating music data in a text editor or by
	  creating an algorithm that generates it automatically.  These
	  approaches can be combined in performance.  For instance, a musician
	  can use an external keyboard to trigger precomposed events, allowing
	  the computer to create sounds and gestures that are impossible on a
	  traditional instrument, but at moments specified by the
	  performer.</para>

	<para>The <productname>MusicKit</productname> helps you construct
	  applications that create, organize, process, and render music data.
	  The Objective-C language classes provided by the Kit fall into three
	  categories:</para>

	<orderedlist>
	  <listitem><para>Data representation</para>
	  </listitem>

	  <listitem><para>Synthesis</para>
	  </listitem>

	  <listitem><para>Performance</para>
	  </listitem>
	</orderedlist>

	<sect3 id="DataRepresentation">
	  <title>Data Representation</title>

	  <para>The data representation classes, illustrated in <xref linkend="Figure1-2">, are
	    used to encapsulate and organize music data.</para>

	  <figure id="Figure1-2">
	    <title>Music Data Representation Classes</title>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="Images/SystemOverview0.eps">
	      </imageobject>
	      <imageobject>
		<imagedata fileref="Images/SystemOverview0.gif">
	      </imageobject>
	      <textobject><phrase>MusicKit Image</phrase></textobject>
	    </mediaobject>
	  </figure>

	  <para><classname>MKNote</classname>s, <classname>MKPart</classname>s,
	    and <classname>MKScore</classname>s form the core of music
	    representation.  Of paramount importance is the
	    <classname>MKNote</classname> class: A <classname>MKNote</classname>
	    object represents a musical note as a list of attributes, such as
	    frequency, amplitude, and duration.  Music applications use
	    <classname>MKNote</classname> objects as a common currency: They're
	    the basic package of musical information upon which the other objects
	    act.  <classname>MKPart</classname> and <classname>MKScore</classname>
	    objects, as their names suggest, provide a means for organizing
	    <classname>MKNote</classname> objects.  The other data classes,
	    <classname>MKEnvelope</classname>, <classname>MKWaveTable</classname>
	    (and its progeny), and <classname>MKTuningSystem</classname>, are
	    designed to help define <classname>MKNote</classname> object
	    attributes:</para>

	  <itemizedlist>
	    <listitem><para><classname>MKEnvelope</classname>s represent
		time-varying functions that can be used to continuously control the
		values of a <classname>MKNote</classname>'s attributes (such as its
		amplitude and frequency).</para>
	    </listitem>

	    <listitem><para> A <classname>MKWaveTable</classname> contains timbral
		information that's used during music synthesis on the
		<acronym>DSP</acronym>.</para>
	    </listitem>

	    <listitem><para> A <classname>MKTuningSystem</classname> is a mapping
		of pitch names to specific frequencies, allowing an easy
		representation of alternate tunings.</para>
	    </listitem>
	  </itemizedlist>

	  <para>The <productname>MusicKit</productname> defines an
	    <acronym>ASCII</acronym> file format called
	    <emphasis>scorefile</emphasis> that represents the music data objects
	    as editable text in files on a disk.  A few C-like programming
	    constructs, such as variables and arithmetic operators, can be used in
	    a scorefile to help create and fine-tune music data.  You can also
	    store music data as a Standard <acronym>MIDI</acronym> File.</para>

	</sect3>
	<sect3 id="SynthesisOverview">
	  <title>Synthesis</title>

	  <para>Synthesizing music is potentially the most technically involved
	    of the three <productname>MusicKit</productname> areas.  At the
	    easiest level, you can use and manipulate the software instruments,
	    called <classname>MKSynthPatch</classname>es, that are provided by the
	    <productname>MusicKit</productname>.  A
	    <classname>MKSynthPatch</classname> subclass corresponds, roughly, to
	    a voice preset on a <acronym>MIDI</acronym> synthesizer.  However, the
	    <productname>MusicKit</productname>
	    <classname>MKSynthPatch</classname>es are generally less confined than
	    most <acronym>MIDI</acronym> presets: An enormously wide variety of
	    sounds can be produced by the <classname>MKSynthPatch</classname>es
	    supplied by the <productname>MusicKit</productname> simply by varying
	    the attributes of the <classname>MKNote</classname>s that they
	    receive.</para>

	  <para>At a lower lever, you can design your own
	    <classname>MKSynthPatch</classname> subclasses by interconnecting
	    <acronym>DSP</acronym> synthesis modules that the
	    <productname>MusicKit</productname> provides as objects called
	    <classname>MKUnitGenerator</classname>s.  Finally, at the lowest
	    level, you can design <classname>MKUnitGenerator</classname>s yourself
	    by writing <hardware>MC56000</hardware> assembly language macros and
	    using the <command>dspwrap</command> tool to turn the macros into
	    subclasses of <classname>MKUnitGenerator</classname>.  This last level
	    falls below the boundary of the <productname>MusicKit</productname>
	    and is described in <ulink url="ProgrammingTheDSP">Programming the
	      <acronym>DSP</acronym></ulink>. The principal
	    <productname>MusicKit</productname> synthesis classes are shown in
	    <xref linkend="Figure1-3">.</para>

	  <figure id="Figure1-3">
	    <title>Synthesis Classes</title>
	    <mediaobject>
	      <imageobject><imagedata fileref="Images/MusicSynthesis.eps"></imageobject>
	      <imageobject><imagedata fileref="Images/MusicSynthesis.gif"></imageobject>
	      <textobject><phrase>MusicKit Image</phrase></textobject>
	    </mediaobject>
	  </figure>

	  <para>The <classname>MKSynthInstrument</classname> class isn't
	    strictly part of the synthesis machinery.  However, it provides an
	    easy way to allocate and control <classname>MKSynthPatch</classname>
	    objects.</para>

	  <para>An additional class, not shown in the illustration above, is
	    <classname>MKOrchestra</classname>.  An
	    <classname>MKOrchestra</classname> represents an entire
	    <acronym>DSP</acronym>; the standard configuration includes a single
	    <acronym>DSP</acronym>, thus most applications will create but a
	    single <classname>MKOrchestra</classname> object.  It's through an
	    <classname>MKOrchestra</classname> that all synthesis resources, such
	    as <classname>MKUnitGenerator</classname>s and
	    <classname>MKSynthPatch</classname>es, are allocated.</para>

	</sect3>
	<sect3 id="Performance">
	  <title>Performance</title>

	  <para>During a <productname>MusicKit</productname> performance,
	    <classname>MKNote</classname> objects are acquired, scheduled, and
	    rendered (or <emphasis>realized</emphasis>).  These functions are
	    embodied by objects of the <classname>MKPerformer</classname>,
	    <classname>MKConductor</classname>, and
	    <classname>MKInstrument</classname> classes:</para>

	  <itemizedlist>
	    <listitem><para><classname>MKPerformer</classname> objects acquire
		<classname>MKNote</classname>s.</para>
	    </listitem>

	    <listitem><para>Through messages scheduled with a
		<classname>MKConductor</classname> object, a
		<classname>MKPerformer</classname> forwards each
		<classname>MKNote</classname> it acquires to one or more
		<classname>MKInstrument</classname>s.  The
		<classname>MKConductor</classname> thus controls the tempo of the
		performance.</para>
	    </listitem>

	    <listitem><para>An <classname>MKInstrument</classname> receives
		<classname>MKNote</classname>s that are sent to it by a
		<classname>MKPerformer</classname> and realizes them in some manner,
		typically by synthesizing them on the <acronym>DSP</acronym> or by
		sending them to an external <acronym>MIDI</acronym> instrument.  Other
		types of realization include writing <classname>MKNote</classname>s to
		a scorefile or adding them to a <classname>MKPart</classname>.</para>
	    </listitem>
	  </itemizedlist>

	  <para><classname>MKPerformer</classname> and
	    <classname>MKInstrument</classname> are abstract classes; each
	    subclass specifies a particular means of <classname>MKNote</classname>
	    acquisition or realization.  The <productname>MusicKit</productname>
	    provides a number of <classname>MKPerformer</classname> and
	    <classname>MKInstrument</classname> subclasses.
	  </para>

	  <para><xref linkend="Figure1-4"> shows the primary classes that are used to design a
	    <productname>MusicKit</productname> performance.</para>

	  <figure id="Figure1-4">
	    <title>Performance Classes</title>
	    <mediaobject>
	      <imageobject><imagedata fileref="Images/MusicPerformance.eps"></imageobject>
	      <imageobject><imagedata fileref="Images/MusicPerformance.gif"></imageobject>
	      <textobject><phrase>MusicKit Image</phrase></textobject>
	    </mediaobject>
	  </figure>

	  <para>In addition to the <classname>MKPerformer</classname>,
	    <classname>MKConductor</classname>, and
	    <classname>MKInstrument</classname> classes described above, five
	    other classes are included in <xref linkend="Figure1-4">:
	    <classname>MKNoteSender</classname>,
	    <classname>MKNoteReceiver</classname>,
	    <classname>MKNoteFilter</classname>,
	    <classname>MKSynthInstrument</classname>, and
	    <classname>MKMidi</classname>.
	  </para>

	  <itemizedlist>
	    <listitem><para><classname>MKNoteSender</classname> and
		<classname>MKNoteReceiver</classname> objects are part of the
		implementation of <classname>MKPerformer</classname> and
		<classname>MKInstrument</classname>: They're the ports through which
		<classname>MKNote</classname>s are sent by
		<classname>MKPerformer</classname>s and received by
		<classname>MKInstrument</classname>s.
	      </para>
	    </listitem>

	    <listitem><para>A <classname>MKNoteFilter</classname> is a
		<classname>MKPerformer</classname>/<classname>MKInstrument</classname>
		hybrid; while it inherits from <classname>MKInstrument</classname>, it
		also implements <classname>MKPerformer</classname> protocol.  Thus, it
		can receive <classname>MKNote</classname>s like an
		<classname>MKInstrument</classname> and then send them on to other
		<classname>MKInstrument</classname>s, like a
		<classname>MKPerformer</classname>.
		<classname>MKNoteFilter</classname>s are interposed between
		<classname>MKPerformer</classname>s and
		<classname>MKInstrument</classname>s and act as
		<classname>MKNote</classname>-processing modules.</para>
	    </listitem>

	    <listitem><para><classname>MKSynthInstrument</classname> is a subclass
		of <classname>MKInstrument</classname> that causes
		<classname>MKNote</classname>s to be realized on the
		<acronym>DSP</acronym>.</para>
	    </listitem>

	    <listitem><para>A <classname>MKMidi</classname> object represents an
		external <acronym>MIDI</acronym> synthesizer that's attached to a
		computer through one of the serial ports.  It can receive as well as
		send <acronym>MIDI</acronym> signals from and to the synthesizer it
		represents.  While it inherits neither from
		<classname>MKPerformer</classname> nor
		<classname>MKInstrument</classname>, it implements their protocols and
		contains <classname>MKNoteSender</classname>s and
		<classname>MKNoteReceiver</classname>s.</para>
	    </listitem>
	  </itemizedlist>

	  <para>A number of other <classname>MKPerformer</classname> and
	    <classname>MKInstrument</classname> subclasses are provided by the
	    <productname>MusicKit</productname>.  During a
	    <productname>MusicKit</productname> performance, performance objects
	    can be dynamically connected and reconnected.  This allows you to mix
	    and match <classname>MKNote</classname> sources with any means of
	    realization.  For example, the <acronym>MIDI</acronym> signals sent
	    from an external <acronym>MIDI</acronym> synthesizer are automatically
	    converted to <classname>MKNote</classname> objects by a
	    <classname>MKMidi</classname> object.  The
	    <classname>MKNote</classname>s can then be sent to a
	    <classname>MKSynthInstrument</classname> for realization on the
	    <acronym>DSP</acronym>, or written to a scorefile by a
	    <classname>MKScorefileWriter</classname>
	    <classname>MKInstrument</classname>.</para>
	</sect3>
      </sect2>
      <sect2 id="ComponentsOfSoundAndMusic">
	<title>Components of Sound and Music</title>

	<para><xref linkend="Figure1-5"> shows the components for creating,
	  playing, and storing music and sound with the hardware and software of
	  a typical (circa 2001) computer.</para>

	<figure id="Figure1-5">
	  <title>Music and Sound Components</title>
	  <mediaobject>
	    <imageobject><imagedata fileref="Images/SystemOverview1.eps"></imageobject>
	    <imageobject><imagedata fileref="Images/SystemOverview1.gif"></imageobject>
	    <textobject><phrase>MusicKit Image</phrase></textobject>
	  </mediaobject>
	</figure>
      </sect2>
    </sect1>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: "MusicKitConcepts.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
