{\rtf0\ansi{\fonttbl\f0\fswiss Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw16320\paperh8400
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 DSP PROTOCOLS\
\
\
There are various "protocol bits" which get or'd into the in which is\
passed to snddriver_dsp_protocol().  If the int is zero, we have the\
simplest protocol which is easiest to document.  In that mode, the driver\
is in "transparent mode".  It does not do any favors or assume the DSP\
obeys any special protocol.  In this mode the DSP cannot interrupt the\
host.  Also, DMA cannot be used.\
\
[Note: On Intel computers, snddriver_dsp_prototol() is not supported.\
However, the protocol itself is largely supported.]\
\
Implications of DSPMSG mode (set the SNDDRIVER_DSP_PROTOCOL_DSPMSG bit in the\
  Length 512 DSP message buffer allocated in kernel for "DSP messages". \
\
[Note: On Intel computers, there is no buffer.  Messages are returned immediately.]\
\
  RREQ turned on in the DSP host interface.  When the DSP writes a\
	word to the host interface, (i.e., whenever RXDF comes on), the '030\
	is interrupted, and the driver will read the word from the DSP.  \
	The word is compared to a list of intercepted DSP messages, and if\
	recognized, the command is performed.  Anything not recognized goes\
	into the 512-word buffer which is sent to the user\
	after the user has called snddriver_dsp_req_msg().\
  The DSP_dm_TMQ_LWM "DSP message" ("TMQ low-water-mark") is recognized\
	in DSPMSG mode.\
	This allows the DSP to wake up the driver. The message is eaten\
	by the driver having done its work just waking it up.  TMQ stands\
	for Timed Message Queue, but it can be used for any wake-up purpose.\
\
In general, a "DSP Message" is a 24-bit word from the DSP.  The high-order \
byte is an opcode, and there are two data bytes (or one 16-bit datum).\
\
Implications of DSPERR mode (set the SNDDRIVER_DSP_PROTOCOL_DSPERR bit in the\
	int passed to snddriver_dsp_protocol()):\
  Length 512 error buffer allocated.  High-order bit on in DSP message => error\
\
[Note: On Intel computers, there is no buffer.  Errors are returned immediately.]\
\
  Like DSPMSG mode except a separate buffer is used, and only words from the\
	DSP with the high-order bit on get into the error buffer.\
\
Implications of COMPLEX DMA mode\
  Length 512 DSP message buffer allocated as in DSPMSG mode.\
  DSP_dm_R_REQ message intercepted from DSP. For DSP-initiated DMA read.\
	The datum contains the DMA channel number. It must be > 0.\
  DSP_dm_W_REQ message intercepted from DSP. For DSP-initiated DMA write.\
	The datum contains the DMA channel number. It must be > 0.\
  Anything not intercepted -> user.\
  ---\
  The DSP must recognize the "SYSCALL"  host command for DMA initiation.\
\
Constraints on DMA\
  Multiple of 16 bytes\
  Cannot cross a page\
  Must start on a multiple of the DMA transfer size (why?)\
\
Host flags message\
  Can only set HF0,HF1 with this message.\
\
Use of HF1 in the driver (snd_dspdev.c)\
  Set during DMA read or DMA write\
  Set during polled array read\
  You don't actually need this, (as far as I can tell), \
	and I would like to take it out of the driver,\
	but dsp_example_3.asm waits for it to go high AND low.\
	So, I think we're stuck with it forever.\
  *** MAKE THIS ONLY HAPPEN IN CDMA MODE ***\
\
Use of RREQ in the driver\
  Set in DSPMSG mode, DSPERR mode, and C_DMA mode.\
  Cleared during DMA or polled data i/o and restored afterwards.\
  Cleared if the msg buffer fills up.\
  Cleared if DSPERR mode enabled and the error buffer fills up.\
  Set if the "condition" at front of DSP command Q is "awaitRXDF".\
\
Use of TREQ in the driver\
  Set if the "condition" at front of DSP command Q is "awaitTXDE".\
  Set by driver to force control into DSP command loop handler.\
\
\
\
DSP DMA OVERVIEW\
\
	There are two types of DSP DMA transfer: "user-initiated" and "DSP-initiated".\
	There are two DMA directions: "read" and "write", with "write" being to the DSP.\
	Thus, there are four cases total.\
\
User-initiated reads and writes transfer a SINGLE array between DSP memory (SRAM) and host memory (DRAM).\
\
DSP-initiated reads and writes support STREAM i/o through the DSP.  Each DMA request by the DSP will transfer one fixed-length "buffer" array between DSP memory (SRAM) and host memory (DRAM). The DMA requests come from the DSP as needed.  In many cases, such as when doing sampling rate conversion or reading the DSP serial port, it is difficult to predict the order of the read and write requests, and the DMA requests are best regarded as asynchronous.\
\
DMA transfers must be a multiple of 16 bytes long, and they cannot cross a memory page boundary.  The current page size is 8192 bytes.\
\
There is no address or size constraint for a DMA buffer within the DSP.  Thus, DMA transfers of any length and alignment may be simulated using programmed i/o.  In fact, a convenient technique to support arbitrary sizes and alignments is to use programmed i/o for the first part which is nonaligned, a DMA transfer for the middle part (a multiple of 16 bytes within a page), and programmed i/o for the remainder.  As far as the DSP need be concerned, there is only one transfer.\
\
[Note: On Intel computers, DSP DMA mode is not actually used.  The data is pulled by the host \
in programmed IO mode.  But the other aspects of the protocol are the same as on NeXT hardware.]\
\
There are four data modes for DMA transfers to or from the DSP: 8-bit, 16-bit, 24-bit, or 32-bit (24-bits right-or-left-justified in 32).  The 8-bit mode involves 8-bit data right-justified in the DSP words, but contiguous in host memory.  The 16-bit mode similarly is right-justified in 24 on the DSP and contiguous in host memory.\
\
There are three host commands defined for DSP DMA transfers (the actual definitions are in /usr/include/nextdev/snd_dsp.h):\
\
	DSP_hc_SYSCALL  - Initiate a DMA read or write with the DSP.\
	DSP_hc_HOST_RD	- Read done.  Terminates a DMA read in the DSP.\
	DSP_hc_HOST_WD	- Write done.  Terminates a DMA write in the DSP.\
\
The SYSCALL is used to initiate a DMA read or write.  Immediately after the host-command is issued, a 24-bit\
word is written to the DSP containing the following bits:\
\
#define DSP_SYSCALL_READ	(0x1<<16)\
#define DSP_SYSCALL_WRITE	(0x2<<16)\
#define DSP_SYSCALL_m_CHANMASK	0x1f		/* 5 bits of channel info */\
#define DSP_SYSCALL_m_SWFIX	0x8000		/* DMA write fix for chip <= 313 */\
\
A "read" goes from the DSP to the host.  A user-initiated DMA will always specify channel 0 since that's\
the user channel.  However, if a DSP-initiated write comes in on channel n, the channel number of the\
SYSCALL preceding the DMA in response will contain that channel number to identify it.\
\
The SWFIX bit is set on computers using version 313 or earlier of the DMA chip.  It is to enable\
software workarounds for bugs in hardware.  The bit can be ignored for 8-bit and 16-bit mode DMA.\
32-bit mode is broken and plain won't work when this bit is set, and 24-bit mode may work, but we're\
not yet sure it's reliable or fully supported in the driver.\
\
There are two "DSP Messages" defined to support DSP-initiated DMA transfers\
(also defined in <nextdev/snd_dsp.h):\
\
	DSP_dm_W_REQ	- DSP-initiated write request (for transfer from host to DSP)\
	DSP_dm_R_REQ	- DSP-initiated read request (for transfer from DSP to host)\
\
A "DSP Message" is a SINGLE 24-bit word.  The most significant byte is the opcode, and the lower 16 bits contain data.  For these two DSP message types, the data bits contain the "channel number" of the DMA transfer.  Thus, the host can specify a completely general read or write within the DSP while the DSP can only specify a channel number.  Attributes such as buffer size, mode, and so on, must be associated with the channel number.  The one instance in which the host refers to a transfer by channel number is when satisfying a DSP-initiated write request.\
\
DSP DMA Protocol, Blow by Blow\
\
User Initiated\
	snddriver_dsp_dma_\{read,write\}(...)\
	User tells the DSP the address, space, and skip factor PRIVATELY (i.e. snddriver_dsp_dma* do NOT)\
	Write transaction (what happens in driver):\
		SYSCALL(write,chan=0)\
		Init DSP host interface\
		Set HF1\
		<do DMA>\
		DSP_hc_HOST_WD\
	Read transaction (what happens in driver):\
		SYSCALL(read,chan=0)\
		Dismiss. A DSP-initiated read wakes it up later.\
		Init DSP host interface\
		Set HF1\
		<do DMA>\
		DSP_hc_HOST_RD\
		\
DSP Initiated (DI) DMA transfers\
	snddriver_stream_start_\{reading,writing\}(...)\
	User tells the DSP the address, space, and skip factor of each DMA channel PRIVATELY IN ADVANCE.\
		DSP must know space, address, and skip factor from channel number (or "stream number").\
		Driver uses this same stream number to keep things sorted out on its end.\
	Write transaction\
		DSP_dm_W_REQ(stream), stream = 2 (sound-in) or 3,...,18 for other data channels\
		Driver enqueues UI Write in its own message queue (SYSCALL, DSP_hc_HOST_WD, etc.)\
	Read transaction\
		DSP_dm_R_REQ(stream), stream = 1 (sound-out) or 3,...,18 for other data channels\
		Read occurs like UIRead into region corresponding to channel\
	A stream number used for reading cannot also be used for writing.\
		That is, each stream can go either direction, but only one direction at a time.\
}
