<!-- $Id$ -->

  <chapter id="Example2">
    <title>Example-2 &horbar; Programming the <productname>MusicKit</productname></title>

    <sect1 id="overview">
    <para>
In this excercise, you will write a simple application, based on
<command>example1</command>.  The application will play a
<classname>MKNote</classname> when the user pushes a button.  There
will also be a slider that changes the frequency of the
<classname>MKNote</classname>.
</para>


<para>There are 7 main steps:</para>

    <orderedlist>
      <listitem>
<para>CREATING A GRAPHIC INTERFACE</para>
      </listitem>
      <listitem>
<para>CREATING AN OBJECT THAT RESPONDS TO THE INTERFACE</para>
      </listitem>
      <listitem>

<para>CONNECTING THE INTERFACE TO YOUR OBJECT</para>
      </listitem>
      <listitem>

<para>SAVING THE PROJECT</para>
      </listitem>
      <listitem>

<para>ADDING THE CODE TO THE CUSTOM OBJECT</para>
      </listitem>
      <listitem>

<para>COMPILING THE APPLICATION</para>
      </listitem>
      <listitem>

<para>RUNNING THE APPLICATION</para>
      </listitem>
    </orderedlist>
    </sect1>

    <sect1 id="CreatingAGraphicInterface">
      <title>CREATING A GRAPHIC INTERFACE</title>

      <orderedlist>
	<listitem>
	  <para>
First create a new directory where you will put your
	    project. Then launch <APPLICATION>Interface Builder</APPLICATION>. (It's on /NextApps). 
</para>
	</listitem>
	<listitem>
	  <para>
Click <emphasis role="bold">New Application</emphasis> on the
<emphasis role="bold">File</emphasis> sub-menu. This gives you a new
window called <emphasis>My Window</emphasis>.
</para>
	</listitem>
	<listitem>
	  <para>
Click on <emphasis role="bold">Save As...</emphasis> under
the<emphasis role="bold"> File</emphasis> sub-menu. This will bring up
an <emphasis>Open panel</emphasis>.  Give the project a name. Let's
call it <emphasis>Example2</emphasis>. . Click on the <emphasis
role="bold">Project...</emphasis> menu item under the <emphasis
role="bold">File </emphasis>sub-menu.  This brings up the <emphasis
role="bold">Inspector </emphasis>window.  Go to the <emphasis
role="bold">Inspector </emphasis>window, which is now asking you if
you want to create a new project, and click "OK" to create the
project.
</para>
	</listitem>
	<listitem>
	  <para>
From the <emphasis role="bold">Palettes</emphasis> window,
drag a <emphasis>button</emphasis> into <emphasis role="bold">My
Window</emphasis>.  Click twice on the button name to edit it.  Change
its name to <emphasis>play</emphasis>.  Then click somewhere else in
the window to get out of the edit mode.
</para>
	</listitem>
	<listitem>
	  <para>
From the <emphasis role="bold">Palettes</emphasis> window,
drag a <emphasis>slider</emphasis> into <emphasis role="bold">My
Window</emphasis>.
</para>
	</listitem>
	<listitem>
	  <para>
From the <emphasis role="bold">Palettes</emphasis> window, drag a
piece of text into <emphasis role="bold">My Window</emphasis> (it
appears in the palette as <emphasis role="bold">Title</emphasis>).
Put it under the slider and double click on it to edit the text.
Change it to "Frequency".  Then click somewhere else in the window to
get out of the edit mode.
</para>
	</listitem>
	<listitem>
<para>Resize <emphasis role="bold">My Window</emphasis> to be the
size you want.  To do this, click on the lower corner of the window
and drag.</para>
	</listitem>
	<listitem>
<para>To change the name of the window from <emphasis
role="bold">My Window</emphasis> to something else, go to the
<emphasis role="bold">Inspector</emphasis> window again.  Select
<emphasis role="bold">Attributes </emphasis>from the pop-up menu in
that window..  Edit the text <emphasis>My Window</emphasis> to be
<emphasis>Example2</emphasis>, then type the Return key. Notice that
the name of the window has changed. </para>
	</listitem>

<para>CREATING AN OBJECT THAT RESPONDS TO THE INTERFACE</para>

      <listitem>
	<para>Go to the bottom left of the screen.  There is a window that
has the file path you just specified.  This is the <emphasis>project
window</emphasis>.  Click on that window. Find the icon <emphasis
role="bold">.h</emphasis> called <emphasis
role="bold">Classes</emphasis> and double-click on it.</para>
	</listitem>
      <listitem>
	<para>
This brings up a new window called <emphasis
role="bold">Classes in Example2</emphasis> with a Browser in it.
Using the left-arrow at the left side of the window, find the class
called <emphasis role="bold">Object</emphasis>. Click once on that
class so that it is the only class highlighted in that window. On the
<emphasis role="bold">Operations</emphasis> pull-down menu, click
<emphasis role="bold">Subclass</emphasis>.  Note that Subclass1
appears below the well now. Edit this text to be
<emphasis>NotePlayer</emphasis>. You have just created a
<emphasis>custom object</emphasis>, a subclass of the <emphasis
role="bold">Object</emphasis> class. Now, on the <emphasis
role="bold">Operations</emphasis> pull-down menu, click <emphasis
role="bold">Instantiate</emphasis>.  You have now created an instance
of your class.  Note that your object appears as a sphere in the
project window (the window in the lower left hand corner of the
screen).  Click once on the sphere to select it. Then click on the
<emphasis role="bold">Inspector </emphasis>window and use the pop-up
menu to select <emphasis role="bold">Class</emphasis>.  This makes the
<emphasis role="bold">Inspector</emphasis> window display information
about the class <emphasis>NotePlayer</emphasis>.</para>
	</listitem>
	
	<listitem>
	  <para>Click in the text field and type the following: </para>


<para><emphasis>myNote</emphasis>	</para>

<para><emphasis>mySynthPatch</emphasis></para>

<para>Notice that the names appear in the "outlets" list.  What you
are doing here is declaring two instance variables of type <emphasis
role="bold">id</emphasis>.  </para>

<para>Then find the <emphasis role="bold">Outlet/Action</emphasis> button and click <emphasis role="bold">Action</emphasis>. Click in the text field and type the following.  Be sure to type the colon and a return at the end of each line.	</para>

	<PROGRAMLISTING>
	  play:
	  setFreqFrom:
	</PROGRAMLISTING>

<para>Notice that the names appear in the actions list. What are you
are doing here is "declaring" to <APPLICATION>Interface Builder</APPLICATION> the messages you
will be sending to your custom object. In <APPLICATION>Interface Builder</APPLICATION>, all
methods have one argument, the object that is sending the message.
(Note that this is not always true, in general, in
Objective-C.)</para>
	</listitem>
      <listitem>
	<para>
Go back to the "Classes" window and select "Unparse" from
the "Operations" pop-up menu.  It will ask if you want to create the
	  files <FILENAME>NotePlayer.m</FILENAME> and <FILENAME>NotePlayer.h</FILENAME>.  Click <emphasis
role="bold">YES</emphasis>. It will ask you if you want to add these
files to the project.  Click YES.
</para>
      </listitem>

<para>CONNECTING THE INTERFACE TO YOUR OBJECT</para>

      <listitem>
<para>Go back to the <emphasis role="bold">Example2</emphasis>
window and click on that window. Press the Control key on the keyboard
and, holding it down, click and hold the mouse button down, while
pointing to the <emphasis>play</emphasis> button..  Drag the mouse to
the <emphasis role="bold">NotePlayerInstance</emphasis> icon in the
project window.  When the line encircles the <emphasis
role="bold">NotePlayerInstance</emphasis>, release the mouse.
</para>
      </listitem>
	<listitem>
	<para>
Return to the <emphasis role="bold">Inspector</emphasis>
window.  It gives you a choice of what message to send your custom
object when the button is pushed.  Click on <emphasis
role="bold">play:</emphasis>. Then click <emphasis
role="bold">connect</emphasis> near the bottom of the window.
</para>
      </listitem>
      <listitem>
<para>14a. Repeat steps 13 and 14 to connect the
<emphasis>frequency</emphasis> slider to the <emphasis
role="bold">setFreqFrom:</emphasis> message.
</para>
      </listitem>
      <listitem>

	<para>
Double click on the slider.  Go to the <emphasis role="bold">Inspector
</emphasis>window and select <emphasis role="bold">Attributes
</emphasis>from the pop-up menu.  Change the minimum and maximum
values of the slider to be 220 and 660.  Change the current value of
the slider to be 440.</para>
	</listitem>

<para>SAVING THE PROJECT</para>

	<listitem>
	<para>
Then click <emphasis role="bold">Save</emphasis> under the 
<emphasis role="bold">File</emphasis> sub-menu to save the project.
</para>
      </listitem>
      <listitem>

	<para>ADDING THE OBJECTIVE-C CODE TO THE CUSTOM OBJECT</para>

	</listitem>
      <listitem>
	<para>
In the <emphasis role="bold">Classes</emphasis> window,
click twice on the <emphasis role="bold">.h</emphasis> icon.  This
	  launches <APPLICATION>Edit</APPLICATION> and brings up the file <FILENAME>NotePlayer.h</FILENAME>.  Notice that you
are now no longer talking to <APPLICATION>Interface Builder</APPLICATION>.  The active
	  application is now <APPLICATION>Edit</APPLICATION>, as you can see by the Menu's title in the
upper left hand corner of the screen.  Now, click on the <emphasis
role="bold">Open...</emphasis> menu item of the <emphasis
	    role="bold">Window...</emphasis> sub-menu of the <APPLICATION>Edit</APPLICATION> application.
This brings up an <emphasis role="bold">Open</emphasis> panel.  Select
	  <FILENAME>NotePlayer.m</FILENAME>. Notice that there is a
"stub" or "place-holder" method for each of the methods you
declared.</para>

	</listitem>
	<listitem>
<para>Replace the "stub" <emphasis role="bold">play:</emphasis>
method with the following code (the quickest way to do this is to open
up the tutorial and use cut/copy/paste; alternatively, you can type in
the code):
</para>

	<programlisting>
- play:sender
{
  [Conductor lockPerformance];
  [mySynthPatch noteOn:myNote];
  [Conductor unlockPerformance];
  return self;
}
	</programlisting>

    </sect1>

	</listitem>
	<listitem>
<para>20. Similaraly, replace the <emphasis role="bold">setFreqFrom:</emphasis> method as shown:</para>

      <programlisting>
- setFreqFrom:sender
{
  [Conductor lockPerformance];
  [myNote setPar:MK_freq toDouble:[sender doubleValue]];
  [mySynthPatch noteUpdate:myNote];
  [Conductor unlockPerformance];
  return self;
}
      </programlisting>

	</listitem>
	<listitem>
      <para>
Finally, you need to add the code to start up the
	performance and allocate the <CLASSNAME>Note</CLASSNAME> and the <CLASSNAME>SynthPatch</CLASSNAME>.  To do this, we
add two methods<emphasis>.  </emphasis>The first is called <emphasis
role="bold">+initialize</emphasis>.  It is a class method and is
automatically invoked when the first instance of your class is
created.  This method sets up the performance:
</para>

      <programlisting>
+ initialize
{
  [Conductor setFinIshwhenempty:NO];
  [Orchestra new];
  [Orchestra setSamplingRate:44100]; 
  [Orchestra setFastResponse:YES];
  [Orchestra run];
  [Conductor startPerformance];
  return self;
}
      </programlisting>

      <para>
The second method, <emphasis role="bold">init</emphasis>, is invoked
when a new object is instantiated:</para>

      <programlisting>
- init
{
   [super init];
   [Conductor lockPerformance];
   myNote = [[Note alloc] init];
   mySynthPatch = [Orchestra allocSynthPatch:[Pluck class]];
   [Conductor unlockPerformance];
   return self;
}
      </programlisting>

      <para>
You will also need to add three header file <emphasis
role="bold">#import</emphasis> statements. (<emphasis
role="bold">#import</emphasis> is like <emphasis role="bold">#include
</emphasis>in conventional C.)  Put them right after the <emphasis
role="bold">NotePlayer</emphasis> <emphasis
role="bold">#import</emphasis> statement. Note that you may not
indent<emphasis role="bold"> #import</emphasis> statements because
they are processed by the C pre-precessor. </para>

      <programlisting>
#import &lt;musickit/musickit.h&gt;
#import &lt;musickit/synthpatches/Pluck.h&gt;
#import &lt;appkit/appkit.h&gt;
      </programlisting>

      <para>
Save the file, using the <emphasis role="bold">Save</emphasis> menu
item of the <emphasis role="bold">Window</emphasis> menu.</para>

<para>COMPILING THE APPLICATION</para>

	</listitem>
    <listitem>
      <para>
	Return to <APPLICATION>Interface Builder</APPLICATION> by clicking on any of the <APPLICATION>Interface
Builder</APPLICATION> windows or the <APPLICATION>Interface Builder</APPLICATION> icon.</para>
    </listitem>
    <listitem>

      <para>
Before you compile the application, there's one more thing you need to
	do &#xB1; <APPLICATION>Interface Builder</APPLICATION> normally does not link against the <PRODUCTNAME>MusicKit</PRODUCTNAME> and <ACRONYM>DSP</ACRONYM> libraries.  To make sure it does, do the following:
</para>
    </listitem>
    <listitem>

      <para>
Click on the <emphasis role="bold">Inspector</emphasis> window
and select <emphasis role="bold">Project </emphasis>from the pop-up
menu.  Click on <emphasis role="bold">Other libs</emphasis>.  Then
click <emphasis role="bold">add </emphasis>at the bottom of the
window. This brings up an Open panel.  Type:</para>

<filename>/Library/Frameworks/MusicKit.framework</filename>

      <para>This adds the <PRODUCTNAME>MusicKit</PRODUCTNAME> to your library list.  You also need the
DSP library.  Click <emphasis role="bold">add </emphasis>again and
this time type: </para>

<para>/usr/lib/libdsp_s</para>

<para>Notice that libmusic and libdsp are both in your library list
now.  Unfortunately, they come out in alphabetical order, which is not
right in this case.  To put them in the correct order, hold down
CONTROL and click on libmusic_s.  Drag it to where libdsp_s is and
release the mouse button.  Notice that the two names have changed
places. </para>

	</listitem>
	<listitem>
<para>Under the <emphasis role="bold">File</emphasis> menu of
<APPLICATION>Interface Builder</APPLICATION>, click <emphasis role="bold">Make</emphasis>.  This
will launch a UNIX shell window to compile and link the
program.</para>
	</listitem>

<para>RUNNING THE APPLICATION</para>

	<listitem>
      <para>
	Double click on the <PRODUCTNAME>NeXT</PRODUCTNAME> cube in the dock to get back to the
Workspace.  Find the program you just created. It will be called
	<FILENAME>Example2.debug</FILENAME>.  Double click on it
to launch it and run it! See if it worked!</para>

<para>EXPANDING YOUR PROGRAM -- THE POWER OF OBJECT-ORIENTED PROGRAMMING</para>

    </listitem>
    <listitem>
      <para>
As an exercise, try adding another play button that plays a
second <classname>MKNote</classname>.  To do this, just instantiate
another <classname>MKNotePlayer</classname> instance and connect it up
as before.  You do not need to add <emphasis>any</emphasis> new code
to do this! </para>
    </listitem>

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:upper
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: "MusicKitTutorials.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
