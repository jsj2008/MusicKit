<!-- $Id$ -->

  <chapter id="class1">
    <TITLE>Class 1 &horbar; Object Oriented Programming in Objective-C</TITLE>
    <SECT1>
      <TITLE>Objective-C</TITLE>
  
      <PARA>
	Objective-C is a language that expands the C programming
	language by incorporating three object-oriented concepts:</PARA>
  
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>Encapsulation</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Messaging (with dynamic binding)</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Inheritance</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
  
      <PARA>These serve to maximize:	
      </PARA>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>Program modularity	
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Program clarity and readability	
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Program maintainability
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>  
    <SECT1 id="Encapsulation">
      <title>Encapsulation (motivation)</title>
    
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>Lets  you create complex data types.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Makes code easier to read.	</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Makes function calls simpler.  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    
      <PARA>C structures and typedefs already provide this
	functionality. Hypothetical example:
      </PARA>

<PROGRAMLISTING>
typedef struct {
	double freq;	
	int keyNum; 	
} Note;	
</PROGRAMLISTING>	
    
      <PARA>This struct <STRUCTNAME>Note</STRUCTNAME> is now a
	convenient package.  To create a new Note, you just call
	<FUNCTION>malloc</FUNCTION>.
      </PARA>
    <PROGRAMLISTING>
Note *myNote1;	
myNote1 = malloc(sizeof(Note));	
myNote1-&gt;freq = 440.0;
myNote1-&gt;keyNum = 69; 	
play(myNote1);	
    </PROGRAMLISTING>
    
    <PARA>But C structs only go half way.  Objective-C introduces
      the notion of a "Class" that encapsulates both the data
      <emphasis>and</emphasis> <emphasis>the functions that operate on
	them</emphasis>. This serves to protect the data and localize
      specialized knowledge of the data, making it harder to introduce
      bad bugs.
    </PARA>
  </SECT1>
  
  <SECT1 id="Messaging">
    <TITLE>Messaging (motivation)</TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM> 
	<PARA>
	  Problem: Different C structs may require different
	  functions to provide similar behavior. Hypothetical example: 
	</PARA>
	
	<PROGRAMLISTING>
typedef struct {
	    int keyNumber; 	
} MIDINote;	
	  
typedef struct {
	  double freq; 	
} DSPNote;	
	  
MIDINote *aMidiNote;	
DSPNote *aDSPNote;	

/* ... (create and fill in fields of structs) */ 	
playMIDI(aMidiNote);	
playDSP(aDSPNote);
	</PROGRAMLISTING>
      </LISTITEM>
      <LISTITEM>
	<PARA>We'd prefer a similar behavior to be represented by a single
	"message".  Hypothetical example:
	</PARA>
	
	<PROGRAMLISTING>
play(aMidiNote);
play(aDSPNote);
	</PROGRAMLISTING>
	
	<PARA>But this requires the writer of <emphasis
	role="bold">play</emphasis> to know every possible kind of Note it
	would be passed.  This violates the principle of programming
	modularity.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>Objective-C lets each Class define its own <emphasis
	role="bold">play</emphasis> "method".  The Objective-C run-time system
	then invokes the correct <emphasis role="bold">play</emphasis> method.
	This process is called "messaging".
	</PARA>
      </LISTITEM>
    </ITEMIZEDLIST>
    
  </SECT1>
  
  <SECT1 id="BasicObjective-CTerminology">
    <TITLE>Basic Objective-C Terminology</TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM>
	<PARA><emphasis role="bold">Class</emphasis> - analogous to the
	<emphasis role="bold">typedef</emphasis> above; defines a complex data
	type and functions to operate on that data.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><emphasis role="bold">Instance of a class</emphasis> - analogous
	to the pointer to the <FUNCTION>malloc</FUNCTION>ed memory above; each
	instance of a class has its own memory.  In this memory, the instance
	stores the values of its "instance variables".
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><emphasis role="bold">Instance variables</emphasis> - analogous
	to the fields of the <emphasis role="bold">struct</emphasis>.  The
	memory allocated for each instance is used to store that instance's
	variables.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><emphasis role="bold">method</emphasis> - A "method" is a
	function associated with a class.  A class may have any number of
	methods.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><emphasis role="bold">message</emphasis> - A "message" is how a
	method is invoked.  In C, you invoke a function by using its name
	followed by parens.  In Objective-C, you invoke a method by sending a
	message to an instance, using the following syntax:
	</PARA>
	
	<PROGRAMLISTING>
	[myInstance aMessage];
or      [myInstance aMessageWithArg:arg];
or      [myInstance aMessageWithArg:arg otherArg:arg2];
	</PROGRAMLISTING>
	
	<PARA>This causes the Objective-C run-time system to look at the class
	    of myInstance, find the correct method for the given message, and
	    invoke that method.
	</PARA>
      </LISTITEM>
    </ITEMIZEDLIST>
    
  </SECT1>
  
  <SECT1 id="Inheritance">
    <TITLE>Inheritance</TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM>
	<PARA>Allows a Class to be "specialized" into different versions.
	  E.g.: <CLASSNAME>MKPerformer</CLASSNAME> is specialized to
	  <CLASSNAME>MKPartPerformer</CLASSNAME> and
	  <CLASSNAME>MKScorefilePerformer</CLASSNAME> in the
	  <PRODUCTNAME>MusicKit</PRODUCTNAME>.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>A specialized class ("subclass") need only implement that part
	    of its behavior that is different from its parent class
	    ("superclass").
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>A subclass may define instance variables.  Each instance of the
	    subclass gets the instance variables defined in both the
	    superclass and the subclass.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>Subclassing may be applied recursively, forming trees of
	    inheritance.  All classes inherit from
	    <CLASSNAME>NSObject</CLASSNAME>.  Therefore, instances of a class
	    are sometimes called "objects".
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>Inheritance can get confusing.  For this reason, the
	    <productname>MusicKit</productname> uses it sparingly.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>If both the subclass and the superclass implement the same
	    method, the subclass version takes precedence.  However, the
	    subclass can invoke the superclass version of a method as part of
	    its own implementation of that method by sending the message to
	    the special identifier <emphasis role="bold">super</emphasis>.
	</PARA>
      </LISTITEM>
    </ITEMIZEDLIST>
    
    <FIGURE id="figure1-1">
      <TITLE>Example of MusicKit Inheritance</TITLE>
      <MEDIAOBJECT>
	<IMAGEOBJECT>
<!--	  <IMAGEDATA FILEREF="Images/MusicKitClass1-Inheritance.pdf" 
		     FORMAT="pdf" SCALE=50>
-->
	  <IMAGEDATA FILEREF="Images/MusicKitClass1-Inheritance.eps" 
		     FORMAT="eps" SCALE=50>
	</IMAGEOBJECT>
	<IMAGEOBJECT>
	  <IMAGEDATA FILEREF="Images/MusicKitClass1-Inheritance.gif" 
		     FORMAT="gif">
	</IMAGEOBJECT>
      </MEDIAOBJECT>
    </FIGURE>
    
  </SECT1>
  
  <SECT1 id="VariousDetails">
    <TITLE>Various Details</TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM>
	  <PARA>To create an instance, you need to send a message directly to
	    a class.  This invokes a "class method", which is different from
	    an instance method in that it may be sent only to a class.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA> To make it possible to send such a message, the Objective-C
	    compiler creates a special "class object".
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA> You send <emphasis role="bold">alloc</emphasis> followed by
	  <emphasis role="bold">init</emphasis> (for reasons that will not
	  be covered here.)
	</PARA>
<PROGRAMLISTING>
MKNote *aNote;	
	  
aNote = [MKNote alloc];
[aNote init];
</PROGRAMLISTING>
      </LISTITEM>
      <LISTITEM>
	<PARA>An object-valued variable (such as "aNote" above) need not have
	    a type.  To define an untyped object-valued variable, use the
	    special type <emphasis role="bold">id</emphasis>.  Example:
	    <emphasis role="bold">id</emphasis> aNote;
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><emphasis role="bold">self</emphasis>, when used in a method
	    definition, refers to the object that's receiving the message.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>Sometimes "class-wide" behavior is implemented by class methods.
	    For example:</PARA>
	
	<PROGRAMLISTING>
[MKConductor startPerformance]. 
	</PROGRAMLISTING>
      </LISTITEM>
    </ITEMIZEDLIST>
    
  </SECT1>
  
  <SECT1 id="ExampleUsingObjective-CClasses">
    <TITLE>Example &horbar; Using Objective-C Classes </TITLE>
    
    <PROGRAMLISTING>
#include &lt;MusicKit/MusicKit.h&gt;
      
main()
{	
      MKNote *aNote;	
      MKPart *aPart;	
      MKScore *aScore;	
      aScore = [MKScore score];     /* In 2.0, use alloc/init */	
      aPart = [MKPart new];	
      aNote = [MKNote new];	
      [aNote setPar: MK_freq toDouble: 440.0];	
      [aNote setTimeTag: 1.0];      /* Play after 1 beat */	
      [aNote setDur: 1.0];          /* Duration is 1 beat */	
      [aScore addPart: aPart];	
      [aPart addNote: aNote];	

      /* "info" code may be added here - see below */	
      [aScore writeScorefile: @"test.score"];
}
    </PROGRAMLISTING>    
    
      <PARA>This example writes the file "test.score".  However, if you want
	to play that file with the <APPLICATION>ScorePlayer</APPLICATION>
	application, you need to specify which
	<CLASSNAME>MKSynthPatch</CLASSNAME> (<ACRONYM>DSP</ACRONYM> instrument)
	to use.  We do this by adding a special <CLASSNAME>MKNote</CLASSNAME>
	called a "<CLASSNAME>MKPart</CLASSNAME> info" with a parameter
	indicating the name of the <CLASSNAME>MKSynthPatch</CLASSNAME>:
    </PARA>
    
<PROGRAMLISTING>
aNote = [MKNote new];                             /* Another MKNote for info */	
[aNote setPar: MK_synthPatch toString: @"Pluck"];	
[aPart setInfo: aNote];
</PROGRAMLISTING>
  </SECT1>
  
  <SECT1 id="ExampleDefiningAnObjective-CClass">
    <TITLE>Example &horbar; Defining An Objective-C Class</TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM>
	<PARA> You need a header file (.h) and a code file (.m)
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA> The header file defines the interface to the class,
	i.e. the instance variables and methods defined by the class.
	Instance methods begin with "-", class methods begin with "+".
	Example:
	</PARA>
	<PROGRAMLISTING>
/* Here is an example .h file, "CircularList.h".
   All behavior is inherited from List, which defines a List of objects.
   Nowdays we can use NSArray which is more complex than List.
*/
	  
#include &lt;objc/List.h&gt;  /* Superclass interface */
	  
@interface CircularList: List /* List is superclass */
{  
    int currentLocation;
}  

- next; /* Returns next object in List or nil if none.  */ 

@end 
	  
/* Here is the corresponding .m file: */
#include "CircularList.h"
	  
@implementation CircularList

- next
{ 	
    int numObjects = [self count];	
    if (currentLocation &gt;= numObjects)	
        currentLocation = 0; 	
    return [self objectAt:currentLocation++];
}

@end
	</PROGRAMLISTING>
      </LISTITEM>
    </ITEMIZEDLIST>
  </SECT1>
  
  <SECT1 id="NeXTSoftwareKits">
      <TITLE><PRODUCTNAME>OpenStep</PRODUCTNAME> Software Kits</TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM>
	  <PARA> Application Kit &horbar; Contains
	    <CLASSNAME>NSButtons</CLASSNAME>, <CLASSNAME>NSSliders</CLASSNAME>,
	    and other user interface classes.  Best used with the
	    <APPLICATION>Interface Builder</APPLICATION> application.
	</PARA>
      </LISTITEM>
      <LISTITEM>
          <PARA> Foundation Kit &horbar; Contains 
classes that aid the manipulation of non-user interface data, 
for example <CLASSNAME>NSArray</CLASSNAME>, 
<CLASSNAME>NSDictionary</CLASSNAME>, <CLASSNAME>NSString</CLASSNAME>.
	  </PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><productname>MusicKit</productname> &horbar; Contains classes
	  such as <CLASSNAME>MKNote</CLASSNAME>, <CLASSNAME>MKMidi</CLASSNAME>,
	  <CLASSNAME>MKConductor</CLASSNAME>, and
	  <CLASSNAME>MKOrchestra</CLASSNAME> for doing <ACRONYM>DSP</ACRONYM>
	  synthesis, <acronym>MIDI</ACRONYM> processing, scheduling, etc.  The
	  <productname>MusicKit</productname> does not provide display
	  capabilities.  To do this, you must combine the Music and
	  Application Kits.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><productname>SndKit</productname> &horbar;
	  Contains the <CLASSNAME>Snd</CLASSNAME> class and 
	  <CLASSNAME>SndView</CLASSNAME>, a class for
	  displaying a <CLASSNAME>Snd</CLASSNAME>. Lets you record, playback
	  and display sound data.
	</PARA>
      </LISTITEM>
    </ITEMIZEDLIST>
    <PARA>Each class in each Kit has a "Class Description" on-line.
        It describes the class in
	prose form, and describes in detail the instance variables and the
	methods. These Class Descriptions are also given out in class.
    </PARA>
      <PARA>The <PRODUCTNAME>Apple</PRODUCTNAME> Kit documentation for
      the <ULINK URL="http://www.apple.com">AppKit</ULINK> and <ULINK
      URL="http://www.apple.com">FoundationKit</ULINK> is available as
      is the documentation for the <ULINK
      URL="&MKFrameworks;">MusicKit</ULINK> and <ULINK
      URL="&SKFrameworks;">SndKit</ULINK>.
    </PARA>
  </SECT1>
  
  <SECT1 id="InterfaceBuilder">
      <TITLE><APPLICATION>Interface Builder</APPLICATION></TITLE>
    
    <ITEMIZEDLIST>
      <LISTITEM>
	<PARA> Lets you make a graphic user interface using graphic
	  tools. It takes some getting used to, but once you "get it",
	  it's invaluable.  It's best understood by working through an
	  example.  But a bit of background preparation may help:
	</PARA>
      </LISTITEM>
      <LISTITEM>
	  <PARA> To use <APPLICATION>Interface Builder</APPLICATION>, you
	  create an "Interface Builder Custom Object" and configure a user
	  interface to send messages to an instance of your object.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA> There is one big restriction on Custom Objects: Any
	  method that is invoked from the user interface must have
	  exactly one argument and this argument must be the control
	  that sent the message.  Example:
	</PARA>
	<PROGRAMLISTING>
- setFreq: sender	
{	
    freq = [sender doubleValue];	
}
	</PROGRAMLISTING>
      </LISTITEM>
    </ITEMIZEDLIST>
    <PARA> You can also send messages directly to the interface from within
      your Custom Object.  To do this, you need to know the <emphasis
      role="bold">id</emphasis> of the controls in your interface.  Interface
      Builder provides a mechanism called "outlets" to do this.  Outlets are
      simply <emphasis role="bold">id</emphasis>-valued instance variables
      defined by your Custom Object.  In <APPLICATION>Interface
      Builder</APPLICATION>, you can connect an outlet to a
      control&horbar;then, when your program runs, the instance variable's
      value will be the control and you can send whatever messages you like to
      it.
    </PARA>
    
  </SECT1>
  
  <SECT1 id="Assignments-Week1">
    <TITLE>Assignments - Week 1</TITLE>
    
    <ORDEREDLIST>
      <LISTITEM>
	  <PARA>In the <ULINK URL="&MKConcepts;">MusicKit Concepts Manual</ULINK>,
	    read the sections 
	    <ULINK URL="&MKConcepts;/systemoverview.html">System Overview</ULINK> and 
	    <ULINK URL="&MKConcepts;/musicdata.html">Representing Musical Data</ULINK>.
	</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA><filename>Examples/example1</filename> is a program
	  that writes a one-note scorefile.  Copy the directory and
	  modify it to write a series of notes.  Then say build it
	  using <APPLICATION>Project Builder</APPLICATION> or "make"
	  typed at the shell if using a non-MacOS X system.
	</PARA>
      </LISTITEM>
    </ORDEREDLIST>
  </SECT1>
</CHAPTER>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:upper
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: "MusicKitTutorials.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
