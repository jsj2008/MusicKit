<!-- $Id$ -->

  <CHAPTER ID="CLASS4">
    <TITLE>Class 4 &horbar; <ACRONYM>DSP</ACRONYM> Synthesis Classes</TITLE>
    <SECT1 ID="CLASSCATEGORIES">
      <TITLE>Review: Classes in the <PRODUCTNAME>MusicKit</PRODUCTNAME></TITLE>
      <VARIABLELIST>
	<VARLISTENTRY>
	  <TERM>Representation classes (7)</TERM>
	  <LISTITEM>
	    <PARA><CLASSNAME>MKNote</CLASSNAME>, <CLASSNAME>MKPart</CLASSNAME>,
	      <CLASSNAME>MKScore</CLASSNAME>, etc.</PARA>
	  </LISTITEM>
	</VARLISTENTRY>    
	<VARLISTENTRY>
	  <TERM>Performance classes (16)</TERM>
	  <LISTITEM>
	    <PARA><CLASSNAME>MKConductor</CLASSNAME>,
	      <CLASSNAME>MKPerformer</CLASSNAME>,
	      <CLASSNAME>MKInstrument</CLASSNAME>, etc.</PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM><ACRONYM>DSP</ACRONYM> Synthesis classes (4)</TERM>
	  <LISTITEM>
	    <PARA><CLASSNAME>MKOrchestra</CLASSNAME>,
	      <CLASSNAME>MKUnitGenerator</CLASSNAME>,
	      <CLASSNAME>MKSynthPatch</CLASSNAME>,
	      <CLASSNAME>MKSynthData</CLASSNAME></PARA> 
	    <PARA>(also <CLASSNAME>MKSynthInstrument</CLASSNAME>)</PARA>
	  </LISTITEM>
	</VARLISTENTRY>
      </VARIABLELIST>
    </SECT1>

    <SECT1 ID="SYNTHESISCLASSES">
      <TITLE><PRODUCTNAME>MusicKit</PRODUCTNAME> Synthesis Classes</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKOrchestra</CLASSNAME> class manages the
	    <ACRONYM>DSP</ACRONYM> as a whole. </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKUnitGenerator</CLASSNAME> class (abstract)
	    represents a <ACRONYM>DSP</ACRONYM> processing or generating
	    module, such as an oscillator or a filter.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKSynthData</CLASSNAME> class represents a piece
	    of <ACRONYM>DSP</ACRONYM> memory.  A special type of
	    <CLASSNAME>MKSynthData</CLASSNAME> called a "patchpoint" is used to
	    connect <CLASSNAME>MKUnitGenerator</CLASSNAME>s.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKSynthPatch</CLASSNAME> class (abstract)
	    contains a list of <CLASSNAME>MKUnitGenerator</CLASSNAME>s that make
	    up a single sound-producing entity.  To produce a chord, multiple
	    instances of a <CLASSNAME>MKSynthPatch</CLASSNAME> subclass are
	    required.  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKSynthInstrument</CLASSNAME> class manages a
	    set of <CLASSNAME>MKSynthPatches</CLASSNAME> (voice allocation).
	</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>

      <PARA> We'll proceed as follows: </PARA>
      <ORDEREDLIST>
	<LISTITEM>
	  <PARA>
	    Look at the system from a high level, focusing on the
	    <CLASSNAME>MKSynthInstrument</CLASSNAME> and
	    <CLASSNAME>MKOrchestra</CLASSNAME> classes.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    Look in detail at the <CLASSNAME>MKOrchestra</CLASSNAME>,
             <CLASSNAME>MKUnitGenerator</CLASSNAME> and
             <CLASSNAME>MKSynthData</CLASSNAME> classes.	
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>3. Look at the <CLASSNAME>MKSynthPatch</CLASSNAME> class. (next
	    time) </PARA>
	</LISTITEM>
      </ORDEREDLIST>

      <FIGURE>
	<TITLE>	<CLASSNAME>MKSynthInstrument</CLASSNAME></TITLE>
	<MEDIAOBJECT>

	  <IMAGEOBJECT>
<!--	    <IMAGEDATA FILEREF="Images/MusicKitClass4-SynthInstrument.pdf"
		       FORMAT="PDF" SCALE=50>
-->
	    <IMAGEDATA FILEREF="Images/MusicKitClass4-SynthInstrument.eps"
		       FORMAT="EPS" SCALE=50>
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/MusicKitClass4-SynthInstrument.gif"
		       FORMAT="GIF">
	  </IMAGEOBJECT>
	</MEDIAOBJECT>
      </FIGURE>
    </SECT1>
    
    <SECT1 ID="SIMPLECOMMONEXAMPLE">
      <TITLE>A Simple Common Example</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> The easiest way to do <ACRONYM>DSP</ACRONYM> synthesis is to
	    use one of the <CLASSNAME>MKSynthPatches</CLASSNAME> in the
	    <CLASSNAME>MKSynthPatch</CLASSNAME> Library.  These are general and
	    implement standard synthesis techniques.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKOrchestra</CLASSNAME> uses the same protocol as
	    <CLASSNAME>MKMidi</CLASSNAME>: (<emphasis role="bold">open, run,
	    stop, close, abort</emphasis>).  First, you create and open the
	    <CLASSNAME>MKOrchestra</CLASSNAME>.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Then you create a <CLASSNAME>MKSynthInstrument</CLASSNAME> and
	    set its <CLASSNAME>MKSynthPatch</CLASSNAME> class (and, optionally,
	    synthPatchCount).  Finally, you start the performance and run the
	    <CLASSNAME>MKOrchestra</CLASSNAME>: </PARA>
	  <PROGRAMLISTING>
MKSynthInstrument *synthIns;	
MKOrchestra *orch = [MKOrchestra newOnDSP: 0];	
synthIns = [[MKSynthInstrument alloc] init];	
[orch open];	
[synthIns setSynthPatchClass: [Pluck class]];	
[orch run];	
[MKConductor startPerformance];	
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA> You can then send <CLASSNAME>MKNote</CLASSNAME>s (as explained
	    last class), from your user interface,
	    <CLASSNAME>MKMidi</CLASSNAME>, or a
	    <CLASSNAME>MKPerformer</CLASSNAME>.  E.g.: </PARA>
	  <PROGRAMLISTING>
MKNote *aNote = [[MKNote alloc] init];	
[aNote setDur: 1.0]; 	
[MKConductor lockPerformance];	
[[synthIns noteReceiver] receiveNote: aNote];	
[MKConductor unlockPerformance];
	  </PROGRAMLISTING>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    
    <SECT1 ID="ORCHESTRACLASS">
      <TITLE>The <CLASSNAME>MKOrchestra</CLASSNAME> Class</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>Manages control of <ACRONYM>DSP</ACRONYM>:</PARA>
	  <PARA><emphasis role="bold">new</emphasis> or <emphasis
	  role="bold">newOnDSP:</emphasis>, <emphasis
	  role="bold">open</emphasis>, <emphasis
	  role="bold">run</emphasis>, <emphasis
	  role="bold">stop</emphasis>, <emphasis
	  role="bold">close</emphasis>, <emphasis
	  role="bold">abort</emphasis>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
      <PARA> Manages allocation of <ACRONYM>DSP</ACRONYM> resources: </PARA>

      <PARA><emphasis role="bold">allocUnitGenerator:</emphasis>, </PARA>
      <PARA><emphasis role="bold">allocSynthData:</emphasis>, </PARA>
      <PARA><emphasis role="bold">allocSynthPatch:</emphasis>, etc. </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Class object manages a collection of
	    <ACRONYM>DSPs</ACRONYM>:</PARA> <PARA><emphasis role="bold">
	    + open</emphasis>, <emphasis role="bold">+ run</emphasis>,
	    <emphasis role="bold">+ allocSynthPatch:</emphasis>, etc.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>All allocation of <ACRONYM>DSP</ACRONYM> resources is done
	    through the <CLASSNAME>MKOrchestra</CLASSNAME>.  You don't send
	    <emphasis role="bold">alloc</emphasis> directly to a
	    <CLASSNAME>MKUnitGenerator</CLASSNAME> or
	    <CLASSNAME>MKSynthPatch</CLASSNAME>.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> You only need to specify allocation requests directly to the
	    <CLASSNAME>MKOrchestra</CLASSNAME> when working at a low level.  If
	    you use a <CLASSNAME>MKSynthInstrument</CLASSNAME>, it takes care of
	    the allocation for you (as in the previous example.)  Similarly,
	    if you make your own <CLASSNAME>MKSynthPatch</CLASSNAME>, the actual
	    allocation of <CLASSNAME>MKUnitGenerator</CLASSNAME>s from the
	    <CLASSNAME>MKOrchestra</CLASSNAME> is done behind the scenes.</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="ORCHESTRASETTINGS">
      <TITLE><CLASSNAME>MKOrchestra</CLASSNAME> Settings</TITLE>

      <VARIABLELIST>
	<TITLE>	</TITLE>
	<VARLISTENTRY>
	  <TERM> <emphasis role="bold">+setTimed:</emphasis></TERM>
	  <LISTITEM>
	    <PARA>YES (timed) &horbar; <ACRONYM>DSP</ACRONYM> keeps its own
	      clock running for precise timing.  Good for playing scores and
	    when envelope timing is crucial.</PARA>
	    <PARA>NO (untimed) &horbar; <ACRONYM>DSP</ACRONYM> executes
	      messages as soon as they are received. </PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM> <emphasis role="bold">+setFastResponse:</emphasis> (before
	    <emphasis role="bold">open</emphasis>)</TERM>
	  <LISTITEM>
	    <PARA>YES &horbar; Use small sound-out buffers to minimize
	      latency.</PARA> 
	    <PARA>NO &horbar; Use larger sound-out buffers +more efficient
	      from the system's point of view and gives the
	      <ACRONYM>DSP</ACRONYM> more of a cushion.</PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM> <emphasis role="bold">+setOutputSoundfile:</emphasis>
	    (before
	    <emphasis role="bold">open</emphasis>)</TERM>
	  <LISTITEM>
	    <PARA>Sets the name of a file to which samples are
	      written. <ACRONYM>DACs</ACRONYM> are not used in this mode.
	    </PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM> <emphasis role="bold">+setOutputCommandsFile:
	    </emphasis>(before <emphasis role="bold">open</emphasis>)</TERM>
	  <LISTITEM>
	    <PARA>Sets the name of a file to which <ACRONYM>DSP</ACRONYM>
	      commands are written. <ACRONYM>DAC</ACRONYM>s are used in this
	      mode.  </PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM> <emphasis role="bold">+setSamplingRate:</emphasis> (before
	    <emphasis role="bold">open</emphasis>)</TERM>
	  <LISTITEM>
	    <PARA>Sets the sampling rate to 44100 or 22050.</PARA>
	  </LISTITEM>
	</VARLISTENTRY>
      </VARIABLELIST>
    </SECT1>

    <SECT1 ID="SYNTHINSTRUMENTCLASS">
      <TITLE>The <CLASSNAME>MKSynthInstrument</CLASSNAME> Class</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> An <CLASSNAME>MKInstrument</CLASSNAME> subclass that realizes
	<CLASSNAME>MKNote</CLASSNAME>s on the <ACRONYM>DSP</ACRONYM>.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> You specify which <CLASSNAME>MKSynthPatch</CLASSNAME>
	    subclass to use with <emphasis
	    role="bold">setSynthPatchClass:</emphasis>.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Allocates patches based on
	    <CONSTANT>noteTags</CONSTANT> of incoming
	    <CLASSNAME>MKNote</CLASSNAME>s.  Allocation can be done
	    from a global or a local pool.  If you send <emphasis
	    role="bold">setSynthPatchCount:</emphasis>, the pool is
	    local (<CONSTANT>MK_MANUALALLOC</CONSTANT>) and contains
	    the number of patches specified.  Otherwise, pool is
	    global (<CONSTANT>MK_AUTOALLOC</CONSTANT>).</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Supports automatic preemption of the oldest running patch.
	    You can subclass <CLASSNAME>MKSynthInstrument</CLASSNAME> and
	    override one method to provide an alternative preemption strategy.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Advantage of automatic mode is that there's never any wasted
	    of patches.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Advantage of manual mode is that important musical parts can
	    be given precedence.  (E.g. you can get around a screw case such
	    as overlapping bass-line notes causing a disappearing
	    melody.)</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> In Scorefiles, the <CLASSNAME>MKSynthPatch</CLASSNAME>
	    is specified in the part info's <emphasis
	    role="bold">synthPatch:</emphasis> parameter.  Manual mode
	    is specified in the part info's <emphasis
	    role="bold">synthPatchCount:</emphasis> parameter.
	    Example:
	  </PARA>
	  <PROGRAMLISTING>
part p1;         /* Scorefile excerpt*/	
p1 synthPatch: "Pluck" synthPatchCount: 2;	
	  </PROGRAMLISTING>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    
    <SECT1 ID="INTROTOUNITGENERATORS">
      <TITLE>Intro to <CLASSNAME>MKUnitGenerator</CLASSNAME>s</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKUnitGenerator</CLASSNAME> is abstract.  It is an
	    Objective-C class that represents a <ACRONYM>DSP</ACRONYM> module.
	    The <PRODUCTNAME>MusicKit</PRODUCTNAME> supplies a library of
	    <CLASSNAME>MKUnitGenerator</CLASSNAME> subclases.  Each has the
	    letters UG in its name.  The library is sufficient for most common
	    uses.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> To be fast, the <ACRONYM>DSP</ACRONYM> uses parallel memory
	    spaces X, Y, P.  To get the most possible voices in real time, it
	    is necessary to concern ourselves with memory spaces.  The
	    <PRODUCTNAME>MusicKit</PRODUCTNAME> has the best benchmarks for
	    56001 usage we have seen.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Each <CLASSNAME>MKUnitGenerator</CLASSNAME> has some number of
	    inputs and outputs.  For each configuration, a
	    <CLASSNAME>MKUnitGenerator</CLASSNAME> subclass exists.  Example:
	  </PARA>

	  <ITEMIZEDLIST>
	    <LISTITEM>
	      <PARA><CLASSNAME>OnepoleUG</CLASSNAME> ("master class") has 1
		input and 1 output.  Therefore, it has 4 subclasses ("leaf
		classes"): </PARA> 
	      <PARA><CLASSNAME>OnepoleUGxx</CLASSNAME>,
		<CLASSNAME>OnepoleUGxy</CLASSNAME>,</PARA> 
	      <PARA>
		<CLASSNAME>OnepoleUGyx</CLASSNAME>,
		<CLASSNAME>OnepoleUGyy</CLASSNAME> </PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA><CLASSNAME>OnepoleUGxy</CLASSNAME> writes its output to X
		memory and reads its input from Y memory.  For starters, you
		can just use all x memory and worry about optimization
		later. </PARA>
	    </LISTITEM>
	  </ITEMIZEDLIST>
	</LISTITEM>
	<LISTITEM>
	  <PARA> When creating your own <CLASSNAME>MKUnitGenerator</CLASSNAME>,
	    you only have to write the <ACRONYM>DSP</ACRONYM> code and run the
	    command-line program <command>dspwrap</COMMAND>,
	    which automatically writes all the classes for you.  You
	    <emphasis>never</emphasis> have to edit the leaf classes.  You may
	    <emphasis>optionally</emphasis> edit the master class.</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    
    <SECT1 ID="UNITGENERATORLIBRARY">
      <TITLE>The <CLASSNAME>MKUnitGenerator</CLASSNAME> Library</TITLE>
      <TABLE FRAME="ALL">
	<TITLE><CLASSNAME>MKUnitGenerator</CLASSNAME>s</TITLE>
	<TGROUP COLS="2" ALIGN="LEFT">
	  <TBODY>
	    <ROW>
	      <ENTRY>Filters:</ENTRY> 
	      <ENTRY><CLASSNAME>Allpass1</CLASSNAME>,
		<CLASSNAME>Onepole</CLASSNAME>,
		<CLASSNAME>Onezero</CLASSNAME></ENTRY>
	    </ROW>
	    <ROW>
	      <ENTRY>Oscillators:</ENTRY> 
	      <ENTRY><CLASSNAME>Oscg</CLASSNAME>,
		<CLASSNAME>Oscgaf</CLASSNAME>,
		<CLASSNAME>Oscgafi</CLASSNAME></ENTRY>
	    </ROW>
	    <ROW>
	      <ENTRY>Scale, mix:</ENTRY> 
	      <ENTRY><CLASSNAME>Add2</CLASSNAME>,
		<CLASSNAME>Mul1add2</CLASSNAME>, <CLASSNAME>Mul2</CLASSNAME>,
		<CLASSNAME>Interp</CLASSNAME>, <CLASSNAME>Mul2</CLASSNAME>,
		<CLASSNAME>Scl1add2</CLASSNAME>,<CLASSNAME>Scl2add2
		</CLASSNAME>, <CLASSNAME>Constant</CLASSNAME></ENTRY>
	    </ROW>
	    <ROW>
	      <ENTRY>Noise:</ENTRY> 
	      <ENTRY><CLASSNAME>Unoise</CLASSNAME>,
		<CLASSNAME>Snoise</CLASSNAME> </ENTRY> 
	    </ROW>
	    <ROW>
	      <ENTRY>Delay:</ENTRY>
	      <ENTRY><CLASSNAME>Delay</CLASSNAME></ENTRY></ROW>
	    <ROW>
	      <ENTRY>Timed switch:</ENTRY>
	      <ENTRY><CLASSNAME>Dswitcht</CLASSNAME>, 
		<CLASSNAME>Dswitch</CLASSNAME></ENTRY>
	    </ROW>
	    <ROW>
	      <ENTRY>Output:</ENTRY> 
	      <ENTRY><CLASSNAME>Out1a</CLASSNAME>,
		<CLASSNAME>Out1b</CLASSNAME>,
		<CLASSNAME>Out2sum</CLASSNAME></ENTRY>
	    </ROW>
	  </TBODY>
	</TGROUP>
      </TABLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> Header files for all the
	    <CLASSNAME>MKUnitGenerator</CLASSNAME>s are referenced from: </PARA>
	  <PROGRAMLISTING>
#import &lt;MKUnitGenerators/MKUnitGenerators.h&gt;
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <ACRONYM>DSP</ACRONYM> source code is provided for
	    all the unit generators on <emphasis
	    role="bold">/usr/lib/dsp/ugsrc/* </emphasis>.  You can
	    copy the <ACRONYM>DSP</ACRONYM> source code to a unit
	    generator and modify it to create a new unit generator.
	    You can then run it through <emphasis role="bold">
	    dspwrap</emphasis> to produce the classes.  This is
	    considered &ldquo;advanced&rdquo;, since it requires
	    knowledge of 56001 assembly and will not be covered in
	    this class.</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    
    <SECT1 ID="UNITGENERATORCLASS">
      <TITLE>The <CLASSNAME>MKUnitGenerator</CLASSNAME> Class</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
      <PARA> You can allocate a <CLASSNAME>MKUnitGenerator</CLASSNAME> from an
	open <CLASSNAME>MKOrchestra</CLASSNAME>.  </PARA>
      <PROGRAMLISTING>
[orch allocUnitGenerator: [Out2sumUGx class]];
      </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
      <PARA>An allocated <CLASSNAME>MKUnitGenerator</CLASSNAME> is, by definition, running on the DSP.
	You can deallocate a <CLASSNAME>MKUnitGenerator</CLASSNAME> by sending: </PARA>
      <PROGRAMLISTING>
[aUnitGenerator release];
      </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKUnitGenerator</CLASSNAME>s are in one of three
	    possible states: </PARA>
	  <TABLE>
	    <TITLE><CLASSNAME>MKUnitGenerator</CLASSNAME> States</TITLE>
	    <TGROUP COLS="2" ALIGN="LEFT">
	      <TBODY>
		<ROW>
		  <ENTRY>MK_idle</ENTRY> 
		  <ENTRY> Disconnected, not usable.</ENTRY>
		</ROW> 
		<ROW>
		  <ENTRY>MK_running</ENTRY> <ENTRY> Running</ENTRY> 
		</ROW>
		<ROW>
		  <ENTRY>MK_finishing</ENTRY> <ENTRY> Envelope release</ENTRY>
		</ROW>
	      </TBODY>
	    </TGROUP>
	  </TABLE>
	</LISTITEM>      
	<LISTITEM>
	  <PARA> To set these states you send the following standard messages:
	  </PARA>
	  <PARA>
	    <emphasis role="bold"> idle</emphasis>, <emphasis role="bold">
	    run</emphasis>, <emphasis role="bold"> finish</emphasis>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> These invoke the following methods, which you may implement
	    if you make your own <CLASSNAME>MKUnitGenerator</CLASSNAME> class:
	    </PARA> 
	  <PARA> <emphasis role="bold"> idleSelf</emphasis>,
	    <emphasis role="bold"> runSelf</emphasis>, <emphasis role="bold">
	      finishSelf</emphasis>  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The return value of <emphasis role="bold">finish
	    </emphasis>(and <emphasis role="bold">finishSelf</emphasis>) is a
	    double that indicates the time until the
	    <CLASSNAME>MKUnitGenerator</CLASSNAME> will be finished.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> In addition to these standard methods, individual
	    <CLASSNAME>MKUnitGenerator</CLASSNAME> classes implement
	    methods particular to their operation.  Common methods
	    include <emphasis role="bold">setInput:</emphasis> and
	    <emphasis role="bold">setOutput:</emphasis>.
	    E.g. oscillators implement <emphasis
	    role="bold">setFreq:</emphasis>.
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="CONNECTINGUNITGENERATORS">
      <TITLE>Connecting <CLASSNAME>MKUnitGenerator</CLASSNAME>s</TITLE>

      <PARA> To connect two <CLASSNAME>MKUnitGenerator</CLASSNAME>s, you use a
	"patchpoint", a kind of <CLASSNAME>MKSynthData</CLASSNAME>, which you
	can allocate from the <CLASSNAME>MKOrchestra</CLASSNAME>.  You must be
	sure to specify the memory space corresponding to the memory space of
	the input/output that the <CLASSNAME>MKUnitGenerator</CLASSNAME>s will
	be reading/writing.  Example:</PARA>

      <PROGRAMLISTING>
MKSynthData *pp;	
MKUnitGenerator *osc,*out; 	
MKOrchestra *orch = [MKOrchestra new];	
[orch open];	
pp = [orch allocPatchpoint: MK_xPatch];	
osc = [orch allocUnitGenerator: [OscgUGxy class]];	
out = [orch allocUnitGenerator: [Out1aUGx class]];	
[osc setOutput: pp];	
[out setInput: pp];	
[osc setFreq: 440];	
[osc setAmp: 1.0];	
[osc setTableToSineROM];	
[orch run];	
[osc run];	
[out run];	
/* You now hear a full-amplitude sine wave at 440 hz */	
      </PROGRAMLISTING>
      <PARA>Patchpoints may be reused, if you're careful about the order in
	which <CLASSNAME>MKUnitGenerator</CLASSNAME>s run. (More on this
	later.)</PARA>
    </SECT1>

    <SECT1 ID="SYNTHDATACLASS">
      <TITLE>The <CLASSNAME>MKSynthData</CLASSNAME> Class</TITLE>

      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> In addition to patchpoints, you may need other
	    <ACRONYM>DSP</ACRONYM> memory.  For example, you may want to load
	    a wave table.  To do this, you allocate a
	    <CLASSNAME>MKSynthData</CLASSNAME> object.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> To allocate a <CLASSNAME>MKSynthData</CLASSNAME>, you specify
	    the length and the space: </PARA>
	  <PROGRAMLISTING>
MKSynthData *sd  = [orch allocSynthData: MK_xData length: 256];	
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA> To load the <CLASSNAME>MKSynthData</CLASSNAME> with an array:
	  </PARA>
	  <PROGRAMLISTING>
DSPDatum someData[256] = {0, 1, 2, 3, ...};	
[sd setData: someData];
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA>To load the <CLASSNAME>MKSynthData</CLASSNAME> with a constant:
	  </PARA>

	  <PROGRAMLISTING>
[sd setToConstant: 1];
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Since patchpoints are actually <CLASSNAME>MKSynthData</CLASSNAME>,
	    you can use these methods for them as well.</PARA> 
	</LISTITEM>
	<LISTITEM>
	  <PARA>For convenience, <CLASSNAME>MKWaveTables</CLASSNAME> have a
	    <emphasis role="bold">dataDSPLength:</emphasis> method: </PARA>
	  <PROGRAMLISTING>
[sd setData: [aWaveTable dataDSPLength: 256]];
	  </PROGRAMLISTING>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="EXAMPLE">
      <TITLE>Simple Example of a Collection of <CLASSNAME>MKUnitGenerator</CLASSNAME>s, Operated from a
	User Interface</TITLE>
      <PROGRAMLISTING>
#import &lt;MusicKit/MusicKit.h&gt;
#import &lt;MKUnitGenerators/MKUnitGenerators.h&gt;
#import "MyCustomObject.h"

@implementation MyCustomObject

MKSynthData *pp;
MKUnitGenerator *osc,*out; 	

+ init
{
	MKOrchestra *orch = [MKOrchestra new];	
	[MKUnitGenerator enableErrorChecking: YES];	
	[orch open];	
	pp = [orch allocPatchpoint: MK_xData];	
	osc = [orch allocUnitGenerator: [OscgUGxy class]];	
	out = [orch allocUnitGenerator: [Out2sumUGx class]];	
	[osc setOutput: pp];	
	[out setInput: pp];	
	[osc setFreq: 440];	
	[osc setAmp: 0.1];	
	[osc setTableToSineROM];	
	[osc run];	
	[out run];	
	[orch run];	
	[MKConductor startPerformance];
}

+ setFreqFrom: sender
{
	[MKConductor lockPerformance];	
	[osc setFreq: [sender doubleValue]];	
	[MKConductor unlockPerformance];
}

+ setBearingFrom: sender
{
	[MKConductor lockPerformance];	
	[out setBearing: [sender doubleValue]];	
	[MKConductor unlockPerformance];
}

+ setAmplitudeFrom: sender
{
	[MKConductor lockPerformance];	
	[osc setAmp: [sender doubleValue]];	
	[MKConductor unlockPerformance];
}

@end
</PROGRAMLISTING>	
    </SECT1>

    <SECT1 ID="ASSIGNMENT4">
      <TITLE>Assignment - Week 4</TITLE> 

      <PARA>Modify <filename>Examples/example4</FILENAME> to
	make a different sound. Try using some other
	<CLASSNAME>MKUnitGenerator</CLASSNAME>s.  </PARA> 
      
      <PARA>Read the documentation on <ACRONYM>DSP</ACRONYM> synthesis in the
	<ULINK URL="&MKConcepts;">MusicKit Concepts Manual</ULINK>. Next
	week we'll cover <CLASSNAME>MKSynthPatches</CLASSNAME>.</para>
    </SECT1>
  </CHAPTER>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:upper
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: "MusicKitTutorials.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
