<!-- $Id$ -->

  <CHAPTER ID="class3">
    <TITLE>Class 3 &horbar; Performance Classes</TITLE> 
    <SECT1>
      <TITLE>Review: Classes in the <PRODUCTNAME>MusicKit</PRODUCTNAME></TITLE>
      <VARIABLELIST>
	<VARLISTENTRY>
	  <TERM>Representation classes (7)</TERM>
	  <LISTITEM>
	    <PARA><CLASSNAME>MKNote</CLASSNAME>, <CLASSNAME>MKPart</CLASSNAME>,
	      <CLASSNAME>MKScore</CLASSNAME>, etc.</PARA> </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM>Performance classes (16)</TERM>
	  <LISTITEM>
	    <PARA><CLASSNAME>MKConductor</CLASSNAME>,
	      <CLASSNAME>MKPerformer</CLASSNAME>,
	      <CLASSNAME>MKInstrument</CLASSNAME>, etc.</PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM><ACRONYM>DSP</ACRONYM> Synthesis classes (4)</TERM>
	  <LISTITEM>
	    <PARA><CLASSNAME>MKOrchestra</CLASSNAME>,
	      <CLASSNAME>MKUnitGenerator</CLASSNAME>,
	      <CLASSNAME>MKSynthPatch</CLASSNAME>,
	      <CLASSNAME>MKSynthData</CLASSNAME></PARA>
	  </LISTITEM>
	</VARLISTENTRY>
      </VARIABLELIST>
    </SECT1>

    <SECT1 ID="MUSICKITPERFORMANCECLASSES">
      <TITLE><PRODUCTNAME>MusicKit</PRODUCTNAME> Performance Classes</TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKConductor</CLASSNAME> class provides
	    scheduling capability. </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKInstrument</CLASSNAME> class
	    (abstract) realizes <CLASSNAME>MKNote</CLASSNAME>s in some manner.
	    E.g. <CLASSNAME>MKSynthInstrument</CLASSNAME>realizes
	    <CLASSNAME>MKNote</CLASSNAME>s on the <ACRONYM>DSP</ACRONYM>.</PARA> 
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKPerformer</CLASSNAME> class
	    (abstract) dispatches a time-ordered stream of
	    <CLASSNAME>MKNote</CLASSNAME>s.  For example to perform a
	    <CLASSNAME>MKScore</CLASSNAME>, you use a
	    <CLASSNAME>MKPartPerformer</CLASSNAME> for each
	    <CLASSNAME>MKPart</CLASSNAME> in the <CLASSNAME>MKScore</CLASSNAME>.
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>  
      <FIGURE>
	<TITLE> A <PRODUCTNAME>MusicKit</PRODUCTNAME> Performance</TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
<!--	    <IMAGEDATA FILEREF="Images/MusicKitClass3-performance.pdf"
		       FORMAT="pdf" SCALE=50>
-->
	    <IMAGEDATA FILEREF="Images/MusicKitClass3-performance.eps"
		       FORMAT="eps" SCALE=50>
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/MusicKitClass3-performance.gif" FORMAT="GIF">
	  </IMAGEOBJECT>
	</MEDIAOBJECT>
      </FIGURE>
    </SECT1>

    <SECT1 ID="CONDUCTORCLASS">
      <TITLE>The <CLASSNAME>MKConductor</CLASSNAME> Class</TITLE> 
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> The <CLASSNAME>MKConductor</CLASSNAME> class is the primary
	    performance class. </PARA> 
	</LISTITEM>
	<LISTITEM>
	  <PARA> Allows you to schedule an
	    Objective-C message to be sent in the future.  Example: </PARA>
	  <PROGRAMLISTING>
[aConductor sel: @selector(hello:) 
             to: anObject 	
         atTime: 3.0
       argCount: 1, anotherObject];
	  </PROGRAMLISTING>
	  <PARA>At time 3.0, aConductor will send:</PARA>   
	  <PROGRAMLISTING>
[anObject hello: anotherObject]; 
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    A <PRODUCTNAME>MusicKit</PRODUCTNAME> performance requires
	    a <CLASSNAME>MKConductor</CLASSNAME>.  You need not create
	    a <CLASSNAME>MKConductor</CLASSNAME> explicitly.  A
	    &ldquo;defaultConductor&rdquo; is created for you and is
	    obtained by:
	  </PARA>
	  <PROGRAMLISTING>
[MKConductor defaultConductor];
	  </PROGRAMLISTING>
	</LISTITEM>  
	<LISTITEM>
	  <PARA>Multiple <CLASSNAME>MKConductor</CLASSNAME>s may be used. Each
	    may have its own tempo and may be paused/resumed independently.
	    However, the entire performance is controlled by the
	    <CLASSNAME>MKConductor</CLASSNAME> class.  E.g., to start a
	    performance, you send:
	  </PARA>
	  <PROGRAMLISTING>
[MKConductor startPerformance];	
	  </PROGRAMLISTING>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="ConductorClassSettings">
      <TITLE><CLASSNAME>MKConductor</CLASSNAME> Class Settings</TITLE>
      <VARIABLELIST>
	<TITLE>	</TITLE>
	<VARLISTENTRY>
	  <TERM> <EMPHASIS ROLE="bold">+ setClocked:</EMPHASIS></TERM>
	  <LISTITEM>
	    <PARA>
	      <EMPHASIS>YES</EMPHASIS> (clocked) &horbar; messages sent at the
	      proper time Use this mode when you want to interact with the
	      performance. This is the default. Example:
	      <APPLICATION>ScorePlayer</APPLICATION>
	    </PARA>
	    <PARA>
	      <EMPHASIS>NO</EMPHASIS> (unclocked) &horbar; messages sent in
	      time order, but ASAP.  Use this mode when no interaction is
	      required.  Example: <COMMAND>playscore</COMMAND>
	    </PARA>
	  </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	  <TERM><emphasis role="bold">+ setFinishWhenEmpty:</emphasis></TERM>
	  <LISTITEM>
	    <PARA>
	      YES &horbar; <emphasis role="bold">[MKConductor
		finishPerformance]</emphasis> is automatically triggered when
	      the <CLASSNAME>MKConductor</CLASSNAME> has no more scheduled
	      messages. This is the default.  Example:
	      <APPLICATION>ScorePlayer</APPLICATION>.
	    </PARA>
	    <PARA>
	      <EMPHASIS>NO</EMPHASIS> &horbar; The performance continues until
	      the Application sends <EMPHASIS ROLE="BOLD">[Conductor
	      finishPerformance]</EMPHASIS>.  Example:
	      <APPLICATION>Ensemble</APPLICATION>.
	    </PARA>
	  </LISTITEM>
	</VARLISTENTRY>
      </VARIABLELIST>
      <PARA> <emphasis role="bold">MKSetDeltaT(double</emphasis> val<emphasis
	role="bold">)</emphasis> sets &ldquo;scheduler advance&rdquo; over
	<ACRONYM>MIDI</ACRONYM> and <ACRONYM>DSP</ACRONYM>.  The larger the
	argument, the more dependable the performance and the greater the
	latency.  E.g. <emphasis role="bold">MKSetDeltaT</emphasis>(0.1) sets
	a &ldquo;delta time&rdquo; of 100 ms.
      </PARA>
    </SECT1>

    <SECT1 ID="INSTRUMENTCLASS">
      <TITLE>The <CLASSNAME>MKInstrument</CLASSNAME> Class</TITLE> 
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> An abstract class that realizes <CLASSNAME>MKNote</CLASSNAME>s
	    in a manner defined by the subclass.
	    <CLASSNAME>MKInstrument</CLASSNAME>s are passive, they respond to
	    <CLASSNAME>MKNote</CLASSNAME>s sent to them by the user interface or
	    a <CLASSNAME>MKPerformer</CLASSNAME>.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The subclass defines its means of realization by implementing
	    <emphasis role="bold">realizeNote:fromNoteReceiver:</emphasis>.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <TABLE>
	    <TITLE>
	      <CLASSNAME>MKInstrument</CLASSNAME> subclasses provided by the
	      <PRODUCTNAME>MusicKit</PRODUCTNAME>
	    </TITLE>
	    <TGROUP COLS="2" ALIGN="LEFT">
	      <COLSPEC COLNUM="1">
	      <COLSPEC COLNUM="2">
	      <THEAD>
		<ROW> 
		  <ENTRY>Class</ENTRY>
		  <ENTRY>Means of realization</ENTRY>
		</ROW>
	      </THEAD>
	      <TBODY>
		<ROW>
		  <ENTRY><CLASSNAME>MKPartRecorder</CLASSNAME></ENTRY> 
		  <ENTRY> adds <CLASSNAME>MKNote</CLASSNAME>s to a
		    <CLASSNAME>MKPart</CLASSNAME>.
		  </ENTRY>
		</ROW>
		<ROW>
		  <ENTRY> <CLASSNAME>MKSynthInstrument</CLASSNAME></ENTRY>  
		  <ENTRY> realizes <CLASSNAME>MKNote</CLASSNAME>s on
		    <ACRONYM>DSP</ACRONYM>. 	
		  </ENTRY>
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKFileWriter</CLASSNAME></ENTRY> 
		  <ENTRY> (abstract) writes <CLASSNAME>MKNote</CLASSNAME>s to a
		    file. 
		  </ENTRY>
		</ROW>
		<ROW>
		  <ENTRY> <CLASSNAME>MKScorefileWriter</CLASSNAME></ENTRY>   
		  <ENTRY>writes <CLASSNAME>MKNote</CLASSNAME>s to a scorefile.
		  </ENTRY>
		</ROW>
	      </TBODY>
	    </TGROUP>
	  </TABLE>
	</LISTITEM>
	<LISTITEM>
	  <TABLE>
	    <TITLE>Pseudo-Instrument classes provided by
	      <PRODUCTNAME>MusicKit</PRODUCTNAME>
	    </TITLE>
	    <TGROUP COLS="2" ALIGN="LEFT">
	      <COLSPEC COLNUM="1">
	      <COLSPEC COLNUM="2">
	      <THEAD>
		<ROW>
		  <ENTRY>Class</ENTRY> 
		  <ENTRY>Means of realization</ENTRY>
		</ROW>
	      </THEAD>
	      <TBODY>
		<ROW>
		  <ENTRY> <CLASSNAME>MKMidi</CLASSNAME></ENTRY> 
		  <ENTRY> sends <CLASSNAME>MKNote</CLASSNAME>s to 
		    <ACRONYM>MIDI</ACRONYM> via serial port
		  </ENTRY> 
		</ROW>
		<ROW>
		  <ENTRY> <CLASSNAME>MKScoreRecorder</CLASSNAME></ENTRY>
		  <ENTRY> manages set of <CLASSNAME>MKPartRecorder</CLASSNAME>s
		  </ENTRY>
		</ROW>
	      </TBODY>
	    </TGROUP>
	  </TABLE>
	</LISTITEM>  
	<LISTITEM>
	  <PARA> <CLASSNAME>MKNoteFilter</CLASSNAME> is a special (abstract)
	    subclass of Instrument that processes <CLASSNAME>MKNote</CLASSNAME>s
	    it will be described later. </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKInstrument</CLASSNAME>s receive
	    <CLASSNAME>MKNote</CLASSNAME>s via their
	    &ldquo;inputs&rdquo;, which are small objects called
	    <CLASSNAME>MKNoteReceiver</CLASSNAME>s.  You can send
	    <CLASSNAME>MKNote</CLASSNAME>s directly to a
	    <CLASSNAME>MKNoteReceiver</CLASSNAME> or use a
	    <CLASSNAME>MKPerformer</CLASSNAME> to dispatch the
	    <CLASSNAME>MKNote</CLASSNAME>s (e.g. when playing a
	    <CLASSNAME>MKScore</CLASSNAME>).
	  </PARA>
	  <TABLE>
	    <TITLE><CLASSNAME>MKNoteReceiver</CLASSNAME>s
	    provided by <CLASSNAME>MKInstrument</CLASSNAME> subclasses</TITLE>
	    <TGROUP COLS="2" ALIGN="LEFT">
	  <COLSPEC COLNUM="1">
	      <COLSPEC COLNUM="2">
	      <THEAD>
		<ROW>
		  <ENTRY>Class</ENTRY> 
		  <ENTRY>Number of <CLASSNAME>MKNoteReceiver</CLASSNAME>s</ENTRY>
		</ROW>
	  </THEAD>
	      <TBODY>
		<ROW>
		  <ENTRY><CLASSNAME>MKSynthInstrument</CLASSNAME>	</ENTRY>
		  <ENTRY>1</ENTRY>	
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKPartRecorder</CLASSNAME> </ENTRY>
		  <ENTRY>1</ENTRY> 
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKScoreRecorder</CLASSNAME> </ENTRY>
		  <ENTRY>1 per Part in the Score</ENTRY> 
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKScorefileWriter</CLASSNAME></ENTRY>
		  <ENTRY>1 per <CLASSNAME>MKPart</CLASSNAME> in the scorefile
		  </ENTRY>
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKMidi</CLASSNAME></ENTRY>
		  <ENTRY>1 per <ACRONYM>MIDI</ACRONYM> channel + 1 extra</ENTRY>
		</ROW>
	      </TBODY>
	    </TGROUP>
	  </TABLE>
	</LISTITEM>
	<LISTITEM>
	  <PARA> You can tell an <CLASSNAME>MKInstrument</CLASSNAME> to realize
	    a <CLASSNAME>MKNote</CLASSNAME> by sending <emphasis
	    role="bold">receiveNote:</emphasis> to one of its
	    <CLASSNAME>MKNoteReceiver</CLASSNAME>s.  You can obtain the
	    <CLASSNAME>MKNoteReceiver</CLASSNAME> in various ways.  To get its
	    first <CLASSNAME>MKNoteReceiver</CLASSNAME>, send <emphasis
	    role="bold">noteReceiver</emphasis> to the
	    <CLASSNAME>MKInstrument</CLASSNAME>.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> When sending <CLASSNAME>MKNote</CLASSNAME>s
	    <EMPHASIS>directly</EMPHASIS> to an
	    <CLASSNAME>MKInstrument</CLASSNAME>'s
	    <CLASSNAME>MKNoteReceiver</CLASSNAME>, you must update
	    time.  Afterwards (if using the <ACRONYM>DSP</ACRONYM>)
	    you must make sure that the <ACRONYM>DSP</ACRONYM> command
	    buffers are properly emptied.  Example:
	  </PARA>
	  <PROGRAMLISTING>
[MKConductor lockPerformance];
[[anInstrument noteReceiver] receiveNote: aNote];	
[MKConductor unlockPerformance];
	  </PROGRAMLISTING>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="PERFORMANCECLASS">
      <TITLE>The <CLASSNAME>MKPerformer</CLASSNAME> Class</TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> An abstract class that dispatches
	    <CLASSNAME>MKNote</CLASSNAME>s in a time-ordered fashion.
	    <CLASSNAME>MKPerformer</CLASSNAME>s are active; they are
	    <CLASSNAME>MKNote</CLASSNAME> dispatchers.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Subclass implements <emphasis role="bold">perform</emphasis>,
	    invoked periodically by its <CLASSNAME>MKConductor</CLASSNAME>, as
	    determined by the instance var <emphasis>nextPerform</emphasis>,
	    reset within <emphasis role="bold">perform</emphasis> to specify
	    when next <CLASSNAME>MKNote</CLASSNAME> is to occur.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <TABLE>
	      <TITLE>
		<CLASSNAME>MKPerformer</CLASSNAME> subclasses provided by the
		<PRODUCTNAME>MusicKit</PRODUCTNAME>
	      </TITLE>
	      <TGROUP COLS="2" ALIGN="LEFT">
		<COLSPEC COLNUM="1">
		  <COLSPEC COLNUM="2">
		    <THEAD>
		      <ROW> 
			<ENTRY> Class</ENTRY>
			<ENTRY> Means of performance</ENTRY>
		      </ROW>
		    </THEAD>
		    <TBODY>
		      <ROW>
			<ENTRY><CLASSNAME>MKPartPerformer</CLASSNAME></ENTRY> 
			<ENTRY> performs <CLASSNAME>MKNote</CLASSNAME>s from a
			  <CLASSNAME>MKPart</CLASSNAME>.</ENTRY> 
		      </ROW>
		      <ROW>
			<ENTRY> <CLASSNAME>MKFilePerformer</CLASSNAME></ENTRY>
			<ENTRY> (abstract)
			  performs <CLASSNAME>MKNote</CLASSNAME>s from a file.</ENTRY>  
		      </ROW>
		      <ROW>
			<ENTRY> <CLASSNAME>MKScorefilePerformer</CLASSNAME> </ENTRY>
			<ENTRY> performs <CLASSNAME>MKNote</CLASSNAME>s from a
			  scorefile.</ENTRY>
		      </ROW>
		      <ROW>
			<ENTRY> <CLASSNAME>MKScorePerformer</CLASSNAME> </ENTRY>
			<ENTRY> manages a set of <CLASSNAME>MKPartPerformer</CLASSNAME>s
			</ENTRY>
		      </ROW>
		      <ROW>
			<ENTRY> <CLASSNAME>MKMidi</CLASSNAME> </ENTRY> 
			<ENTRY> (abstract)
			  performs <CLASSNAME>MKNote</CLASSNAME>s it receives via
			  <ACRONYM>MIDI</ACRONYM></ENTRY>
		      </ROW>
		    </TBODY>
	      </TGROUP>
	    </TABLE>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> 
	    <CLASSNAME>MKPerformer</CLASSNAME>s send
	    <CLASSNAME>MKNote</CLASSNAME>s via their
	    &ldquo;outputs&rdquo;, small objects called
	    <CLASSNAME>MKNoteSender</CLASSNAME>s.  A
	    <CLASSNAME>MKPerformer</CLASSNAME> sends a
	    <CLASSNAME>MKNote</CLASSNAME> to one of its
	    <CLASSNAME>MKNoteSender</CLASSNAME>s: [aNoteSender
	    <emphasis role="bold">sendNote:</emphasis> aNote];
	  </PARA>
	  <TABLE>
	    <TITLE>
	      <CLASSNAME>MKNoteSender</CLASSNAME>s provided
	      by <CLASSNAME>MKPerformer</CLASSNAME> subclasses.
	    </TITLE>
	    <TGROUP COLS="2" ALIGN="LEFT">
	      <COLSPEC COLNUM="1">
	      <COLSPEC COLNUM="2">
	      <THEAD>
		<ROW> 
		  <ENTRY>Class</ENTRY>
		  <ENTRY>Number of <CLASSNAME>MKNoteSender</CLASSNAME>s</ENTRY>
		</ROW>
	      </THEAD>
	      <TBODY>
		<ROW>
		  <ENTRY><CLASSNAME>MKPartPerformer</CLASSNAME></ENTRY>
		  <ENTRY>1</ENTRY>	
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKScorePerformer</CLASSNAME> </ENTRY>
		  <ENTRY>1 per <CLASSNAME>MKPart</CLASSNAME> in the
		    <CLASSNAME>MKScore</CLASSNAME>
		  </ENTRY> 
		</ROW>
		<ROW>
		  <ENTRY><CLASSNAME>MKScorefilePerformer</CLASSNAME></ENTRY>
		  <ENTRY>1 per <CLASSNAME>MKPart</CLASSNAME> in the scorefile
		  </ENTRY> 
		</ROW> 
		<ROW>
		  <ENTRY><CLASSNAME>MKMidi</CLASSNAME> </ENTRY>
		  <ENTRY>1 per <ACRONYM>MIDI</ACRONYM> channel + 1 extra</ENTRY>
		</ROW>
	      </TBODY>
	    </TGROUP>
	  </TABLE>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKPerformer</CLASSNAME>s may be paused,
	    resumed, delayed, and created dynamically.  Similar to
	    <PRODUCTNAME>Pla</PRODUCTNAME> &ldquo;voices&rdquo; or
	    <PRODUCTNAME>Common Music</PRODUCTNAME>
	    &ldquo;parts&rdquo;.</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="CONNECTINGPERFORMERS">
      <TITLE>Connecting <CLASSNAME>MKPerformer</CLASSNAME>s to
	<CLASSNAME>MKInstrument</CLASSNAME>s</TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> To connect a <CLASSNAME>MKPerformer</CLASSNAME> to an
	    <CLASSNAME>MKInstrument</CLASSNAME>, you send the message <emphasis
	    role="bold">connect:</emphasis> to a
	    <CLASSNAME>MKNoteSender</CLASSNAME> of a
	    <CLASSNAME>MKPerformer</CLASSNAME> with a
	    <CLASSNAME>MKNoteReceiver</CLASSNAME> of an
	    <CLASSNAME>MKInstrument</CLASSNAME> as an argument.  Example:
	    </PARA>
	  <PROGRAMLISTING>
[[aPerf noteSender] connect: [anIns noteReceiver]]; 
	  </PROGRAMLISTING>
	  <PARA>Or, equivalently:</PARA>
	  <PROGRAMLISTING>
[[anIns noteReceiver] connect: [aPerf noteSender]]; 
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Any number of <CLASSNAME>MKNoteReceiver</CLASSNAME>s may be
	    connected to a <CLASSNAME>MKNoteSender</CLASSNAME> and vica
	    versa. Any number of <CLASSNAME>MKPerformer</CLASSNAME>s and
	    <CLASSNAME>MKInstrument</CLASSNAME>s may be involved in a single
	    performance.  Any number of <CLASSNAME>MKPerformer</CLASSNAME>s may
	    be governed by one <CLASSNAME>MKConductor</CLASSNAME></PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="NOTEFILTERCLASS">
      <TITLE>The <CLASSNAME>MKNoteFilter</CLASSNAME> Class</TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> A <CLASSNAME>MKNoteFilter</CLASSNAME> (subclass of
	    <CLASSNAME>MKInstrument</CLASSNAME>) is an abstract class that
	    processes <CLASSNAME>MKNote</CLASSNAME>s in some manner.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKNoteFilter</CLASSNAME> inherits the
	    <CLASSNAME>MKNote</CLASSNAME>-receiving behavior of
	    <CLASSNAME>MKInstrument</CLASSNAME>.  It also supports the
	    <CLASSNAME>MKNote</CLASSNAME>-sending behavior of
	    <CLASSNAME>MKPerformer</CLASSNAME>.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Like any other <CLASSNAME>MKInstrument</CLASSNAME>,
	    <CLASSNAME>MKNoteFilter</CLASSNAME>s implement <emphasis
	    role="bold">realizeNote:fromNoteReceiver:</emphasis> to process
	    <CLASSNAME>MKNote</CLASSNAME>s it receives.  
	    Example: <APPLICATION>MidiEcho</APPLICATION>.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Rules:	</PARA>
	  <PARA>1. Copy <CLASSNAME>MKNote</CLASSNAME> on write.</PARA>
	  <PARA>(Or return <CLASSNAME>MKNote</CLASSNAME> to original condition)</PARA>
	  <PARA>2. Copy <CLASSNAME>MKNote</CLASSNAME> on store.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <APPLICATION>Ensemble</APPLICATION> is an Application
	    based on <CLASSNAME>MKNoteFilter</CLASSNAME>s.</PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="MIDICLASS">
      <TITLE>The <CLASSNAME>MKMidi</CLASSNAME> Class </TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKMidi</CLASSNAME> is a
	    pseudo-<CLASSNAME>MKPerformer</CLASSNAME> in that it can't predict
	    when the next <CLASSNAME>MKNote</CLASSNAME> will occur.  However, it
	    may be treated as any other <CLASSNAME>MKPerformer</CLASSNAME>.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> There may be two instances, one for each serial port.  Thus,
	    32 <ACRONYM>MIDI</ACRONYM> channels are possible. </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKMidi</CLASSNAME> is a direct connection to the
	    <ACRONYM>MIDI</ACRONYM> Device Driver.  Similarly,
	    <CLASSNAME>MKOrchestra</CLASSNAME> is a direct connection to the
	    <ACRONYM>DSP</ACRONYM>. Both implement the following protocol:
	  </PARA>
	  <TABLE>
	    <TITLE>Pseudo-<CLASSNAME>MKPerformer</CLASSNAME>
	    Performance Protocol</TITLE>
	    <TGROUP COLS="2" ALIGN="LEFT">
	      <COLSPEC COLNUM="1">
	      <COLSPEC COLNUM="2">
	      <TBODY>
		<ROW>
		  <ENTRY>open </ENTRY> <ENTRY> claims device </ENTRY> </ROW>
		<ROW>
		  <ENTRY>run </ENTRY> <ENTRY>starts device clock </ENTRY> </ROW>
		<ROW>
		  <ENTRY>stop </ENTRY> <ENTRY>stops device clock</ENTRY> </ROW>
		<ROW>
		  <ENTRY>close </ENTRY> <ENTRY>releases device after
		    waiting</ENTRY>
		</ROW>
		<ROW>
		  <ENTRY>abort </ENTRY> <ENTRY>releases device without
		    waiting</ENTRY>
		</ROW>
	      </TBODY>
	    </TGROUP>
	  </TABLE>
	</LISTITEM>
	<LISTITEM>
	  <PARA> To use <CLASSNAME>MKMidi</CLASSNAME> (or
	    <CLASSNAME>MKOrchestra</CLASSNAME>), you must send <emphasis
	    role="bold">run</emphasis> when you send <emphasis
	    role="bold">startPerformance</emphasis> to the
	    <CLASSNAME>MKConductor</CLASSNAME>. Example:
	  </PARA>
	  <PROGRAMLISTING>
[aMidi run];	
[MKOrchestra run];	
[MKConductor startPerformance];
	  </PROGRAMLISTING>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="SUMMARY">
      <TITLE>Summary of Performance Classes</TITLE>
      <PARA><CLASSNAME>MKConductor</CLASSNAME></PARA>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKPerformer</CLASSNAME>, <CLASSNAME>MKNoteFilter</CLASSNAME>
	    &amp; <CLASSNAME>MKInstrument</CLASSNAME>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKPartPerformer</CLASSNAME> &amp;
	    <CLASSNAME>MKPartRecorder</CLASSNAME>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKScorePerformer</CLASSNAME> &amp;
	    <CLASSNAME>MKScoreRecorder</CLASSNAME>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKFilePerformer</CLASSNAME> &amp;
	    <CLASSNAME>MKFileWriter</CLASSNAME>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKScorefilePerformer</CLASSNAME> &amp;
	    <CLASSNAME>MKScorefileWriter</CLASSNAME>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKNoteSender</CLASSNAME> &amp;
	    <CLASSNAME>MKNoteReceiver</CLASSNAME>
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA><CLASSNAME>MKSynthInstrument</CLASSNAME></PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA><CLASSNAME>MKMidi</CLASSNAME></PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>

    <SECT1 ID="ASSIGNMENT3">
      <TITLE>Assignment - Week 3</TITLE>
      <PARA>Copy and modify 
        <FILENAME class=directory>Examples/MusicKit/MidiEcho</FILENAME> to do
	some other type of <CLASSNAME>MKNoteFilter</CLASSNAME> processing on
	<ACRONYM>MIDI</ACRONYM> data.</PARA>
      <PARA>The following is an example
	<CLASSNAME>MKNoteFilter</CLASSNAME>:</PARA>
      <PROGRAMLISTING>
/* This class is a MKNoteFilter that generates echoes and sends them to 
   its successive MKNoteSenders. In MyApp, we connect the MKNoteSenders to 
   the MKNoteReceivers of MKMidi, thus producing MIDI echoes on successive
   MIDI channels. To use this app, you need to have a MIDI synthesizer that
   can receive on multiple channels, such as the Yamaha SY77 or FB01. */

#import &lt;MusicKit/MusicKit.h&gt;
#import "EchoFilter.h"
#define NUMCHANS 8  /* My MIDI Synthesizer handles 8 channels. */

@implementation EchoFilter : MKNoteFilter
  /* A simple note filter that does MIDI echo */
{
    double delay;		    /* delay between echos, in seconds */
}

- init
  /* Called automatically when an instance is created. */
{    int i;
     
     [super init]; 
     delay = .1;
     for (i = 0; i &lt;= NUMCHANS; i++)  /* 1 for each channel plus 'sys' messages */
         [self addNoteSender: [[MKNoteSender alloc] init]];
     [self addNoteReceiver: [[MKNoteReceiver alloc] init]];
     return self;
 }

- setDelay: (double)delayArg
  /* change the amount of delay (in seconds) between echoes */
{
    delay = delayArg;
    return self;
}

- connectAcross: anInstOrNoteFilter    
  /* Just connects successive MKNoteSenders of the receivers to successive
     MKNoteReceivers of anInstOrNoteFilter. */
{
    NSArray *pList = [self noteSenders];
    NSArray *iList = [anInstOrNoteFilter noteReceivers];
    int i,siz;
    int pSiz = [pList count];
    int iSiz = [iList count];
    siz = (pSiz &gt; iSiz) ? iSiz : pSiz;   /* Take min length */
    for (i = 0; i &lt; siz; i++)            /* Connect them up */
        [[pList objectAtIndex: i] connect: [iList objectAtIndex: i]];
    return self;
}

#define NOTESENDER(_i) [noteSenders objectAtIndex: _i]

- realizeNote: aNote fromNoteReceiver: aNoteReceiver
  /* Here's where the work is done. */
{
    /* This relies on the knowledge that the MKMidi object sorts its incoming 
       notes by channel as well as by noteTag. Thus, duplicating a note with
       a particular noteTag on several channels works ok. In general, this 
       MKNoteFilter assumes each output (MKNoteSender) is assigned a unique
       connectio (MKNoteReceiver). */
       
    int i;
    double curDly;
    int velocity, noteType;
    id newNote;

    noteType = [aNote noteType];
    if (noteType == MK_mute) {	
        [NOTESENDER(0) sendNote: aNote];          /* Just forward these */
        return self;
    }
    curDly = 0;
    [NOTESENDER(1) sendNote: aNote];             /* Send current note */
    velocity = [aNote parAsInt: MK_velocity];    /* Grab velocity */
    for (i = 2; i &lt;= NUMCHANS; i++) {         /* Make echoes */	
        curDly += delay;                         	
        newNote = [aNote copy];                  /* Need to copy notes here */
        if (noteType == MK_noteOn)               /* Decrement echo velocity */
            [newNote setPar: MK_velocity toInt: velocity -= 15];	
        /* Schedule it for later */	
        [NOTESENDER(i) sendAndFreeNote: newNote withDelay: curDly];
    }
    return self;
}

@end
      </PROGRAMLISTING>
    </SECT1>
  </CHAPTER>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:upper
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: "MusicKitTutorials.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

