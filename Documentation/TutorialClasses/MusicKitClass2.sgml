<!-- $Id$ -->

  <CHAPTER ID="class2">
    <title>Class 2 &horbar; <PRODUCTNAME>MusicKit</PRODUCTNAME> Representation Classes</title>
    <SECT1 ID="Overview">
      <TITLE>Review: Classes in the <PRODUCTNAME>MusicKit</PRODUCTNAME></TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>Representation classes (7)</PARA>
	  <PARA>
	    <CLASSNAME>MKNote</CLASSNAME>, 
	    <CLASSNAME>MKPart</CLASSNAME>,
	    <CLASSNAME>MKScore</CLASSNAME>, etc.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Performance classes (16)</PARA>
	  <PARA>
	    <CLASSNAME>MKConductor</CLASSNAME>, 
	    <CLASSNAME>MKPerformer</CLASSNAME>, 
	    <CLASSNAME>MKInstrument</CLASSNAME>, etc.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA><ACRONYM>DSP</ACRONYM> Synthesis classes (4)</PARA>
	  <PARA><CLASSNAME>MKOrchestra</CLASSNAME>,
	    <CLASSNAME>MKUnitGenerator</CLASSNAME>,
	    <CLASSNAME>MKSynthPatch</CLASSNAME>,
	    <CLASSNAME>MKSynthData</CLASSNAME></PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    
    <SECT1 id="MusicKitRepresentationClasses">
      <TITLE><PRODUCTNAME>MusicKit</PRODUCTNAME> Representation Classes</TITLE>
    
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>
	    Musical events are represented by <CLASSNAME>MKNote</CLASSNAME>
	    instances.	
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKNote</CLASSNAME>s are grouped into
	    <CLASSNAME>MKPart</CLASSNAME>s.  Each <CLASSNAME>MKPart</CLASSNAME>
	    corresponds to a <emphasis>like manner of realization</emphasis>
	    during performance.  E.g. all notes in a
	    <CLASSNAME>MKPart</CLASSNAME> are synthesized with the same
	    synthesis technique or on the same <ACRONYM>MIDI</ACRONYM> channel.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKParts</CLASSNAME> are grouped into
	    <CLASSNAME>MKScores</CLASSNAME>.  A
	    <CLASSNAME>MKScore</CLASSNAME> may be written out as an
	    <ACRONYM>ASCII</ACRONYM> note list called a &ldquo;Scorefile&rdquo;.
	    ScoreFile is actually a simple language.  There is also a
	    binary format of the scorefile (in release 2.0).
	    <CLASSNAME>MKScores</CLASSNAME> can also read/write
	    Standard <ACRONYM>MIDI</ACRONYM> files. Finally,
	    <CLASSNAME>MKScores</CLASSNAME>, as well as all
	    <PRODUCTNAME>MusicKit</PRODUCTNAME> objects, can be
	    &ldquo;archived&rdquo; using an <CLASSNAME>NSArchiver</CLASSNAME>, as
	    defined in the Application Kit.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKEnvelope</CLASSNAME> and <CLASSNAME>MKWaveTable</CLASSNAME>
	    data are stored in <CLASSNAME>MKEnvelope</CLASSNAME> and
	    <CLASSNAME>MKWaveTable</CLASSNAME> objects, respectively.  There are
	    two subclasses of <CLASSNAME>MKWaveTables</CLASSNAME>,
	    <CLASSNAME>MKPartials</CLASSNAME> (frequency domain representation)
	    and <CLASSNAME>MKSamples</CLASSNAME> (time domain representation).
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    A <CLASSNAME>MKNote</CLASSNAME> can only belong to one
	    <CLASSNAME>MKPart</CLASSNAME> and a <CLASSNAME>MKPart</CLASSNAME> can
	    only belong to one <CLASSNAME>MKScore</CLASSNAME>.  However,
	    <CLASSNAME>MKEnvelopes</CLASSNAME> and
	    <CLASSNAME>MKWaveTables</CLASSNAME> may be referenced by any number
	    of <CLASSNAME>MKNote</CLASSNAME>s.   
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKTuningSystem</CLASSNAME> is a class that represents
	    a mapping of the 128 MIDI keys to a set of frequencies.  These
	    frequencies need not be increasing. 
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    <SECT1 id="NoteClass">
      <TITLE>The <CLASSNAME>MKNote</CLASSNAME> Class</TITLE>
    
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>A <CLASSNAME>MKNote</CLASSNAME> consists of:	</PARA>
	  <ITEMIZEDLIST>
	    <LISTITEM>
	      <PARA>
		a <CONSTANT>noteType</CONSTANT> and a
		<CONSTANT>noteTag</CONSTANT>	
	      </PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA>a set of parameters	</PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA>an optional <CONSTANT>timeTag</CONSTANT> and duration</PARA>
	    </LISTITEM>
	  </ITEMIZEDLIST>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    There are 5 types of <CLASSNAME>MKNotes</CLASSNAME>, represented by
	    the <emphasis>noteType:</emphasis>	
	  </PARA>
	  <ITEMIZEDLIST>
	    <LISTITEM>
	      <PARA> <CONSTANT>noteOn</CONSTANT> - start of a musical phrase or
		rearticulation</PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA> <CONSTANT>noteOff</CONSTANT> - end of a musical
		phrase</PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA> 
		<CONSTANT>noteDur</CONSTANT> - a <CONSTANT>noteOn</CONSTANT>
		with a duration	 
	      </PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA> <CONSTANT>noteUpdate</CONSTANT> - update to a running
		musical phrase(s) </PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA> <CONSTANT>mute</CONSTANT> - none of the above</PARA>
	    </LISTITEM>
	  </ITEMIZEDLIST>
	  <PARA>
	    (in an <PRODUCTNAME>MusicKit</PRODUCTNAME> program, a prefix is
	    required, as in <CONSTANT>MK_noteOn</CONSTANT>) </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    The <CONSTANT>noteTag</CONSTANT> groups a series of
	    <CONSTANT>noteOns</CONSTANT> and <CONSTANT>noteUpdates</CONSTANT>
	    with a single <CONSTANT>noteOff</CONSTANT>.  This is called a
	    <emphasis>phrase</emphasis>. 
	  </PARA> 
	  <PARA> 
	    <CONSTANT>noteTag</CONSTANT> is essential for
	    <CONSTANT>noteOn</CONSTANT> and <CONSTANT>noteOff</CONSTANT> 
	  </PARA>
	  <PARA>
	    <CONSTANT>noteTag</CONSTANT> is optional for
	    <CONSTANT>noteDur</CONSTANT> and <CONSTANT>noteUpdate</CONSTANT>
	  </PARA>
	  <PARA><CONSTANT>noteTag</CONSTANT> is not used for
	  <CONSTANT>mute</CONSTANT></PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    A <CONSTANT>noteUpdate</CONSTANT> without a
	    <CONSTANT>noteTag</CONSTANT> applies to all running patches and is
	    &ldquo;sticky&rdquo;.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    A <CONSTANT>noteDur</CONSTANT> represents a
	    <CONSTANT>noteOn</CONSTANT>/<CONSTANT>noteOff</CONSTANT> pair.  If
	    another <CONSTANT>noteOn</CONSTANT> with the same
	    <CONSTANT>noteTag</CONSTANT> appears before the duration is
	    expended, the implied <CONSTANT>noteOff</CONSTANT> is canceled.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> 
	    The <CONSTANT>timeTag</CONSTANT> refers to the location of the
	    <CLASSNAME>MKNote</CLASSNAME> in a <CLASSNAME>MKPart</CLASSNAME> and
	    is only used in that context.  Its value is in beats. 
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
  
    <SECT1 id="NoteParameters">
      <TITLE><CLASSNAME>MKNote</CLASSNAME> Parameters</TITLE>
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>
	    Parameters consist of an integer identifier and a value.
	  </PARA>
	  <PARA>
	    <TABLE FRAME="ALL">
	      <TITLE>Examples of <CLASSNAME>MKNote</CLASSNAME> Parameters</TITLE>
	      <TGROUP COLS="3" COLSEP="1">
		<COLSPEC COLNUM="1" ALIGN="LEFT">
		<COLSPEC COLNUM="2" ALIGN="LEFT">
		<COLSPEC COLNUM="3" ALIGN="CENTER">
		<THEAD>
		  <ROW>
		    <ENTRY>Examples:</ENTRY>
		    <ENTRY>identifier</ENTRY>
		    <ENTRY>value</ENTRY>	
		  </ROW>
		</THEAD>
		<TBODY>
		  <ROW>
		    <ENTRY></ENTRY>
		    <ENTRY><CONSTANT>MK_freq</CONSTANT></ENTRY>
		    <ENTRY>440</ENTRY>	
		  </ROW>
		  <ROW>
		    <ENTRY></ENTRY>
		    <ENTRY><CONSTANT>MK_amp</CONSTANT></ENTRY>
		    <ENTRY>0.4</ENTRY>	
		  </ROW>
		  <ROW>
		    <ENTRY></ENTRY>
		    <ENTRY><CONSTANT>MK_waveform</CONSTANT></ENTRY>
		    <ENTRY>&ldquo;SA&rdquo;</ENTRY>
		  </ROW>
		</TBODY>	
	      </TGROUP>	
	    </TABLE>
	  </PARA>
	</LISTITEM>
      
	<LISTITEM>
	  <PARA>
	    The <PRODUCTNAME>MusicKit</PRODUCTNAME> defines a number of
	    parameters.  These begin with the &ldquo;MK_&rdquo; prefix.  In addition, you can
	    define your own with [<CLASSNAME>MKNote</CLASSNAME>
	    parTagForName: @"myParameter"]
	  </PARA>
	</LISTITEM>
	
	<LISTITEM>
	  <PARA>Parameter values may be one of the following types:
	  </PARA>
	  <ITEMIZEDLIST>
	    <LISTITEM>
	      <PARA>int</PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA>double</PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA><CLASSNAME>NSString</CLASSNAME></PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA><CLASSNAME>MKEnvelope</CLASSNAME></PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA><CLASSNAME>MKWaveTable</CLASSNAME></PARA>
	    </LISTITEM>
	    <LISTITEM>
	      <PARA>
		any object (e.g. a param's value could be a
		<CLASSNAME>MKScore</CLASSNAME>)
	      </PARA>
	    </LISTITEM>
	  </ITEMIZEDLIST>
	</LISTITEM>
      
	<LISTITEM>
	  <PARA>
	    The object that realizes the <CLASSNAME>MKNote</CLASSNAME>
	    determines how to interpret the parameters.  Any parameters it
	    doesn't care about are ignored.  This makes reorchestration easy.
	  </PARA>
	</LISTITEM>
	
	<LISTITEM>
	  <PARA>
	    The <CLASSNAME>MKNote</CLASSNAME> class does automatic type
	    conversion where possible. Thus, the consumer of a
	    <CLASSNAME>MKNote</CLASSNAME> parameter need not concern himself
	    with how the parameter was set. 
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
    
    <SECT1 ID="EnvelopeClass">
      <TITLE><CLASSNAME>MKEnvelope</CLASSNAME> Class</TITLE>
    
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA>
	    <CLASSNAME>MKEnvelopes</CLASSNAME> are (<emphasis>x,y,z</emphasis>)
	    triplets:	
	  </PARA>
	  <PARA>
	    <emphasis>x</emphasis> &horbar; time in seconds. The first
	    <emphasis>x</emphasis> value is usually 0.	
	  </PARA>
	  <PARA><emphasis>y</emphasis> &horbar; value </PARA>
	  <PARA>
	    <emphasis>z</emphasis> &horbar; smoothing value (rarely used)
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>
	    An envelope may have a &ldquo;stickpoint&rdquo;.  The envelopes stops at the
	    stickpoint until the <CONSTANT>noteOff</CONSTANT> or the end of its
	    duration.
	  </PARA>
	</LISTITEM>
      
	<LISTITEM>
	  <PARA> 
	    Example scorefile: [(0,0)(.1,1)(2.1,.5) | (2.7,.1)(3,0)];
	  </PARA>
	</LISTITEM>
	
      <LISTITEM>
	  <PARA>Same example in Objective-C</PARA>
	  <PROGRAMLISTING>
MKEnvelope *env;

double times[] = {0, 0.1, 2.0, 2.7, 3.0};	
double values[] = {0, 1, 0.5, 0.1, 0};
env = [MKEnvelope new];              /* or alloc/init in 2.0 */	
[env setPointCount:5 xArray:times yArray:values];	
[env setStickPoint:2];               /* zero-based           */
	  </PROGRAMLISTING>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Some <CLASSNAME>MKSynthPatches</CLASSNAME> (software
	    <ACRONYM>DSP</ACRONYM> instruments) also support attack and
	    release parameters.  If present, they override the times in the
	    <CLASSNAME>MKEnvelope</CLASSNAME>.  E.g. if attack is 0.1 in
	    example above, the envelope times becomes {0,.005,0.1...}
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> Scaling parameters are also common.  E.g. freq1 for value when
	    frequency envelope is 1 and <emphasis role="bold">freq0</emphasis>
	    for value when frequency envelope is 0.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> The <APPLICATION>EnvelopeEd</APPLICATION> program (included in the <PRODUCTNAME>MusicKit</PRODUCTNAME> distribution)
	    helps design envelopes.
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
    </SECT1>
  
    <SECT1 ID="WaveTableClass">
      <TITLE><CLASSNAME>MKWaveTable</CLASSNAME> Class</TITLE>
      
      <ITEMIZEDLIST>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKWaveTable</CLASSNAME> class can supply data as
	    <emphasis role="bold">DSPDatum</emphasis> or double.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKPartials</CLASSNAME> objects (frequency domain
	    <CLASSNAME>MKWaveTables</CLASSNAME>) are set in a similar manner to
	    <CLASSNAME>MKEnvelopes</CLASSNAME>, where
	    (<emphasis>x,y,z</emphasis>) are harmonic number, relative
	    amplitude, and phase in degrees.
	  </PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA> <CLASSNAME>MKSamples</CLASSNAME> objects (time domain
	    <CLASSNAME>MKWaveTables</CLASSNAME>) are set by supplying a
	    <CLASSNAME>MKSound</CLASSNAME> object or 
	    <emphasis role="bold">soundfile</emphasis>. Currently, the
	    <CLASSNAME>MKSound's</CLASSNAME> length must be a multiple of 2, and
	    the sound must be 16 bit mono.    
	  </PARA>
	</LISTITEM>      
	<LISTITEM>
	  <PARA>
	    The <APPLICATION>WaveformEditor</APPLICATION> program (ccrma ftp)
	    helps design waveforms.
	  </PARA>
	</LISTITEM>
      </ITEMIZEDLIST>
      
      <FIGURE ID="Figure2-1">
	<TITLE>EnvelopeEd</TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
<!--	    <IMAGEDATA FILEREF="Images/MusicKitClass2-EnvelopeEd.pdf"
		       FORMAT="pdf" SCALE=50>
-->
	    <IMAGEDATA FILEREF="Images/MusicKitClass2-EnvelopeEd.eps"
		       FORMAT="eps" SCALE=50>
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/MusicKitClass2-EnvelopeEd.gif"
		       FORMAT="gif">
	  </IMAGEOBJECT>
	</MEDIAOBJECT>
      </FIGURE>
    
      <FIGURE ID="Figure2-2">
	<TITLE>Wave Form Display</TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
<!--	    <IMAGEDATA FILEREF="Images/MusicKitClass2-Wave_Form_Display.pdf"
		       FORMAT="pdf" SCALE=50>
-->
	    <IMAGEDATA FILEREF="Images/MusicKitClass2-Wave_Form_Display.eps"
		       FORMAT="eps" SCALE=50>
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/MusicKitClass2-Wave_Form_Display.gif"
		       FORMAT="gif">
	  </IMAGEOBJECT>
	</MEDIAOBJECT>
      </FIGURE>
    </SECT1>
  
    <SECT1 ID="ExampleReview">
      <TITLE>Example (review)</TITLE>
    
      <PROGRAMLISTING>
#import &lt;MusicKit/MusicKit.h&gt;
#import &lt;MKSynthPatches/MKSynthPatches.h&gt;
MKNote *aNote;
MKPart *aPart;
MKScore *aScore;
MKEnvelope *env;
	
double times[] = {0,0.1,2.1,2.7,3.0};
double values[] = {0,1,0.5,0.1,0};
aScore = [[MKScore alloc] init];	
aPart = [[MKPart alloc] init];	
aNote = [[MKNote alloc] init];	
env = [[MKEnvelope alloc] init];
[env setPointCount: 5 xArray: times yArray: values];	
[env setStickPoint: 2]; 	
[aNote setPar: MK_ampEnv toEnvelope: env];
[aNote setPar: MK_freq toDouble: 440.0];
[aNote setTimeTag: 1.0];            /* Play after 1 beat */	
[aNote setDur: 1.0];                /* Duration is 1 beat */	
[aScore addPart: aPart];	
[aPart addNote: aNote];	
aNote = [[MKNote alloc] init];      /* Another Note for info */
[aNote setPar: MK_synthPatch toString: @"Wave1i"];
[aPart setInfo: aNote];
[aScore writeScorefile: @"test.score"];
system("playscore test.score");    /* We'll show how to do this in the program later. */
    </PROGRAMLISTING>
  </SECT1>
  
  <SECT1 ID="Assignment">
    <TITLE>Assignment - Week 2</TITLE>

      <ORDEREDLIST>
	<LISTITEM>
	  <PARA>Do <APPLICATION>Interface Builder</APPLICATION> example
	    (MusicKitClass/example2.wn).
	  </PARA>
	</LISTITEM>
      
	<LISTITEM>
	  <PARA>Create an <APPLICATION>Interface Builder</APPLICATION> program
	    that creates a <CLASSNAME>MKScore</CLASSNAME> algorithmically (based
	    on user input), writes a scorefile, and invokes <COMMAND>playscore</COMMAND> by:</PARA>

	  <PROGRAMLISTING>
system("playscore test.score");
	  </PROGRAMLISTING>
      
	  <PARA>Use <FILENAME>Examples/example3</FILENAME> as an
	example.  In a few weeks, we'll show you how to play the score
	directly from Objective-C.
	  </PARA>
	</LISTITEM>
      </ORDEREDLIST>
    </SECT1>
  </CHAPTER>
    
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:upper
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: "MusicKitTutorials.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
