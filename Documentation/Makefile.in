# $Id$
#
# @configure_input@
#
# Documentation Makefile -- Just installs documentation
#
# Usage: make CHANGELOG=[ChangeLog] OBJDIR=[ObjectDirectory] VERSION=[VersionString]
#
# Create a set of HTML pages and PDFs from the SGML documentation and creates HTML pages
# of class documentation from header files using Doxygen. The entire tree of documentation
# is then packaged up suitable for shipping to the musickit.org web-site. We do this with a
# customised stylesheet (in DSSSL) to produce the correct text colouring, background images etc.
#
# Leigh Smith <leigh@leighsmith.com>
#
# Copyright (c) 2005, The MusicKit Project.  All rights reserved.
#
# Permission is granted to use and modify this code for commercial and 
# non-commercial purposes so long as the author attribution and copyright 
# messages remain intact and accompany all relevant code.
#

SGMLTRANS=@SGMLTRANS@
PDFJADETEX=@PDFJADETEX@
DOXYGEN=@DOXYGEN@

# Default to storing all the temporary files in volatile /tmp.
OBJDIR=/tmp

# Default to a debugging version
VERSION=0.0.0

BUILDDIR=$(OBJDIR)/MKDocumentation.build
DOC_TARBALL_FILE=MusicKitREADME.tar.bz2
DOC_TARBALL_PATH=$(BUILDDIR)/$(DOC_TARBALL_FILE)

# We allow the path to the ChangeLog to be passed in on the command
# line since it is generated in the source packaging process.
CHANGELOG=

# HTML_DISTRIB_DIR makes it easier to install into SourceForge.
HTML_DISTRIB_DIR=htdocs
HTML_TMPDIR=$(BUILDDIR)/$(HTML_DISTRIB_DIR)
PDF_OUTPUT_DIR=$(BUILDDIR)/PDF

SITEUSER=leighsmith
SITE=musickit
SITEDIR=/home/groups/m/mu/musickit
SITEHTMLDIR=$(SITEDIR)/$(HTML_DISTRIB_DIR)

MK_STYLEDIR=SGML
MK_STYLESHEET=$(MK_STYLEDIR)/MusicKit_README.dsssl
CSS=MusicKit_README.css
DOXYCSS=

README=MusicKit_README

ifeq ($(PDFJADETEX),)
$(warning DocBook pdfjadetex translator not found, building of PDF documentation skipped.)
PDFS=
else
PDFS=$(addprefix $(PDF_OUTPUT_DIR)/, $(README).pdf MusicKitTutorials.pdf MusicKitConcepts.pdf)
endif

ifeq ($(DOXYGEN),)
$(warning doxygen translator not found, building of API documentation skipped.)
DOXYGENHTML=
else
DOXYGENHTML=Frameworks/index.html
endif

HTMLS=$(addprefix $(HTML_TMPDIR)/, index.html \
       Concepts/index.html \
       TutorialClasses/index.html \
       $(DOXYGENHTML))

#
# This is where the standard admonition images reside. This is set for
# where fink installs Norman Walsh's images as part of his DocBook
# DSSSL distribution.
#
ADMONIMAGESDIR=/sw/share/sgml/dsssl/docbook-dsssl-nwalsh/images

#
# Where documentation is installed on a local system.
#
INSTALL_DIR=$(DSTROOT)/Library/Documentation/MusicKit

.PHONY: all clean install upload check_sgmltrans

# 
# The highest level and default rule if there is an SGML translator, makes everything.
# Generates the HTML tarball. The HTML tarball will create the PDF
# before it copies them into the HTML directory.
#

all: check_sgmltrans $(DOC_TARBALL_PATH)

#
# Check an SGML translator has been found in the autoconf configuration process.
# If there isn't, we want to exit gracefully rather than causing an error which will stop
# the entire MusicKit build process.
#
check_sgmltrans:
ifeq ($(SGMLTRANS),)
	$(error DocBook SGML translator not found, building of documentation skipped.)
	@exit 0
endif

clean:
	-rm -rf $(HTML_TMPDIR)
	-rm -rf $(PDF_OUTPUT_DIR) 

install:: check_sgmltrans $(DOC_TARBALL_PATH) $(INSTALL_DIR)
	tar -x -j -C $(INSTALL_DIR) -p -f $(DOC_TARBALL_PATH)
	-chmod -R go-w $(INSTALL_DIR)
	-chmod -R ugo+r $(INSTALL_DIR)

#
# Automate the secure uploading of the MusicKit documentation tarball to the sourceforge website.
#
upload: $(DOC_TARBALL_PATH)
	@echo "Do the following within sftp after logging in:"
	@echo "put $(DOC_TARBALL_PATH) $(DOC_TARBALL_FILE)"
	sftp -b - $(SITEUSER),$(SITE)@web.sourceforge.net
	ssh $(SITEUSER),$(SITE)@shell.sourceforge.net "create"
	ssh $(SITEUSER),$(SITE)@shell.sourceforge.net "tar -x -j -C $(SITEHTMLDIR) -f $(SITEDIR)/$(DOC_TARBALL_FILE)"

$(INSTALL_DIR):
	mkdir -p $(INSTALL_DIR)

#
# Create HTML from the supplied DocBook SGML file.
# While we could just point all CSS references to a single CSS file,
# by copying a CSS file into each subdirectory, this removes the
# requirement to refer to the head of a document tree for the CSS
# file, it's always within the HTML directory.
#
define create-html
	mkdir -p $(dir $@)/Images
	cp $(CSS) $(dir $@)
	-cp $(wildcard $(dir $<)/Images/*.gif) $(wildcard $(ADMONIMAGESDIR)/*.gif) $(dir $@)/Images
	root=`pwd`; cd $(dir $@); \
	$(SGMLTRANS) -t sgml -ihtml -d $$root/$(MK_STYLESHEET)\#html $$root/$< 
endef

#
# We assume we flawlessly create a Jadetex document from the supplied
# DocBook SGML file which never fails to process with jadetex.
# We have to process the TeX file three times to properly resolve
# references.
#
# We used to use:
#	cp $(MK_STYLEDIR)/Images/*.eps $(dir $@)/Images
#	-cp -r $(dir $<)/Images/*.eps $(dir $@)/Images
#	cp $(ADMONIMAGESDIR)/*.eps $(dir $@)/Images
# 	jadetex $(basename $@).tex; \
# 	jadetex $(basename $@).tex; \
# 	jadetex $(basename $@).tex; \
# 	dvipdf $(basename $@).dvi $@
#
# However dvipdf produces pdf files with the top margin incorrect,
# shifting the whole page too high. So we use pdfjadetex. This
# would be fine except pdfjadetex does not accept images as .eps
# files. It either accepts .png files, but doesn't manage
# transparency correctly, or .pdfs, which are not valid imagedata
# formats according to docbook...sigh. So we hack replacing .eps
# files with .pdfs.
#
define create-pdf
	mkdir -p $(dir $@)/Images
	$(SGMLTRANS) -t tex -d $(MK_STYLESHEET)\#print -o $(BUILDDIR)/epsversion.tex $<
	# ugly hack to swap .eps files for .pdfs for pdfjadetex to work
	sed -e "s/\.eps/\.pdf/g" < $(BUILDDIR)/epsversion.tex > $(basename $@).tex
	-cp $(ADMONIMAGESDIR)/*.pdf $(MK_STYLEDIR)/Images/*.pdf $(wildcard $(dir $<)/Images/*.pdf) $(dir $@)/Images
	cd $(dir $@); \
	pdfjadetex $(basename $@).tex; \
	pdfjadetex $(basename $@).tex; \
	pdfjadetex $(basename $@).tex 
endef

#
# Generate the README documentation
#
$(HTML_TMPDIR)/index.html: $(README).sgml $(CSS)
	$(create-html)
	-cp -r $(MK_STYLEDIR)/Images/*.png $(HTML_TMPDIR)/Images

#
# Generate the Concepts Book underneath the README directory, so it
# can be referenced by URL independent of the README directory.
#
$(HTML_TMPDIR)/Concepts/index.html: Concepts/MusicKitConcepts.sgml $(CSS)
	$(create-html)

#
# Generate the tutorials and also place them under the README directory.
#
$(HTML_TMPDIR)/TutorialClasses/index.html: TutorialClasses/MusicKitTutorials.sgml $(CSS)
	$(create-html)

#
# Generate the MusicKit_README PDF.
#
$(PDF_OUTPUT_DIR)/$(README).pdf: $(README).sgml
	$(create-pdf)

$(PDF_OUTPUT_DIR)/MusicKitTutorials.pdf: TutorialClasses/MusicKitTutorials.sgml
	$(create-pdf)

$(PDF_OUTPUT_DIR)/MusicKitConcepts.pdf: Concepts/MusicKitConcepts.sgml
	$(create-pdf)

#
# Run doxygen over the framework source directories, generating the
# Framework index file and other supporting files into the HTML_TMPDIR.
#
$(HTML_TMPDIR)/Frameworks/index.html: $(DOXYCSS)
	( cat HeaderDoc/frameworks.doxy ; echo "PROJECT_NUMBER=$(VERSION)" ; echo "HTML_OUTPUT=$(HTML_TMPDIR)/Frameworks/" ) | doxygen -
	# Copy images to appear in the class documentation into each
	# respective class directory.
	mkdir -p $(HTML_TMPDIR)/Frameworks/MKSynthPatches/Images
	cp Frameworks/SynthPatches/Reference/Classes/Images/*.png $(HTML_TMPDIR)/Frameworks/MKSynthPatches/Images
	# cp $(DOXYCSS) $(HTML_TMPDIR)/Frameworks/

#
# Create a tarball.
#
$(DOC_TARBALL_PATH): $(PDFS) $(HTMLS) Publications/*.pdf $(CHANGELOG)
	# Copy all PDFs to be placed on the web-site, 
	mkdir -p $(HTML_TMPDIR)/Publications
	# those prepared beforehand... 
	cp Publications/*.pdf $(HTML_TMPDIR)/Publications
	# ChangeLogs from the source code packaging process...
	-if [ $(CHANGELOG)_x != _x ]; then cp $(CHANGELOG) $(HTML_TMPDIR); fi
	# and those generated by this script.
	-if [ "$(PDFS)"_x != ""_x ]; then cp $(PDFS) $(HTML_TMPDIR); fi
	tar -c -j -C $(HTML_TMPDIR) -f $(DOC_TARBALL_PATH) .
	# echo $(basename $(HTML_TMPDIR))
