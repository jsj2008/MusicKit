<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY % html "IGNORE">
<![%html;[
<!ENTITY % print "IGNORE">
<!ENTITY docbook.dsl
         PUBLIC "-//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN"
         CDATA dsssl>
]]>
<!ENTITY % print "INCLUDE">
<![%print;[
<!ENTITY docbook.dsl 
         PUBLIC "-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN" 
         CDATA dsssl>
]]>
]>

<!-- 
  $Id$

  MusicKit customizations for documentation to appear on www.musickit.org.
  Basically all this does is add in CSS statements and header images 
  to make the output more typically SourceForge style HTML pages.

  Leigh Smith <leigh@leighsmith.com>
-->

<style-sheet>
<style-specification id="print" use="docbook">
<style-specification-body> 

;; ====================
;; customize the print stylesheet
;; ====================

;; preferred-mediaobject-extensions and acceptable-mediaobject-extensions
; (define preferred-mediaobject-notations 
;   (list "TEX" "JPG" "JPEG" "PNG" "PDF" "linespecific")) 

; (define preferred-mediaobject-extensions 
;   (list "tex" "jpg" "jpeg" "png" "pdf")) 

; (define acceptable-mediaobject-extensions 
;   (list "gif" "bmp")) 

; (define acceptable-mediaobject-notations 
;   (list "GIF" "GIF87a" "GIF89a" "BMP")) 


;; (define %graphic-extensions% '("eps" "epsf" "gif" "tif" "tiff" "jpg" "jpeg" "png" "pdf"))
;; PDF is the preferred image format but it seems PNG is chosen in preference.
(define %graphic-default-extension% "eps")

;; make funcsynopsis look pretty
(define %funcsynopsis-decoration%
  ;; Decorate elements of a FuncSynopsis?
  #t)

;; use graphics in admonitions, and have their path be "Images"
;; NO: we are not yet ready to use pdfs in TeX.
(define %admon-graphics-path%
  "Images/")
(define %admon-graphics%
  #f)
;; (define admon-graphic-default-extension ".pdf")

;; this is necessary because right now jadetex does not understand
;; symbolic entities, whereas things work well with numeric entities.
(declare-characteristic preserve-sdata?
          "UNREGISTERED::James Clark//Characteristic::preserve-sdata?"
          #f)
(define %two-side% #t)

(define %section-autolabel% 
  ;; Are sections enumerated?
  #t)

;; (define %title-font-family% 
;;   ;; The font family used in titles
;;   "Ariel")

(define %visual-acuity%
  ;; General measure of document text size
  ;; "presbyopic"
  ;; "large-type"
  "presbyopic")

;; (define %generate-part-toc% #t)

;; (define %block-start-indent% 10pt)

</style-specification-body>
</style-specification>

<!--
;; ====================
;; customize the html stylesheet
;; ====================
-->
<style-specification id="html" use="docbook">
<style-specification-body> 

;; this is necessary because right now jadetex does not understand
;; symbolic entities, whereas things work well with numeric entities.
(declare-characteristic preserve-sdata?
          "UNREGISTERED::James Clark//Characteristic::preserve-sdata?"
          #f)

;; put the legal notice in a separate file
(define %generate-legalnotice-link%
  #t)

;; Adds CSS style-sheet support
(define %stylesheet%
  "MusicKit_README.css")

;; use graphics in admonitions, and have their path be "Images"
(define %admon-graphics-path%
  "Images/")
(define %admon-graphics%
  #t)

;; make funcsynopsis look pretty
(define %funcsynopsis-decoration%
  ;; Decorate elements of a FuncSynopsis?
  #t)

(define %html-ext% ".html")

(define ($shade-verbatim-attr$)
  ;; Make the background color darker than the standard so it is
  ;; easier to see against white text. 
  (list
   (list "BORDER" "0")
   (list "BGCOLOR" "#202020")
   (list "WIDTH" ($table-width$))))

(define %generate-article-toc% 
  ;; Should a Table of Contents be produced for Articles?
  ;; If true, a Table of Contents will be generated for each 'Article'.
  #t)

(define %generate-part-toc% #t)

(define (toc-depth nd)
  ;; more depth (2 levels) to toc; instead of flat hierarchy
  2)

(define %shade-verbatim%
  #t)

(define %use-id-as-filename%
  ;; Use ID attributes as name for component HTML files?
  #t)

(define %graphic-default-extension% "gif")

;; TODO need inlinemediaobject managing image definition

(define %root-filename%
  ;; The filename of the root HTML document (e.g, "index").
  "index")

(element emphasis
  ;; make role=strong equate to bold for emphasis tag
  (if (equal? (attribute-string "role") "strong")
     (make element gi: "STRONG" (process-children))
     (make element gi: "EM" (process-children))))

;; Redefinition of $verbatim-display$
;; Origin: dbverb.dsl
;; Different foreground and background colors for verbatim elements
;; Author: Philippe Martin (feloy@free.fr) 2001-04-07

(define ($verbatim-display$ indent line-numbers?)
  (let ((verbatim-element (gi))
        (content (make element gi: "PRE"
                       attributes: (list
                                    (list "CLASS" (gi)))
                       (if (or indent line-numbers?)
                           ($verbatim-line-by-line$ indent line-numbers?)
                           (process-children)))))
    (if %shade-verbatim%
        (make element gi: "TABLE"
              attributes: (shade-verbatim-attr-element verbatim-element)
              (make element gi: "TR"
                    (make element gi: "TD"
                          (make element gi: "FONT" 
                                attributes: (list
                                             (list "COLOR" (car (shade-verbatim-element-colors
                                                                 verbatim-element))))
                                content))))
        content)))

;;
;; Customize this function
;; to change the foreground and background colors
;; of the different verbatim elements
;; Return (list "foreground color" "background color")
;;
(define (shade-verbatim-element-colors element)
  (case element
    (("SYNOPSIS") (list "#000000" "#6495ED"))
    ;; ...
    ;; Add your verbatim elements here
    ;; ...
    (("SCREEN") (list "#498650" "#000000"))
    (else (list "#000000" "#E0E0E0"))))

(define (shade-verbatim-attr-element element)
  (list
   (list "BORDER" 
	(cond
		((equal? element (normalize "SCREEN")) "1")
		(else "0")))
   (list "BGCOLOR" (car (cdr (shade-verbatim-element-colors element))))
   (list "WIDTH" ($table-width$))))

;; End of $verbatim-display$ redefinition

</style-specification-body>
</style-specification>

<external-specification id="docbook" document="docbook.dsl">

</style-sheet>

