<!-- $Id$ -->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!entity mkurl "http://musickit.sourceforge.net">
]>

<ARTICLE ID="ScorePlayerHelp">
  <ARTHEADER>
    <TITLE>ScorePlayer</TITLE>
    <AUTHOR>
      <FIRSTNAME>David</FIRSTNAME> 
      <OTHERNAME ROLE=MI>A.</OTHERNAME>
      <SURNAME>Jaffe</SURNAME>
    </AUTHOR>
    <AUTHOR>
      <FIRSTNAME>Julius</FIRSTNAME>
      <OTHERNAME ROLE=MI>O.</OTHERNAME>
      <SURNAME>Smith</SURNAME>
    </AUTHOR>
    <ABSTRACT>
      <PARA>
	Help documentation for the MusicKit application
	<APPLICATION>ScorePlayer</APPLICATION>
      </PARA>
    </ABSTRACT>
  </ARTHEADER>
  
  <SECT1 ID="Introduction">
    <TITLE>Introduction to <APPLICATION>ScorePlayer</APPLICATION></TITLE>
    
      <PARA>
	<APPLICATION>ScorePlayer</APPLICATION> uses the
      <PRODUCTNAME>MusicKit</PRODUCTNAME> to synthesize music in real
      time on the <ACRONYM>DSP</ACRONYM> or an external
      <ACRONYM>MIDI</ACRONYM> synthesizer.
      <APPLICATION>ScorePlayer</APPLICATION> reads documents called
      <emphasis>scorefiles</emphasis>.  A number of example scorefiles
      are provided on <filename
      role=directory>MusicKit/Music/Scores</filename>.  This directory
      contains both short sound examples (recognized by the
      <emphasis>Examp</emphasis> filename prefix) and longer musical
      excerpts.
      </PARA>
      <PARA>
	To specify a file, select <GUIMENUITEM>Document/Open...</GUIMENUITEM>
      from the main menu.  This will bring up the <emphasis>Open
      Panel</emphasis>. Select a file.
      <APPLICATION>ScorePlayer</APPLICATION> then reads the file into
      a <PRODUCTNAME>MusicKit</PRODUCTNAME> <CLASSNAME>MKScore</CLASSNAME>
      object and makes it the <emphasis>current file</emphasis>. To
      play the file, click on the <GUIBUTTON>Play</GUIBUTTON> button:
      </PARA>
      <FIGURE ID="playIcon">
	<TITLE>Play Icon</TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/play.eps" FORMAT="EPS">
	  </IMAGEOBJECT> 
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/play.tiff" FORMAT="TIFF">
	  </IMAGEOBJECT> 
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/play.gif" FORMAT="GIF">
	  </IMAGEOBJECT> 
	</MEDIAOBJECT>
      </FIGURE>
      <PARA>When you click <emphasis>Play</emphasis>,
	<APPLICATION>ScorePlayer</APPLICATION> synthesizes the music on the
	<ACRONYM>DSP</ACRONYM> and/or an external <ACRONYM>MIDI</ACRONYM>
	synthesizer, using the instruments (<PRODUCTNAME>MusicKit</PRODUCTNAME>
	objects called <CLASSNAME>MKSynthPatch</CLASSNAME>es) specified in the
	scorefile.  <APPLICATION>ScorePlayer</APPLICATION> also allows you to
	set the tempo, in beats-per-minute, of the scorefile while it is being
	played.  The tempo field is initialized to the tempo value found in the
	file.  The default tempo (if none is supplied in the file) is 60
	beats-per-minute, i.e. 1 beat-per-second.
      </PARA>
      <FIGURE ID="tempoIcon">
	<TITLE>Tempo Panel</TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/tempo.eps" FORMAT="EPS">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/tempo.tiff" FORMAT="TIFF">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/tempo.gif" FORMAT="GIF">
	  </IMAGEOBJECT>
	</MEDIAOBJECT>
      </FIGURE>
    </SECT1>
    <SECT1 ID="SynthesisOnDSP">
      <TITLE>How is the Music Synthesized on the <ACRONYM>DSP</ACRONYM>?</TITLE>
      <PARA>
	Music synthesis involves the computation of a stream of numbers, or
	<emphasis>samples</emphasis> from a higher-level parametric description.
	A <emphasis>synthesis technique</emphasis> is a particular type of
	parametric description.  In the twenty-odd years that computer music has
	existed, a number of useful synthesis techniques have been developed,
	each with its own strengths.  The philosophy of the
	<PRODUCTNAME>MusicKit</PRODUCTNAME> is to provide a maximum of
	flexibility by supporting a wide variety of techniques and allowing new
	techniques to be developed.
      </PARA>
      <PARA>
	<APPLICATION>ScorePlayer</APPLICATION> recognizes a number of synthesis
	techniques, each represented internally as a
	<CLASSNAME>MKSynthPatch</CLASSNAME> class.  Each
	<CLASSNAME>MKSynthPatch</CLASSNAME>, in turn, is capable of producing
	many different sounds.  The <PRODUCTNAME>MusicKit</PRODUCTNAME> provides
	a library of common synthesis techniques.  These include:
      </PARA>
      <TABLE FRAME="NONE" ID="SYNTHESISTECHNIQUES">
	<TITLE><CLASSNAME>MKSynthPatch</CLASSNAME>es implementing Synthesis Techniques</TITLE>
	<TGROUP COLS="2">
	  <COLSPEC COLNAME="SYNTHNAME" ALIGN="LEFT">
	    <COLSPEC COLNAME="SYNTHDESCR" ALIGN="LEFT">
	      <TBODY>
		<ROW>
		  <ENTRY>Pluck</ENTRY>
		  <ENTRY>Plucked string synthesis</ENTRY>	
		</ROW>
		<ROW>
		  <ENTRY>Wave1i</ENTRY>
		  <ENTRY>Wavetable synthesis</ENTRY>
		</ROW>
		<ROW>
		  <ENTRY>Wave1vi</ENTRY>
		  <ENTRY>Wavetable synthesis with vibrato</ENTRY>
		</ROW>
		<ROW>
		  <ENTRY>Shape</ENTRY>
		  <ENTRY>Waveshaping (non-linear distortion) synthesis</ENTRY>
		</ROW>
	  <ROW>
	    <ENTRY>Shapev</ENTRY>
	    <ENTRY>Waveshaping with vibrato</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>Fm1i</ENTRY>
	    <ENTRY>Frequency modulation (FM) synthesis</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>Fm1vi</ENTRY>
	    <ENTRY>FM synthesis with vibrato</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>Fm2cvi</ENTRY>
	    <ENTRY>FM synthesis with two modulators in series and
	      vibrato</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>Fm2cnvi</ENTRY>
	    <ENTRY>Like Fm2cvi, but with a noise modulator also</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>Fm2pvi</ENTRY>
	    <ENTRY>FM synthesis with two parallel modulators and 
	      vibrato</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>Fm2pnvi</ENTRY>
	    <ENTRY>Like Fm2pvi, but with a noise modulator also</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>DBWave1vi</ENTRY>
	    <ENTRY>Like Wave1vi, but with a timbre data base</ENTRY>	
	  </ROW>
	  <ROW>
	    <ENTRY>DBWave2vi</ENTRY>
	    <ENTRY>Like Wave1vi, but with interpolation between two
	      tables</ENTRY>
	  </ROW>
	  <ROW>
	    <ENTRY>DBFm1vi</ENTRY> 
	    <ENTRY>Like Fm1vi, but with timbre database</ENTRY>
	  </ROW>
	</TBODY>
      </TGROUP>
    </TABLE>
      <PARA>Information on how to use the
	<PRODUCTNAME>MusicKit</PRODUCTNAME>
	<CLASSNAME>MKSynthPatch</CLASSNAME>es can be found in the
	Music documentation, which can be found in the folder:</PARA>
	<PARA> <filename
	role=directory>Documentation/MusicKit</filename>
    </PARA>
    <PARA>
      In particular, see the file: 
      <FILENAME>Documentation/Frameworks/SynthPatches/IntroSynthPatches.rtf</FILENAME>
      for a description of <PRODUCTNAME>MusicKit</PRODUCTNAME>
      SynthPatches, and 
      <ULINK URL="&mkurl;/MusicKitConcepts/musictables.html">Music
	Tables</ULINK> &horbar; handy tables of
      <CLASSNAME>MKSynthPatch</CLASSNAME> attributes.</PARA>

    <PARA>
      Application developers or musicians with some programing
      experience can also make their own
      <CLASSNAME>MKSynthPatch</CLASSNAME>es, based on the examples
      found on <FILENAME
      role=directory>MusicKit/Examples/exampleSynthPatch</FILENAME>,
      and explained in
      <ULINK URL="&mkurl;/MusicKitConcepts/musicsynthandproc.html">
	Music Synthesis and Processing</ULINK>.
    </PARA>
    <PARA>
      Creating new unit generators (the elementary modules combined in a
      synthpatch) is described in:
      <FILENAME ROLE=DIRECTORY>
	MusicKit/Documentation/Frameworks/DSP</FILENAME>.
    </PARA>
  </SECT1>
  <SECT1 id=MusicOnMIDISynth>
    <TITLE>How is the Music Synthesized on an External <ACRONYM>MIDI</ACRONYM> Synthesizer?</TITLE> 

    <PARA>To use
      <APPLICATION>ScorePlayer</APPLICATION> with an external
      <ACRONYM>MIDI</ACRONYM> synthesizer or sampler, if you have
      <PRODUCTNAME>NeXT</PRODUCTNAME> hardware, you need to connect a
      <PRODUCTNAME>NeXT</PRODUCTNAME> <ACRONYM>MIDI</ACRONYM>
      interface to the <PRODUCTNAME>NeXT</PRODUCTNAME> serial port
      "A".  If you have Intel-based hardware, then you need an
      MPU-401-compatible <ACRONYM>MIDI</ACRONYM> card.</PARA>
    <tip>
      <para>
	Note that you can not assume that a Macintosh
	<ACRONYM>MIDI</ACRONYM> interface will work on a
	<PRODUCTNAME>NeXT</PRODUCTNAME> Machine.
      </para>
    </TIP>

    <PARA>Then simply specify "midi" as the
      <CLASSNAME>MKSynthPatch</CLASSNAME> in the scorefile.  If you have
      two <PRODUCTNAME>NeXT</PRODUCTNAME> <ACRONYM>MIDI</ACRONYM>
      interfaces, you can use both serial ports at once, resulting in
      32 channels of <ACRONYM>MIDI</ACRONYM>.  See the discussion on
      scorefiles below for more information.</PARA>
  </SECT1>
  <SECT1 id="WhatIsAScorefile">
    <TITLE>What is a Scorefile?</TITLE> 
    <PARA>
      A <emphasis>scorefile</emphasis> is a representation of the notes in the
      piece, along with a great deal of detail concerning how the notes are
      synthesized, including how the timbre of individual notes evolves over
      time.  There are two types of scorefiles, <emphasis>text form</emphasis>
      and <emphasis>optimized form</emphasis>.  The text form, recognized by
      the <FILENAME>.score</FILENAME> file name extension, can be
      edited with an ordinary text editor.  It contains statements in a simple
      scripting language called <emphasis>ScoreFile</emphasis> and can be
      edited with an ordinary text editor.  <emphasis>ScoreFile</emphasis> is
      essentially a list of Notes, but it can also include simple programming
      constructs, such as loops, conditionals and variables.
    </PARA>
    <PARA>
      The optimized form, recognized by the
      <filename>.playscore</filename> file name extension, gets its
      name because <APPLICATION>ScorePlayer</APPLICATION> can read it
      more rapidly&horbar;hence, it is the preferred one to play.
      However, since the difference in speed is only significant with
      very large scorefiles, the convenience of the text form usually
      outweighs the benefit of the optimized form.  In any case,
      <APPLICATION>ScorePlayer</APPLICATION> can freely translate
      between the two forms, as described later in this document.
      </PARA>
      <PARA>Here are the icons for the two forms of scorefile:</PARA>
      <FIGURE ID="ScoreIcon">
	<TITLE><FILENAME>.score</FILENAME> (text form) file icon</TITLE>      
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/Score.eps" FORMAT="EPS">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/Score.tiff" FORMAT="TIFF">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/Score.gif" FORMAT="GIF">
	  </IMAGEOBJECT>
	</MEDIAOBJECT> 
      </FIGURE>  
      <FIGURE ID="PlayScoreIcon">
	<TITLE><FILENAME>.playscore</FILENAME> (optimized form) file icon </TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/PlayScore.eps" FORMAT="EPS">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/PlayScore.tiff" FORMAT="TIFF">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/PlayScore.gif" FORMAT="GIF">
	  </IMAGEOBJECT>
	</MEDIAOBJECT> 
      </FIGURE>  
      <PARA>The little speaker icon distinguishes the <emphasis>play</emphasis>
	version.</PARA>
    </SECT1>
    <SECT1 id="ScoreFileLanguage">
      <TITLE>The ScoreFile Language</TITLE>
      <PARA>
	In a <FILENAME>.score</FILENAME> file, each note is
	represented as a <emphasis>note statement</emphasis>
	consisting of a <emphasis>part</emphasis> and a list of
	attributes called <emphasis>parameters</emphasis>.  For
	example, one common parameter is the pitch or
	<emphasis>frequency</emphasis> of the note.  It appears in the
	scorefile as the parameter <emphasis>freq</emphasis>.  Here is
	a simple ScoreFile Language file that plays two notes:
      </PARA>
      <PROGRAMLISTING>
// Anything following two slashes is a comment (ignored by the ScoreFile interpreter)	
// The scorefile begins with a header	
part guitar;                    // Declares a new part	
guitar synthPatch:"Pluck";      // Specifies the synthPatch of the part to be "Pluck"	

// Next comes the body of the scorefile	
BEGIN;			// Notes begin here
guitar (2) freq:c4;	// A note with duration of 2 beats and pitch of middle C
t 1; 			// Set time to 1 beat (time must only go forward)
guitar (1) freq:d4;	// A note with duration of 1 beat, pitch of D above mid-C
END;			// End of the body of the scorefile
    </PROGRAMLISTING>
      <PARA>This ScoreFile plays its notes on the <ACRONYM>DSP</ACRONYM>.  To
	change it to play on an external <ACRONYM>MIDI</ACRONYM> synthesizer,
	just change the synthPatch to "midi" (or "midi0") or "midi1."  On
	<PRODUCTNAME>NeXT</PRODUCTNAME> hardware, "midi0" corresponds to serial
	port A and "midi1" corresponds to serial port B.  On
	<PRODUCTNAME>Intel</PRODUCTNAME>-based hardware, "midi0" corresponds to
	the driver unit indicated in the defaults base as MIDI0 and "midi1"
	corresponds to the driver unit indicated in the defaults data base as
	MIDI1.  If you have only one <ACRONYM>MIDI</ACRONYM> card, just call it
	"midi" in your ScoreFile. You can also specify a <ACRONYM>MIDI</ACRONYM>
	channel parameter for each part.  
      </PARA>
      <PARA>Example:</PARA>
      <PROGRAMLISTING>
part guitar;	
guitar synthPatch:"midi" midiChan:1;  // Send on MIDI channel 1, serial port A

BEGIN;			              // Notes begin here
guitar (2) freq:c4;	// A note with duration of 2 beats and pitch of middle C
// etc.	
    </PROGRAMLISTING>
      <PARA>Of course, you can combine <ACRONYM>DSP</ACRONYM> and
	<ACRONYM>MIDI</ACRONYM> synthesis by including mulitple parts and
	setting their synthPatch parameters accordingly.  Here is the header of
	a scorefile that plays two parts on the <ACRONYM>DSP</ACRONYM> and two
	parts on <ACRONYM>MIDI</ACRONYM>: 
      </PARA>

    <PROGRAMLISTING>
part guitar1,guitar2,guitar3,guitar4;	
guitar1 synthPatch:"midi" midiChan:1;  // Send on MIDI channel 1, serial port A
guitar2 synthPatch:"midi" midiChan:2;  // Send on MIDI channel 2, serial port A
guitar3 synthPatch:"Pluck";            // Uses the Pluck synthpatch on the DSP
guitar4 synthPatch:"Pluck";            // Uses the Pluck synthpatch on the DSP
    </PROGRAMLISTING>
    <PARA>To begin learning the ScoreFile Language, first open one of
      the example <FILENAME>.score</FILENAME> files, select the
      <emphasis>Document/SaveAs...</emphasis> menu item and save it in
      your home directory.  A good place to save it is in <filename
      role=directory>~/Library/MusicKit/Music/Scores</FILENAME>, since
      ScorePlayer automatically looks there.  Next, choose the
      <emphasis>Edit Scorefile...</emphasis> menu item. (This menu
      item is only enabled if you have read in a
      <FILENAME>.score</FILENAME> format scorefile). This will open
      up the file in the <APPLICATION>TextEdit</APPLICATION> application.
      Make some changes, then return to
      <APPLICATION>ScorePlayer</APPLICATION>, open your new version of
      the file and play it.  If you make an error in the file, an
      error message will appear in an alert panel.  It is also saved
      in an error log that you can view by selecting the
      <emphasis>Show Error Log</emphasis> menu item.  For a more
      complex example than the one shown above, see
      <filename>MusicKit/Music/Scores/Examp8.score</FILENAME>.  For
      more information on scorefiles, see the <ULINK
      url="&mkurl;/MusicKitConcepts/scorefilespart.html">ScoreFile
      Reference</ULINK>.
    </PARA>
  </SECT1>
  <SECT1 ID="ScoreConversion">
    <TITLE>Converting Between Scorefile Forms</TITLE>
    <PARA>
      Since only the text form is shipped with the
      <PRODUCTNAME>MusicKit</PRODUCTNAME> Release, it is useful to know how to
      convert one scorefile form into another.  Here's how to convert it to
      the optimized form:</PARA>
    <ORDEREDLIST>
      <LISTITEM>
	<PARA>Select the <emphasis>Document/SaveAs...</emphasis> menu item.
	  This will bring up the <emphasis>Save As</emphasis> panel.
	  </PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>You will see a button displaying a
	  <FILENAME>.score</FILENAME> icon.  If you click it
	  repeatedly, it will display the various types of files to
	  which you can convert the current file.  Stop at the
	  <FILENAME>.playscore</FILENAME> icon.</PARA>
	</LISTITEM>
	<LISTITEM>
	  <PARA>Select a file name to use for the
	  <FILENAME>.playscore</FILENAME> file you will
	  write.
	  </PARA>
	</LISTITEM>
      </ORDEREDLIST>
      <PARA>Keep in mind that unlike <emphasis>Save As</emphasis> options in
	some other <PRODUCTNAME>NeXT</PRODUCTNAME> applications, the current
	file is <emphasis>not</emphasis> changed to the newly saved file.
      </PARA>
    </SECT1>
    <SECT1 ID="ConvertingToSMF">
      <TITLE>Converting a Scorefile to a Standard <ACRONYM>MIDI</ACRONYM> File</TITLE> 
      <PARA>
	When exporting scorefile data to another application,
	particularly if that application runs on another computer, you
	may want to save a scorefile as a Standard
	<ACRONYM>MIDI</ACRONYM> file.  A <ACRONYM>MIDI</ACRONYM> file
	is similar to a <FILENAME>.playscore</FILENAME> file, except
	that it contains no information about the details of
	synthesis.  It is simply a list of notes.  Standard
	<ACRONYM>MIDI</ACRONYM> files can be read and written by
	nearly all sequencer programs.  To convert a scorefile to a
	<ACRONYM>MIDI</ACRONYM> file, follow the steps above, but
	select the <FILENAME>.midi</FILENAME> icon:
      </PARA>
    
    <FIGURE ID="MIDI">
	<TITLE>MIDI Icons</TITLE>
	<MEDIAOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/Midi.eps" FORMAT="EPS">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/Midi.tiff" FORMAT="TIFF">
	  </IMAGEOBJECT>
	  <IMAGEOBJECT>
	    <IMAGEDATA FILEREF="Images/Midi.gif" FORMAT="GIF">
	  </IMAGEOBJECT>
	</MEDIAOBJECT>
      </FIGURE>
      <PARA>To convert a Standard <ACRONYM>MIDI</ACRONYM> file into a scorefile,
	use the <APPLICATION>Ensemble</APPLICATION> application.</PARA>
    </SECT1>
  <SECT1 ID="ConvertToSoundFile">
    <TITLE>Converting a Scorefile to a Sound File</TITLE>
    <PARA>As mentioned above, music synthesis involves the computation of a
      stream of numbers, or <emphasis>samples</emphasis> from a higher-level
      parametric description.  These samples can be played immediately or
      written to a <emphasis>NeXT/Sun soundfile</emphasis>. Soundfiles are
      recognized by the <FILENAME>.snd</FILENAME> file name
      extension and have the following icon:
    </PARA>
    <FIGURE ID="SoundIcon">
      <TITLE>Sound Icons</TITLE>
      <MEDIAOBJECT>
	<IMAGEOBJECT>
	  <IMAGEDATA FILEREF="Images/Sound.eps" FORMAT="EPS">
	</IMAGEOBJECT> 
	<IMAGEOBJECT>
	  <IMAGEDATA FILEREF="Images/Sound.tiff" FORMAT="TIFF">
	</IMAGEOBJECT> 
	<IMAGEOBJECT>
	  <IMAGEDATA FILEREF="Images/Sound.gif" FORMAT="GIF">
	</IMAGEOBJECT> 
      </MEDIAOBJECT>
    </FIGURE>
    <PARA>If scorefiles are the PostScript of music, soundfiles are the
      <ACRONYM>TIFF</ACRONYM> files of music.  Just as <ACRONYM>TIFF</ACRONYM>
      files represent an image at one particular resolution, soundfiles
      represent the sound with a particular number of bits-per-sample and at a
      particular sampling rate.  Sound files tend to be quite large.
      Nevertheless, they are useful in a number of ways:</PARA>
    <ORDEREDLIST SPACING="NORMAL">
      <LISTITEM>
	<PARA>They represent a basic "flat" representation of the sound.
	  Because of the simplicity of this representation, you can apply a
	  variety of signal processing techniques to the sound.</PARA>
      </LISTITEM>
      <LISTITEM>
	<PARA>The <ACRONYM>DSP</ACRONYM>, like any real-time synthesizer, has
	  a limit to how much music it can create in real time.  If you need a
	  denser texture than the <ACRONYM>DSP</ACRONYM> can provide in real
	  time, you can write out your music as a soundfile, then create other
	  soundfiles and mix the soundfiles to create the dense texture you
	  desire.</PARA> 
      </LISTITEM>
      <LISTITEM>
	<PARA> Soundfile allow close examination of the sound, using any of a
	  variety of sound editors available for the
	  <PRODUCTNAME>NeXT</PRODUCTNAME>.</PARA> 
      </LISTITEM>
    </ORDEREDLIST>
    <PARA>To convert to a soundfile, select the
      <emphasis>Document/SaveAs...</emphasis> menu item and then click the
      file type button until it displays the soundfile icon.  Then click the
      <emphasis>Play</emphasis> button.  <emphasis>Note that you will not hear
	any sound while the file is being converted to a soundfile.</emphasis>
    </PARA>
    <PARA>
      You can also save a scorefile as a <emphasis>DSP commands
	soundfile</emphasis>. This file is actually a snapshot of the
      commands that are sent to the DSP.  It can be played with all
      the <PRODUCTNAME>NeXT</PRODUCTNAME> sound-playing programs.  The
      main advantage of a <ACRONYM>DSP</ACRONYM> commands soundfile
      over an ordinary soundfile is its size.  It can be many orders
      of magnitude smaller.  To save a scorefile as a
      <ACRONYM>DSP</ACRONYM> commands soundfile, select the
      <emphasis>Document/SaveAs...</emphasis> menu item and click the
      file type button until it displays the <ACRONYM>DSP</ACRONYM>
      commands soundfile icon.  Then click the
      <emphasis>Play</emphasis> button.  You <emphasis>will</emphasis>
      hear the music play as the <ACRONYM>DSP</ACRONYM> commands
      soundfile is being written.</PARA>
  </SECT1>
  <SECT1 ID="SendToDSPPort">
    <TITLE>Sending the Sound to an External <ACRONYM>DSP</ACRONYM> Serial Port Device</TITLE>
    <PARA>
      You can direct <APPLICATION>ScorePlayer</APPLICATION> to send its
      synthesis output to an external device connected to the
      <PRODUCTNAME>NeXT</PRODUCTNAME> <ACRONYM>DSP</ACRONYM> serial port.  For
      example, the <PRODUCTNAME>Singular Solutions AD64x</PRODUCTNAME>
      provides a direct-to-DAT interface.  The <PRODUCTNAME>Ariel
	ProPort</PRODUCTNAME> provides an external digital-to-analog conversion
      capability.  You chose the sound output destination with the
      <emphasis>Preferences...</emphasis> menu item, which brings up the
      Preferences panel.  Clicking the "Device-specific settings" button
      brings up a panel particular to the Sound Output device selected.  On
      <PRODUCTNAME>Intel</PRODUCTNAME> hardware, selecting "Default" uses the
      sound output setting that is the default for your sound card.  On
      <PRODUCTNAME>NeXT</PRODUCTNAME> hardware, it uses the
      <PRODUCTNAME>NeXT</PRODUCTNAME> monitor DAC.
    </PARA>
  </SECT1>
  <SECT1 ID="SynchToMTC">
    <TITLE>Synchronizing to <ACRONYM>MIDI</ACRONYM> Time Code</TITLE>
    <PARA>You can synchronize a <APPLICATION>ScorePlayer</APPLICATION>
      performance to incoming <ACRONYM>MIDI</ACRONYM> Time Code using the
      <EMPHASIS>Midi Time Code...</EMPHASIS> menu item.  Enable
      <ACRONYM>MIDI</ACRONYM> time code, then press the Play button.  The
      music will immediately seek to the correct point, as specified by the
      incoming <ACRONYM>MIDI</ACRONYM> time code.  Note that the music will
      not begin playing until the time code starts running.</PARA>
  </SECT1>
  <SECT1 ID="HelpingScorePlayer">
    <TITLE>Helping ScorePlayer Do Its Job</TITLE>
    <PARA>
      <APPLICATION>ScorePlayer</APPLICATION> does its best to feed the musical
      score to the <ACRONYM>DSP</ACRONYM> on time.  However, if the computer
      has to divide its attention between
      <APPLICATION>ScorePlayer</APPLICATION> and other tasks, the tempo of the
      music may become erratic. For best results, you should refrain from
      exercising other applications while playing music with
      <APPLICATION>ScorePlayer</APPLICATION>.  The
      <emphasis>Preferences...</emphasis> menu item allows you to control
      whether or not <APPLICATION>ScorePlayer</APPLICATION> automatically
      slows down the music to keep it playing smoothly.
    </PARA>
  </SECT1>
  <SECT1 ID="FindingMoreInformation">
    <TITLE>Finding More Information</TITLE> 
    <PARA>
      To learn more about scorefiles and the
      <PRODUCTNAME>MusicKit</PRODUCTNAME>, see the documentation
      beginning with the <ULINK URL="&mkurl;">README</ULINK> Homepage.
    </PARA>
  </SECT1>
</ARTICLE>
  
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:upper
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
