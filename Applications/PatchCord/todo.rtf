{\rtf0\ansi{\fonttbl\f0\fswiss Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\f0\b\fs24 \cf0 Todo - 
\i\b0 Save all my notes on PatchCord in case I need to write a paper about it.
\i0\b \
\
Icons\
Guitar Neck Class\
MIDI FileSaving\
MIDI Driver\
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 Enabling Delete and ToSynth, getFromSynth buttons, need to get that right.\
\
Start working on a GuitarNeckView.m - define all methods I can think of.\
\
File Saving and Restore - a simple approach is use the encoders, but\
final solution is use the SMF 1.\
\
MIDI - dependent on an Intel MPU-401 MIDI driver, and the MusicKit\
ported to work with QuickTime.\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 \
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 NSBundles\
\
NSNotification use for working out which MIDISysExSynth subclass to load the NIB for on receipt of a MIDI message\
\
Produce an Envelope class interface for the Juno.\
\
MIDI channel semantics & update for Juno ValueField\
Perhaps I should display the default channel to send the Synth patch to in the NSTableView, so the user can select and then download (double click to just send it), or override the channel.\
\
Have a text service that does the importAscii, exportAscii thing for interactions with other systems a la DATer.app (nearing completion)\
\
Could press new patch twice in a row and bring up two new patches of the same synth, then modify them and selectively compare both in the same synth. In theory, if a patch is received and both are set to the same channel then both should redisplay the new patch. MIDI channel needs to initially be "Omni" then be settable to 1-16, ports A/B etc.\
In this case we want to be loading the nib when the user selects the synth, but when initially setting all synths for MIDI reception, we either load all the nibs and leave them dormant (potentially chewing up a lot of nib object memory we need not) until one is selected then make it visible or load it then.\
\
Perhaps kludge up a link to just the MIDI portions of the MusicKit, rather than the entire library - Rhapsody MIDI stuff will be some time away\
\
Is it appropriate to make the Juno an instance of an Instrument so as to be a controllable object from the MusicKit?\
\
The default synth selected and highlighted in the table should be Raw SysEx Synth, so new patch or whatever brings up the Unhandled text view.\
So once a sysEx message is received, the selected synth should change to that reacting to the sysex message. Then new patch would automatically call up another of the one we just used unless the user specifically clicked on another icon.\
\
Get text delegate method to: (done)\
retreive the text just typed\
encode into a sysex message\
send to synths\
\
the smallest length patch in the bank determines the minimum size keylength to search on, so a  Juno-106 and a sampler in the same bank only needs key on 24 bytes.\
\
Read on encoding and decoding methods so importAscii and exportAscii become encodeAscii and decode methods.\
\
Add in something into MIDISysExSynth for dealing with MIDI patchbays. Just a comment for now.\
\
Connecting cables between synths should allow a group of synths to become one great big synthesiser, with different aspects . We definitely need simultaneous instances of a synth patch for multitimbral synths\
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 Bank/and Patch semantics:\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 \
Probably create a newBank if the application is started by just clicking the icon rather than an existing bank. - Done\
\
Probably separate each MIDISysExSynth into the model which reacts to MIDI messages and the controller which interacts with the GUI. Thus a MIDISysExSynth encapsulates the MIDI codes, the MIDISysExSynthController the GUI behaviour.\
\
1. Will always need a set of registered synths loaded before we choose one from newpatch because as soon as the BankController GUI is showing we can accept a SysExmessage to create a new synth. \
\
2. Will be loading the synths from bundles which will require determining the filenames for loading the nib files later.\
Each model loaded from the bundle will be registered with SysExMessage\
\
3. To be able to accept a SysExMessage requires an operable MIDISysExSynth subclass instance. This needs a view associated with it (i.e the nib) so when a message is received it will pop up the inspector for that message.\
\
4. Depending on the semantics of channels, we could have multiple instances of the MIDISysExSynth subclass displayable (if we have two synths on different channels or if we are copying between patches etc). Each requires a nib load which in theory should be done by the MIDISysExSynthController class (currently the model controller behaviour is bound together in the subclass).\
\
5. We definitely shouldn't have an instance of the model in the view (nib). It should be upto the controller to instantiate both the view and the model.\
\
6. In that case, the owner of the Nib will have to be the i.e Juno106Controller class with all links to windows joined to the files owner\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 \
Drag and Drop\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 What would be really promising would be a drag and drop for the patches. If they are dragged (from the synth's icon image) onto a text field or terminal, then we should get an ascii formatted sysex MIDI message. If they are dragged onto another PatchCord window, then the patch should be converted as best as possible to the new format. This would be combinatorially problematic unless we use a Class hierarchy \
of Analog Synths, FM, Physical Models, Effects processors, samplers so we define general ways of modelling and converting envelopes, filters etc to superclass prototypes which can then be swapped.\
So an envelope would be a separate object which is held by the AnalogSynth class. When the Juno receives a patch it updates it's inherited envelope setting (ADSR values)\
\
It would be nice to be able to have separate\
instances of different junos, so that you could visually compare the\
two and listen to the two by alternatively selecting their windows\
(name the window by the patch name, Untitled if new) which would cause\
a download. This would need separate MIDI channels for each window,\
allowing two Junos to be represented with two windows. The selection\
of a window would dump the patch to the synth on the channel (perhaps\
some testing of destination MIDI channel and patch can ensure\
redundant patch sends are avoided).\
\
Should selecting a patch on the Juno not encountered before start a\
new window, no, should modify the current window under focus, and\
therefore flag the window as modified (with the standard modified window icon).\
\
With more than one window open, the ability to morph between patches,\
(by some increment each time a key is played on the Juno? At some rate\
(perhaps from the MIDI clock) requires\
some representation of the patch which is to be modified by the user\
interface. Together with more esoteric patch generators (1/f\
randomness etc) also adds weight to isolating the export of the patch.\
\
Related would be to establish links (like real patch cords with Interface builder), so that sliders can be interfaced between patches and general MIDI continuous controllers, creating timbre manipulation devices.\
\
Want to have export menu items on the Patch menu for exporting in ASCII and as a Standard MIDI file (which the MusicKit should be able to do for us).\
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 Envelopes
\b0 \
Envelopes: should try importing and exporting as MusicKit format envelopes,\
and using EnvelopeEd to edit them. This should give us:\
1) a way of interactively producing envelopes (twiddling sliders on the\
Juno and then dropping onto a MK scorefile or application.\
2) A way of achieving a timing consistency between MIDI and DSP / Common\
Lisp Music hardware and software.\
3) Access to EnvelopeEd to really edit the envelopes effectively.\
4) Probably need to subclass for looping envelopes of the Prophet.\
\
Definitely implement the text based envelope strings, so we can use EnvelopeEd to drag and drop envelopes onto the Juno. Probably use a simplified display version so we can visualise it in the synth. Will be a restricted version, generating subsets if dragging from the Juno and quantizing when received.\
\
Rather than having an envelope display button, perhaps just an envelope well?\
\

\b Soundfile display\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 Nice to have a window acting as an osciliscope (using the DSP kit) and\
perhaps frequency analyser to see the result of modifying the synth parameters.\
This should be developed so that the sampling of the synth can be performed saving the snd file so that the synth can be put on the web\
What would be neat would be the ability to alt-click on individual sliders/settings etc then shift-alt-click to collect an arbitary grouping of parameters taken from sliders and paste them onto another patch, allowing the user to graft patches together. Then the next thing to be able to do is be able to drag patch fragments between dissimilar synths, say defining common envelope orientations for a set of patches.\
This should really be a separate application - resound which has a number of modules, one of which being a wavelet module (in Octave) which produces skeletons which can be used to generate patch similarity metrics.\
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 Exporting
\b0 \
We should export the patch names and numbers for a particular device as a patch list to Sequence.app/patchlists and then run Sequence.app/patchlists/midi-convert to turn it into a patch list useful by Sequence. Will need to check the permissions for writing. The Name should be determined from the Class name of the Synth object.\
\
Each SysExSynth patch should have a MIDI channel patch number associated with it, a MIDI channel and a patch description. We should use format 1 MIDI files to save the patches in as it is platform independent and standard.\
\
Use text meta-event to list sort order of field identifiers\
Use text meta-event to give the version of PatchCord (copyright?)\
Use in this order for each MIDI track:\
FF 04 Instrument Name - patchDescription\
FF 20 01 MIDI channel prefix\
Patch change\
SysEx message #1 for this patch\
1 second event delay\
SysEx message #2 for this patch\
Use text meta-event for any other non-standard data saving requirements.\
\

\b Class Hierarchies
\b0  \
EditorController - Manages the whole application, creating SynthControl windows as needed.\
	Responsible for database management and invocation of patches.\
SynthControl - Controls one synth, one per synth edit window\
JunoControl - Controls\
\
Define AnalogSynth FMSynth FXEditor, GuitarController Sampler Classes so information can be transferred from one device to another.\
\
Probably want each Synthesiser object inspector instance to run in a separate thread so you can be firing several SysEx messages from different sources at the program.\
\
Each sub-class of a synthControl (or engine) should have:\
Ideally, the visual mimics will be updated by the synthControl Class\
so the rest of the application can be independent of the updates.\
(moving sliders, ADSR displays)\
\
CanUploadPatches  - Determines if patches are uploaded manually or can\
		    be commanded to upload\
CanUsePatchForKey - Determines if the patch is able to be used as a\
		    unique key in the database. Otherwise, some sort\
		    of condensed identifier should be used for the key.\
UploadPatch:TargetSynth		- Retrieve Patch from Synthesiser, if CanUploadPatches is true.\
DownloadPatch:TargetSynth	- Send Patch to Synthesiser\
EditParameter:Parameter:Value:	- Modify the parameter of the patch \
RetrievePatch	  - Return the current Patch\
SetPatch	  - Assign a new patch (updating the visual mimic)\
\
MIDISysExSynths: (to distinguish from other DSP based synthesisers)\
Juno-106\
Quadraverb\
\
Should newPatch be an class method? if so, should it create an instance also?\
\
The Prophet should actually register a subclass (or delegate) of the MIDISampleDump object so it can receive SDS data and prophet specific stuff. Thus one instrument may actually need two instrument instances.\
\
Every slider or input should in theory be able to be controlled by a continous controller and every slider input should in theory be able to be used as a continuous controller. Some sort of subclass of slider needs to be devised with Continous controller settings.\
\

\b Juno
\b0 \
It would also need to respond to messages from MIDI sysex determined\
to be for the Juno we are dealing with (MIDI channel).\
\
Perhaps need a Sysex managing object which has methods to set the MIDI\
channel the Juno should respond to, to update the patch number when a\
patch is received, to send messages to the juno object if the sysex\
message received is a 106 sysex on the right channel to update a\
parameter or a new patch.\
 \
It would have a downloadPatch method to send the entire patch to the Juno.\
It would need an importPatch method to receive a new patch from the\
database and/or the Juno (which is a responder to a specific MIDI\
sysex event)\
\
Should the patch be normalised, so that sliders are 0.0 to 1.0,\
especially for random generation of patches. Should random generation\
(and importing from other patch databases) be using MIDI codes or a\
normalised data structure.\
\
Need to think about a display of envelopes, which could pop up as a\
separate window or could be part of each Juno window (which is where\
it should be).\
\
Juno object should need\
\
MIDI channel\
patch number\
18 byte Sysex patch (prob just sysex byte array)\
Instrument Category (string)\
Instrument Description (string)\
\
Juno -  first editor\
Make so the Juno's sliders become standard MIDI continous controllers so we can use them for many tasks.\
The Juno won't be sold.\
\
Either the File's Owner is Juno106 so we have the Window outlet set or it's BankController. originally it was Controller and that allowed Controller to get a window value. Proper MVC says it should be the Juno that actually loads the Nib file - time to read on Bundles. Depends whats in the nib, do we have a juno object in there or just the JunoView? Will we need a juno object for each screen instance? Remember it's really an inspector. Use notifications as basis of SysExReceivers - I should keep the SysExReceiver class and replace the internals.\
\

\b Quadraverb
\b0 \
Want a pull down menu describing the configuration and then layout (graphically) the routing in the QV of the appropriate modules. Each icon (delay/reverb/preamp/EQ) in the patch should be an object with it's own inspector accessible by clicking.\
\
FXProcessor\
  Reverb\
  Delay\
  Gain\
  EQ\
\
MultiFX\
  Holds a collection of FXProcessors and a configuration scheme\
Make the Quadraverb patch cord editor display a spectrum with peaks given the settings of the EQ.\
\
There wont be a synthbuilder patch to suit a QV.\
         QV - get to point of being able to save files.\
		Could just run the QV program as a wrapper.\
		Important - I will probably need a DSP w/Distortion for a long time.\
\
QV - need mixer with sliders that rename themselves depending on the configuration\
A Configuration popup list to show the current configuration\
\
When specifying frequencies, allow those frequencies to be set with a standard pitch pallete using a keyboard, cents, pitchbend, a continuous slider, fretboard also. Ideally some external package for tuning systems allowing determination of pitch. We should have a drag and drop icon arrangement so it covers keyboard splits, fretboard splits for guitar synths etc. Obviously, we should be able to specify the palette by external MIDI (i.e. singing into a pitch-to-midi device).\
\

\b Axon and other guitar synths\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 As soon as we are up and going with the Juno and Unhandled, go real hard on the Axon sysex editor.\
\
Build a guitar neck and pickup object so we can reuse the display for numerous projects, use the existing source and convert/hack. Then we can graphically determine picking layouts etc.\
\
Fretboard and Pickup zone display with a connecting line per GuitarSynthDesign.diagram2\
\
Segment is the basis of the system. A segment inspector is the easiest idea but I don't want a peep hole to view these thru. Ideally I should be able to bring up an inspector for each segment as separate windows so all can be viewed simultaneously. Perhaps with a little icon at the top of the segment inspector showing the string/fret/pick combo graphically as well as the Axon nomenclature. Including Hold (foot on a pedal icon).\
\
I want to be able to graph break even points between pick locations mapping to a modulation parameter.\
Use draggable boundaries over picking region as well as fret regions.\
\
Rather or in addition to inspectors, have all patch details displayed, so I can see what each pick will do wrt to patch number, modulation settings (which should be a standard MIDI slider for each setting) etc.\
\
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 Prophet VS:
\b0 \
The VS is an example of a synth that bundles several patches into a single patch string.\
Four sound file wells in a diamond to allow dragging sound files in/out of the patch, that gives us an interface to the harmonic stuff.\
	 Prophet VS - SampleVision for Waveform Up/Download,\
\
		Build app around the object to display 4 Snd files as\
		per VS oscillator bank diamond. Should allow drag and drop to and from these sound displays.\
\
Create a modulation matrix like the one on the case, perhaps with horizontal and vertical sliders to set the degree of modulation\
                          |\
===== ---------O-------\
\
\

\b Conversion to Openstep\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 SysExMessage reconsider semantics of importFromAscii perhaps just part of an encoder\
Need to determine how to recover last typed text from the NSText object so we can send MIDI strings to the synths.\
Probably need to move to QuickTime MIDI support\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 \
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 DisplayAndSearchSysEx: Instrument\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 \
- realizeNote\
Filter out those non-sysex messages\
or do a dispatch operation\
Use the patch to look for a bundle of objects corresponding to that librarian\
load it in if neccessary, pass the entire patch around (max flexability)\
\
[FrontPanel display: patch]\
[Database search: patch]\
\
if database search finds patch already in the file, retrieve the comments and categories fields and display them:\
[FrontPanel displayComments: comments category: category]\
\
Need a controller value update, so given a modification of the Frontpanel controls (moving a slider) need to send an message to the current object informing of the new value which eventually is sent as an appropriate SysEx message.\
\
Ultimately, using an OOP approach allows the package to be\
expanded to other MIDI synths after subclassing the Synth object.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 \
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 Bank databases\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b0 \cf0 Should the Juno object initiate the Database search (supplying the\
key?) rather than the sysex manager? Definately not the sysex manager.\
This implies the Juno object would need to update it's encapsulated\
patch (from a new patch or a parameter modification), download the\
current patch to the Juno (unless it just got the patch/parameter from\
there), signal the database search (which would ultimately update the\
patch name display if something was found) and perhaps update the\
front panel mimics (sliders etc).\
\
The trick is to determine what objects should do the display updates.\
The database search would only really ever retrieve data other than\
the patch (by definition, the patch is the database search key).\
However, when browsing patches, selected on some search criteria\
(search both name, category fields), selecting each patch should\
download the patch to the synth and update the display. However we may\
want the display to be updated without updating the synth or vice\
versa - However that is not a situation which would be wanted, as that\
introduces some asynch between possible display and sound - perhaps we\
shouldn't after all. The clearest behaviour should be to not tie the\
Juno object update to a display update and database update and MIDI\
update (unless that is considered good programming practice).\
\
\
SHould have:\
\
NewPatch GetFromSynth\
Description   |   SynthName\
Description   |   SynthName\
.\
.\
.\
(resizable including middle bar)\
\
So we are always creating a synth within a Bank.\
Randomize, NewPatch and GetFromSynth needs a synth type. Perhaps that should be a dialog box of sliding icons (with a memory of the previous synth). Perhaps just randomize those new patches (don't randomize the description, keep that as "Randomized new patch". Randomising a patch accidently could lose data, easier to just create new ones each time if the user wants to try different approaches. Definitely keep the new and random separate in the model, however. Perhaps just have a preference to allow such a thing.\
\
Want a find menu under edit to allow searching the descriptions in the bank. Remember there can be multiple banks, but Newpatch is associated with a single bank. Alternatively have a separate control panel and user the current focus bank? That implies a greyed out panel when the user is inspecting a patch within a bank and that the newPatches must be initially disabled as you can't create a new Patch outside of a Bank (although at the moment we bodge it up to do so).\
\
Need to consider the role of synthesiser wide parameters, that is, not associated\
with a single patch, such as performance parameters. These will need to be\
archived for a bank, specific for each synth. Surely they are class variables rather than instance variables? Perhaps each patch should hold it's own version so the user can pick and choose as need be? That way radically different configurations of the instrument should be possible.\
\
Should be able to save even if the synth is unknown. However, if later versions of the software have the inspector added in, it should appear properly.\
Thus Unhandled synth needs to be capable of holding and archiving a SysEx string. Thus it needs to be able to save into the patch, using copy as per Juno106. Perhaps we should highlight after each one is saved so we can see what we are progressively saving?\
\
 Implement banks\
May need to define a protocol to enable manipulation\
Bank and BankView with Controller interfacing?\
 BankView (loaded by nib loading)\
 Bank - As a collector of MIDISysExSynth instances\
\
\
\pard\tx520\tx1060\tx1600\tx2120\tx2660\tx3200\tx3720\tx4260\tx4800\tx5320\ql\qnatural

\b \cf0 Envelopes
\b0 \
Produce a Envelope class interface for the Juno.\
Just allow us to paste in an envelope string from MK or CM perhaps with a simple display or editor so we can use envelopeEd to do the main work.\
MIDI channel semantics & update for Juno ValueField\
Make the inspectors for the Juno etc in Patchcord interface to synthbuilder\
so harmonic manipulation can generate SDS downloads etc. Can use envelope\
objects already existing to do the work. Need to see if we could have constructed\
patchcord in Synthbuilder, would require fairly lowlevel actions, like SysEX\
routines and simple sliders.\
\
Current problem is having to load a nib to instantiate the object which causes the object to be initialised and therefore to register itself with SysExMessage so it is informed of incoming SysEx messages. Simplest solution is to load nibs initially for debugging, get everything working with Juno and then sort out the most efficient means.\
Probably create a proxy object which registers itself and reads the available objects, then loads them as needed. At the moment we have a\
\
Implement external file imports menu item (binary ascii)\
Importing MIDI. Include an option of accessing .mdx files, searching for binary strings consisting of F0,....(non high bit set), F7 and then giving the user the option of bringing up a compatible inspector.\
\
Still to deal with:\
1. Timing vargarities of each synth, obviously a MIDISysExSynth class issue, but how we time the data is yet to be dealt with.\
}
